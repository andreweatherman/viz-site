{
  "hash": "1fc1fb292d2354a371065d86cf045da6",
  "result": {
    "markdown": "---\ntitle: \"Painting Tails\"\nauthor: \"Carl Goodwin\"\ndate: \"2022-04-26\"\ncategories: [R, special effects]\ndescription: \"If you're a cat, go find the nearest open pot of paint. But if you're a data scientist, what to do?\"\nimage: \"feature.gif\"\n---\n\n\n![](feature.gif)\n\nThere are techniques for [painting a region under a curve](https://stackoverflow.com/questions/12429333/how-to-shade-a-region-under-a-curve-using-ggplot2). But the experimental [ggfx](https://ggfx.data-imaginist.com) package offers an interesting alternative solution based on the blending modes familiar to users of Photoshop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\nconflict_prefer(\"as_date\", \"lubridate\")\nlibrary(scales)\nlibrary(ggfx)\nlibrary(patchwork)\nlibrary(wesanderson)\nlibrary(clock)\nlibrary(tidyquant)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\n(cols <- wes_palette(\"Royal1\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/theme-1.png){width=100%}\n:::\n:::\n\n\nThe advantage here is that the tail-painting aesthetic needs no information about the shape of the curve; only the limits on the x-axis.\n\nThe left plot shows the raw components without blending. The right plot is only retaining the red where there is a layer below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np0 <- tibble(outcome = rnorm(10000, 20, 2)) |>\n  ggplot(aes(outcome)) +\n  scale_y_continuous(labels = label_percent())\n\np1 <- p0 +\n  geom_density(adjust = 2, fill = cols[3]) +\n  annotate(\"rect\",\n    xmin = 15, xmax = 18, ymin = -Inf, ymax = Inf,\n    fill = cols[2]\n  ) + \n  labs(title = \"Without Blending\", y = \"Density\")\n\np2 <- p0 +\n  as_reference(geom_density(adjust = 2, fill = cols[3]), id = \"density\") +\n  with_blend(annotate(\"rect\",\n    xmin = 15, xmax = 18, ymin = -Inf, ymax = Inf,\n    fill = cols[2]\n  ), bg_layer = \"density\", blend_type = \"atop\") + \n  labs(title = \"With Blending\", y = NULL)\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/blend-1.png){width=100%}\n:::\n:::\n\n\nOf course the red box could also be layered behind a density curve with alpha applied so it shows through. But if the preference is tail-only colouring, it's a neat solution.\n\nBlending is actually a handy solution for any awkward shape. The same technique is used here with a time series ribbon summarising the median, lower and upper quartiles of a set of closing stock prices.\n\n::: callout-note\nTry this [patch](https://stackoverflow.com/questions/72051854/quantmodgetsymbols-cannot-retrieve-data-from-yahoo-finance) if having problems with `tq_get`\n\nThis chunk is using the development version of dplyr which introduces [temporary grouping with .by](https://www.tidyverse.org/blog/2022/11/dplyr-1-1-0-is-coming-soon/#temporary-grouping-with-by).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntickrs <- c(\"AAPL\", \"NFLX\", \"TSLA\", \"ADBE\", \"META\", \"GOOG\", \"MSFT\")\n\np0 <- tq_get(tickrs, get = \"stock.prices\", from = \"2022-01-01\") |>\n  filter(!is.na(close)) |> \n  reframe(\n    close = quantile(close, c(0.25, 0.5, 0.75)),\n    quantile = c(\"lower\", \"median\", \"upper\") |> factor(),\n    .by = date\n  ) |>\n  pivot_wider(names_from = quantile, values_from = close) |>\n  ggplot(aes(date, median)) +\n  annotate(\"text\",\n    x = ymd(\"2022-03-16\"), y = 100,\n    label = \"Helpful\\nAnnotation\", colour = \"black\"\n  ) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(x = NULL)\n\np1 <- p0 +\n  geom_ribbon(aes(ymin = lower, ymax = upper), fill = cols[1]) +\n  geom_line(colour = cols[3]) +\n  annotate(\"rect\",\n    xmin = ymd(\"2022-03-01\"), xmax = ymd(\"2022-03-31\"),\n    ymin = -Inf, ymax = Inf, \n    fill = cols[4], colour = \"black\", linetype = \"dashed\"\n  ) + \n  labs(title = \"Without Blending\", y = \"Closing Price\")\n\np2 <- p0 +\n  as_reference(geom_ribbon(aes(ymin = lower, ymax = upper), \n                           fill = cols[1]), id = \"ribbon\") +\n  with_blend(\n    annotate(\n      \"rect\",\n      xmin = ymd(\"2022-03-01\"), xmax = ymd(\"2022-03-31\"),\n      ymin = -Inf, ymax = Inf, \n      fill = cols[4], colour = \"black\", linetype = \"dashed\"\n      ),\n    bg_layer = \"ribbon\", blend_type = \"atop\"\n    ) +\n  geom_line(colour = cols[3]) + \n  labs(title = \"With Blending\", y = NULL)\n\np1 + p2 +\n  plot_annotation(title = \"Median Price Bounded by Upper & Lower Quartiles\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tickers-1.png){width=100%}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}