{
  "hash": "cc0b81edac0e4c6cd98975f51ca4c83d",
  "result": {
    "markdown": "---\ntitle: \"Seeing the Wood for the Trees\"\ndate: \"2019-01-01\"\ncategories: [R, apps]\ndescription: \"Visualising small multiples when crime data leave you unable to see the wood for the trees\"\nimage: \"feature.gif\"\nbibliography: references.bib\n---\n\n\n![](feature.gif)\n\nIn [Criminal Goings-on](/project/forest) faceting offered a way to get a sense of the data. This is a great visualisation tool building on the principle of small multiples. There may come a point though where the sheer volume of small multiples make it harder to \"see the wood for the trees\". What's an alternative strategy?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(trelliscopejs)\nlibrary(rbokeh)\nlibrary(janitor)\nlibrary(vangogh)\n```\n:::\n\n\nThis time I'll use Van Gogh's \"The Starry Night\" palette for the feature image and plots. And there are 9 types of criminal offence, so `colorRampPalette` will enable the interpolation of an extended set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\n(cols <- vangogh_palette(\"StarryNight\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/theme-1.png){width=100%}\n:::\n\n```{.r .cell-code}\ncols9 <- colorRampPalette(cols)(9)\n```\n:::\n\n\nThe data need a little tidy-up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- str_c(\n  \"https://data.london.gov.uk/\",\n  \"download/recorded_crime_rates/\",\n  \"c051c7ec-c3ad-4534-bbfe-6bdfee2ef6bb/\",\n  \"crime%20rates.csv\"\n)\n\ncrime_df <-\n  read_csv(url, col_types = \"cfcfdn\") |>\n  clean_names() |>\n  mutate(\n    year = str_extract(year, \"(?:1999|200[0-9]|201[0-7])\"),\n    year = as.numeric(year)\n  ) |>\n  group_by(year, borough, offences) |>\n  summarise(number_of_offences = sum(number_of_offences)) |>\n  filter(\n    offences != \"All recorded offences\",\n    !borough %in% c(\n      \"England and Wales\",\n      \"Met Police Area\",\n      \"Inner London\",\n      \"Outer London\"\n    )\n  )\n```\n:::\n\n\nThis was the original visualisation in [Criminal Goings-on](/project/forest) using ggplot's `facet_wrap`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_df |>\n  mutate(borough = str_wrap(borough, 11)) |>\n  ggplot(aes(year, number_of_offences, colour = offences, group = offences)) +\n  geom_line() +\n  facet_wrap(~borough, scales = \"free_y\", ncol = 4) +\n  labs(\n    x = NULL, y = NULL, title = \"London Crime by Borough\",\n    colour = \"Offence\", caption = \"Source: data.gov.uk\"\n  ) +\n  scale_colour_manual(values = cols9) +\n  guides(colour = guide_legend(nrow = 3)) +\n  theme(\n    strip.background = element_rect(fill = cols[4]),\n    legend.position = \"bottom\",\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facet-1.png){width=100%}\n:::\n:::\n\n\nThere are some nice alternatives which allow one to go deeper into the data whilst making the whole experience more consumable and engaging.\n\nSwitching `facet_wrap` for `facet_trelliscope` is a simple option. Or `trelliscope`[@trelliscopejs] may be used in combination with the rbokeh [@rbokeh] (or plotly) packages. Irrespective of the option chosen, one can more flexibly display the several hundred \"small multiple\" panels required to go deeper into the crime data.\n\nPairing `trelliscope` with rbokeh permits the addition of some custom cognostics and additional interactivity. The slope cognostic, for example, enables filtering on the boroughs and types of offence exhibiting the steepest upward or downward trends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslope <- function(x, y) {\n  coef(lm(y ~ x))[2]\n}\n\nplot_data <- crime_df |>\n  group_by(borough, offences) |>\n  nest() |>\n  ungroup() |>\n  mutate(\n    additional_cogs = map_cog(\n      data,\n      ~ tibble(\n        slope = cog(slope(.x$year, .x$number_of_offences),\n          desc = \"Steepness of the trend\"\n        ) |>\n          round(2),\n        mean_count = cog(mean(.x$number_of_offences),\n          desc = \"Average count\"\n        ),\n        iqr_count = cog(IQR(.x$number_of_offences),\n          desc = \"Interquartile range\"\n        )\n      )\n    ),\n    panel = map_plot(\n      data,\n      ~ figure(xlab = \"Date\", ylab = \"Count\") |>\n        ly_lines(year, number_of_offences, color = cols[5], \n                 width = 2, data = .x) |>\n        ly_points(year, number_of_offences,\n          size = 10,\n          fill_color = cols[9],\n          hover = number_of_offences, data = .x\n        ) |>\n        theme_plot(\n          background_fill_color = cols[2],\n          background_fill_alpha = 0.5\n        )\n    )\n  )\n```\n:::\n\n\n::: callout-note\nA [Github issue](https://github.com/hafen/trelliscopejs/issues/122) has been raised re the `trelliscope` no longer rendering in the published page. Running the code chunks *will* generate the expected `trelliscope`, but the `qmd` file *will not knit* with the expected output, so the following chunk is currently set to `#| eval: false`.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data |>\n  trelliscope(\n    name = \"London Crime\",\n    desc = \"Source: data.gov.uk\",\n    nrow = 2,\n    ncol = 3,\n    state = list(\n      sort = list(sort_spec(\"slope\", dir = \"desc\")),\n      labels = c(\"borough\", \"offences\", \"slope\")\n    ),\n    path = \"appfiles\"\n  )\n```\n:::\n\n```{=html}\n<iframe src=\"/project/wood/appfiles\" width=100% height=\"600\" frameBorder=\"0\"  allowfullscreen></iframe>\n```\n\n## R Toolbox\n\nSummarising below the packages and functions used in this post enables me to separately create a [toolbox visualisation](/project/box) summarising the usage of packages and functions across all posts.\n\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Package       |Function                                                                                                                                                                                       |\n|:-------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|base          |as.numeric[1];  c[2];  conflicts[1];  cumsum[1];  function[2];  list[2];  mean[1];  round[1];  search[1];  sum[2]                                                                              |\n|dplyr         |filter[6];  arrange[2];  desc[2];  group_by[3];  if_else[3];  mutate[7];  summarise[2];  ungroup[1]                                                                                            |\n|ggplot2       |aes[1];  element_rect[1];  element_text[1];  facet_wrap[1];  geom_line[1];  ggplot[1];  guide_legend[1];  guides[1];  labs[1];  scale_colour_manual[1];  theme[1];  theme_bw[1];  theme_set[1] |\n|grDevices     |colorRampPalette[1]                                                                                                                                                                            |\n|janitor       |clean_names[1]                                                                                                                                                                                 |\n|purrr         |map[1];  map2_dfr[1];  possibly[1];  set_names[1]                                                                                                                                              |\n|rbokeh        |figure[1];  ly_lines[1];  ly_points[1];  theme_plot[1]                                                                                                                                         |\n|readr         |read_csv[1];  read_lines[1]                                                                                                                                                                    |\n|stats         |coef[1];  IQR[1];  lm[1]                                                                                                                                                                       |\n|stringr       |str_c[6];  str_count[1];  str_detect[2];  str_extract[1];  str_remove[2];  str_remove_all[1];  str_starts[1];  str_wrap[1]                                                                     |\n|tibble        |as_tibble[1];  tibble[3];  enframe[1]                                                                                                                                                          |\n|tidyr         |nest[1];  unnest[1]                                                                                                                                                                            |\n|trelliscopejs |cog[3];  map_cog[1];  map_plot[1];  sort_spec[1];  trelliscope[1]                                                                                                                              |\n|vangogh       |vangogh_palette[1]                                                                                                                                                                             |\n\n</div>\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}