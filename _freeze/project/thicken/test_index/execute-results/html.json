{
  "hash": "1651856fe1f0b55219324e13f44b6fc1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Plots Thicken\ndate: 2018-02-07\ncategories: [R, apps, web scraping]\ndescription: \"Every story needs a good plot. Which plot types generate the most interest on Wikipedia?\"\nbibliography: references.bib\nfilters:\n  - shinylive\n---\n\n\n![](feature.gif){fig-alt=\"The keys of a typewriter with \\\"R\\\" highlighted and the word \\\"plot\\\" being typed\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\nlibrary(shiny)\nlibrary(gridlayout)\nlibrary(rvest)\nlibrary(scales)\nlibrary(pageviews)\nlibrary(lubridate)\nlibrary(bslib)\nlibrary(wesanderson)\nlibrary(usedthese)\n\nconflict_scout()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_bw())\n\n(cols <- wes_palette(8, name = \"IsleofDogs1\", type = \"continuous\"))\n```\n\n::: {.cell-output-display}\n![](test_index_files/figure-html/theme-1.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncharts <-\n  tibble(\n    chart = read_html(str_c(\n      \"https://en.wikipedia.org/wiki/\",\n      \"Category:Statistical_charts_and_diagrams\"\n    )) |>\n      html_elements(\".mw-category-group a\") |>\n      html_text()\n  )\n\n# saveRDS(charts, \"charts\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npv <- \\(article) {\n  article_pageviews(\n    project = \"en.wikipedia\",\n    article,\n    user_type = \"user\",\n    start = \"2015070100\",\n    end = today()\n  )\n}\n\npageviews <- map(charts$chart, pv, .progress = TRUE) |>\n  list_rbind() |>\n  mutate(\n    date = ymd(date),\n    article = str_replace_all(article, \"_\", \" \")\n    )\n\nsaveRDS(pageviews, \"pageviews\")\n```\n:::\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(gridlayout)\nlibrary(rvest)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(pageviews)\nlibrary(lubridate)\nlibrary(bslib)\nlibrary(wesanderson)\n\ncharts <-\n  tibble(\n    chart = read_html(str_c(\n      \"https://en.wikipedia.org/wiki/\",\n      \"Category:Statistical_charts_and_diagrams\"\n    )) |>\n      html_elements(\".mw-category-group a\") |>\n      html_text()\n  )\n\npv <- function(article) {\n  article_pageviews(\n    project = \"en.wikipedia\",\n    article,\n    user_type = \"user\",\n    start = \"2015070100\",\n    end = today()\n  )\n}\n\ntheme_set(theme_bw())\n\ncols <- wes_palette(8, name = \"IsleofDogs1\", type = \"continuous\")\n\nui <- grid_page(\n  theme = bs_theme(version = 5, \n                   bootswatch = \"simplex\",\n                   primary = \"#9986A5\"),\n  layout = c(\n    \"header  header\",\n    \"sidebar line \"\n  ),\n  row_sizes = c(\n    \"100px\",\n    \"1fr\"\n  ),\n  col_sizes = c(\n    \"250px\",\n    \"1fr\"\n  ),\n  gap_size = \"1rem\",\n  grid_card(\n    area = \"sidebar\",\n    item_alignment = \"top\",\n    title = \"Options\",\n    item_gap = \"13px\",\n    dateRangeInput(\"dates\",\n      label = \"Date range\",\n      start = \"2015-07-01\",\n      end = NULL\n    ),\n    selectizeInput(\n      inputId = \"article\",\n      label = \"Chart type\",\n      choices = charts,\n      selected = c(\n        \"Violin plot\",\n        \"Dendrogram\",\n        \"Histogram\",\n        \"Pie chart\",\n        \"Qâ€“Q plot\",\n        \"Error bar\"\n      ),\n      options = list(maxItems = 8),\n      multiple = TRUE\n    ),\n    selectInput(\n      inputId = \"scales\",\n      label = \"Fixed or free y-axis\",\n      choices = c(\"Fixed\" = \"fixed\", \"Free\" = \"free\"),\n      selected = \"fixed\"\n    ),\n    selectInput(\n      inputId = \"log10\",\n      label = \"Log 10 or normal y-axis\",\n      choices = c(\"Log 10\" = \"log10\", \"Normal\" = \"norm\"),\n      selected = \"log10\"\n    )\n  ),\n  grid_card_text(\n    area = \"header\",\n    content = \"   Plot Plotter   \",\n    alignment = \"center\",\n    is_title = FALSE\n  ),\n  grid_card_plot(area = \"line\")\n)\n\nserver <- function(input, output, session) {\n  subsetr <- reactive({\n    req(input$article)\n    pageviews <- map_dfr(input$article, pv) |>\n      mutate(\n        date = ymd(date),\n        article = str_replace_all(article, \"_\", \" \")\n      ) |>\n      filter(date >= input$dates[1], date <= input$dates[2])\n  })\n\n  output$line <- renderPlot({\n    p <- ggplot(\n      subsetr(),\n      aes(date,\n        views,\n        colour = article\n      )\n    ) +\n      geom_line() +\n      scale_colour_manual(values = cols) +\n      geom_smooth(colour = cols[7]) +\n      facet_wrap(~article, nrow = 1, scales = input$scales) +\n      theme(\n        legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.margin = margin(1, 1, 1, 1, \"cm\")\n      ) +\n      labs(\n        x = NULL, y = NULL,\n        caption = \"\\nSource: Daily Wikipedia Article Page Views\"\n      )\n\n    switch(input$log10,\n      norm = p,\n      log10 = p + scale_y_log10(labels = label_number(scale_cut = cut_short_scale()))\n    )\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\nlibrary(gridlayout)\nlibrary(rvest)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(wesanderson)\n\nui <- grid_page(\n  # theme = bs_theme(version = 5, bootswatch = \"simplex\"),\n  layout = c(\n    \"header  header\",\n    \"sidebar line \"\n  ),\n  # row_sizes = c(\n  #   \"100px\",\n  #   \"1fr\"\n  # ),\n  # col_sizes = c(\n  #   \"250px\",\n  #   \"1fr\"\n  # ),\n  # gap_size = \"1rem\",\n  grid_card(\n    area = \"sidebar\",\n    item_alignment = \"top\",\n    title = \"Options\",\n    item_gap = \"13px\",\n    dateRangeInput(\"dates\",\n      label = \"Date range\",\n      start = \"2015-07-01\",\n      end = NULL\n    ),\n    selectizeInput(\n      inputId = \"article\",\n      label = \"Chart type\",\n      choices = charts,\n      selected = c(\n        \"Violin plot\",\n        \"Dendrogram\",\n        \"Histogram\",\n        \"Pie chart\"\n      ),\n      options = list(maxItems = 8),\n      multiple = TRUE\n    ),\n    selectInput(\n      inputId = \"scales\",\n      label = \"Fixed or free y-axis\",\n      choices = c(\"Fixed\" = \"fixed\", \"Free\" = \"free\"),\n      selected = \"fixed\"\n    ),\n    selectInput(\n      inputId = \"log10\",\n      label = \"Log 10 or normal y-axis\",\n      choices = c(\"Log 10\" = \"log10\", \"Normal\" = \"norm\"),\n      selected = \"log10\"\n    )\n  ),\n  grid_card_text(\n    area = \"header\",\n    content = \"   Plot Plotter   \",\n    alignment = \"center\",\n    is_title = FALSE#,\n    # icon = \"logo1.png\",\n    # img_height = 30\n  ),\n  grid_card_plot(area = \"line\")\n)\n\nserver <- \\(input, output, session) {\n  subsetr <- reactive({\n    req(input$article)\n    pageviews <- readRDS(\"pageviews\") |>\n      filter(date >= input$dates[1], date <= input$dates[2], article %in% input$article)\n  }) # |> \n    # list_rbind()\n\n  output$line <- renderPlot({\n    p <- ggplot(\n      subsetr(),\n      aes(date,\n        views,\n        colour = article\n      )\n    ) +\n      geom_line() +\n      scale_colour_manual(values = cols) +\n      geom_smooth(colour = cols[7]) +\n      facet_wrap(~article, nrow = 1, scales = input$scales) +\n      theme(\n        legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        plot.margin = margin(1, 1, 1, 1, \"cm\")\n      ) +\n      labs(\n        x = NULL, y = NULL,\n        caption = \"\\nSource: Daily Wikipedia Article Page Views\"\n      )\n\n    switch(input$log10,\n      norm = p,\n      log10 = p + scale_y_log10(\n        labels = label_number(scale_cut = cut_short_scale())\n      )\n    )\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver <- \\(input, output, session) {\n  data <- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot <- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x <- seq(from = -2, to = 2, length.out = 500)\n    y <- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd <- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui, server)\n```\n\n",
    "supporting": [
      "test_index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}