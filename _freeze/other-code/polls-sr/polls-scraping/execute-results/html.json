{
  "hash": "6d0093a47dd19d89273de3e1b490aa71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Scraping Sports Reference\"\nauthor: \"Andrew Weatherman\"\ndate: \"2024-05-13\"\ncategories: [college basketball, scraping, tutorial]\ndescription: \"...\"\ntoc: true\n---\n\n\nSports Reference is an *awesome* resource for historical data on any number of sports. The great thing about the site is that it's completely static, meaning scraping is pretty straightforward.\n\nThis post is going to cover a number of common scraping exercises on Sports Reference. It's important to see that, for nearly everything on the site, there exists a common structure for data. That is, you can *generally* just switch out the URL in most places. This page is more for introducing boilerplate functions for convenience.\n\n::: {.callout-warning}\n\nWhenever you're scraping a site, you should check out its terms of service to see if scraping is permitted, and if it is, the request limit.\n\n**Sports Reference limits users to 20 requests per minute.** If you exceed that number, you'll run into a HTTP 429 error (\"too many requests\") and your session will be \"locked\" for an hour.\n\nWe will use `Sys.sleep(3)`\n:::\n\nFor this template, you need the following packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(janitor)\n```\n:::\n\n\n## Scraping Polls\n\nSports Reference segments data by season, meaning that you need to loop over a vector of years to grab all data. For Associated Press polls (\"AP Poll\"), that data is found at the following link: `.../{men/women}/{season}-polls.html`. For the USA Today Coaches Poll, that is found at: `.../{men/women}/{season}-polls-coaches.html`.\n\nThe functions below are written to pull *men's* data. If you want women's polling data, simply change \"men\" to \"women\" in each URL.\n\n### AP Polls\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_ap_poll <- function(year) {\n  \n  url <- paste0('https://www.sports-reference.com/cbb/seasons/men/', year, '-polls.html')\n  \n  Sys.sleep(3)\n  \n  html <- read_html(url)\n  \n  # for current poll // past years will not have a 'current' poll so we need to catch that error\n  current_poll <- tryCatch({\n    html %>%\n      html_nodes(\"#current-poll\") %>%\n      html_table() %>% \n      pluck(1) %>% \n      clean_names() %>% \n      mutate(chng = as.numeric(chng),\n             year = year)\n  }, error = function(e) {NULL})\n    \n  # for season-long polls\n  all_polls <- html %>%\n    html_nodes(\"#ap-polls\") %>%\n    html_table() %>% \n    pluck(1) %>% \n    row_to_names(2) %>% \n    clean_names() %>% \n    rename_with(~paste0(\"week_\", seq_along(.)), starts_with(\"x\")) %>% # shift to week_X name format\n    mutate(across(-c(school, conf), as.numeric),\n           year = year)\n  \n  return(list(\"current\" = current_poll, \"all\" = all_polls))\n\n}\n```\n:::\n\n\n### Coaches Polls\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coaches_poll <- function(year) {\n  \n  url <- paste0('https://www.sports-reference.com/cbb/seasons/men/', year, '-polls-coaches.html')\n  \n  Sys.sleep(3)\n  \n  html <- read_html(url)\n  \n  # for current poll // past years will not have a 'current' poll so we need to catch that error\n  current_poll <- tryCatch({\n    html %>%\n      html_nodes(\"#current-poll\") %>%\n      html_table() %>% \n      pluck(1) %>% \n      clean_names() %>% \n      mutate(chng = as.numeric(chng),\n             year = year)\n  }, error = function(e) {NULL})\n    \n  # for season-long polls\n  all_polls <- html %>%\n    html_nodes(\"#coaches-polls\") %>%\n    html_table() %>% \n    pluck(1) %>% \n    row_to_names(2) %>% \n    clean_names() %>% \n    rename_with(~paste0(\"week_\", seq_along(.)), starts_with(\"x\")) %>% # shift to week_X name format\n    mutate(across(-c(school, conf), as.numeric),\n           year = year)\n  \n  return(list(\"current\" = current_poll, \"all\" = all_polls))\n\n}\n```\n:::\n\n\n## Scraping Leaderboards\n\nLeaderboards on Sports Reference are expandable sections that are hidden by default, and there are two ways to grab this data.\n\n### Program Leaders\n\nThis is the more straightforward structure. All program leaderboards use the `data_grid_box` class, which we can isolate with `html_nodes`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_html('https://www.sports-reference.com/cbb/schools/duke/men/leaders-and-records-season.html') %>% \n  html_nodes('.data_grid_box') %>% \n  html_table()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}