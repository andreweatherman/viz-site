{
  "hash": "6bf7cfb0df825b863173e9781fea1415",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ACC Wins in Decade Windows\"\nauthor: \"Andrew Weatherman\"\ndate: \"2024-04-23\"\ncategories: [gt, college basketball, scraping, tutorial]\ndescription: \"Two-column layout in `gt`\"\n---\n\n\n# The What\n\nIn early May 2024, JFreshHockey posted a visualization showing the top five regular season teams, by wins, in 10-season windows. ...\n\n...\n\n# The How\n\nFor this table, we will need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(glue)\nlibrary(janitor)\nlibrary(cbbdata)\nlibrary(slider)\n```\n:::\n\n\n## The Data\n\n### Grab The Data\n\nFor our visualization, we will be looking at ACC performance between inception (1954) and 2024. There are a few ways to pull this data using Sports Reference, but to keep things free, we will be scraping individual ACC pages and not using Stathead (paid).\n\nWe can grab conference record by-year with `rvest` by iterating through `https://www.sports-reference.com/cbb/conferences/acc/men/{YEAR}.html`. The data is stored in static tables, so a simple `html_table` function should do the trick here. \n\nUsing the [SelectorGadget tool](https://rvest.tidyverse.org/articles/selectorgadget.html), we can find the tag associated with the standings table on every page.\n\n<details>\n<summary>SelectorGadget</summary>\n\n::: {.cell}\n::: {.cell-output-display}\n![](selector-gadget.png){width=100%}\n:::\n:::\n\n</details>\n\nUsing a simple loop, we can grab per-season conference wins and losses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_results <- map_dfr(1954:2024, \\(year) {\n  Sys.sleep(3) # for 501 error\n\n  read_html(glue(\"https://www.sports-reference.com/cbb/conferences/acc/men/{year}.html\")) %>%\n    html_nodes(\"#standings\") %>% # target standings\n    html_table() %>% # get table\n    pluck(1) %>% # pluck from list\n    row_to_names(1) %>% # first row are col. names\n    clean_names() %>%\n    mutate(year = year,\n           across(w:l, as.numeric)) %>%\n    select(team = school, wins = w, losses = l, notes, year)\n}, .progress = 'Getting data')\n```\n:::\n\n\n### Calculate the Windows\n\nThere are a few ways to do this, but for our example, I'm going to write a separate function to loop over. This function takes a data frame and a starting year. It then filters between that starting year and ten years in the future (`between`) to grab 10-year \"windows.\" For each team, denoted with `.by` inside `summarize`, it calculates total wins, total losses, and win percentage (we only *need* total wins, but I decided to grab more data in case you want to plot something else).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalculate_windows <- function(start_year, data) {\n  data %>%\n    filter(between(year, start_year, start_year + 9)) %>% \n    summarize(\n      total_wins = sum(wins),\n      total_losses = sum(losses),\n      win_percentage = total_wins / (total_wins + total_losses),\n      .by = team\n    ) %>%\n    mutate(years = paste(start_year, start_year + 9, sep=\"-\"),\n           begin = start_year,\n           end = start_year + 9)\n}\n```\n:::\n\n\nWe can, again, use `purrr` to apply our iteration. We want to loop over the first year of the ACC's existence (`min(acc_results)$year`) and the last observed year **minus** nine (to capture the final \"complete\" window).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_windows <- map_dfr(min(acc_results$year):(max(acc_results$year) - 9),\n                       ~calculate_windows(.x, acc_results))\n```\n:::\n\n\nFinally, let's choose the five winningest teams over each window.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- acc_windows %>% \n  slice_max(total_wins, n = 5, by = years, with_ties = FALSE) %>% \n  group_by(years) %>% \n  arrange(desc(total_wins), desc(win_percentage), .by_group = TRUE) %>% \n  mutate(position = row_number()) %>% \n  ungroup()\n```\n:::\n\n\n### Prepare for plotting\n\n#### Conditional highlighting\n\nIn our table, we want to highlight each team who won an ACC conference championship during the window in question. \"Highlighting\" cells in `gt` is a bit weird because `tab_style` + `cell_fill` does not *really* work as one might expect.\n\nNamely, row and column vectors are not treated as separate pairs. If you pass through, e.g. `rows = c(1, 2)` and `columns = c(5, 6)` inside `tab_style`, you'll fill *four* cells, not two, because `tab_style` doesn't treat things as unique pairs.\n\nTurns out, you can just build the CSS string for highlighting cells *outside* of the table and apply it directly with `opt_css`.\n\nOkay, so how do we do that? First, let's extract tournament champions from the `acc_results` table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchampions <- acc_results %>% \n  filter(grepl(\"Conf.\", notes)) %>% # filter for champions \n  select(team, year)\n```\n:::\n\n\nNow, let's join that information over to `plot_table` by creating a new \"indicator\" column. We will use `any` to search through our `champions` table to find whether a match exists (i.e. a team won a conference championship during the begin-end window).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- plot_data %>% \n  rowwise() %>% \n  mutate(champ_win = any(champions$team == team & champions$year >= begin & champions$year <= end)) %>% \n  ungroup()\n```\n:::\n\n\nThen, let's pivot our data to a wide format and replace team names with logos. A nifty way to keep our `champ_win` data is to wrap our logos around an `img` tag *and* include an `alt` tag that refers to `champ_win`. This is a harmless way of keeping that data in our pivoted frame without adding more columns.\n\nWe can add team logos by creating a named vector using `cbd_logos` from `cbbdata`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogos <- cbd_teams() %>% select(team = sr_team, logo)\nlogos <- logos %>% pull(logo) %>% rlang::set_names(logos$team)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- plot_data %>% \n  mutate(team = glue(\"<img src='{logos[team]}' alt={champ_win} style='height:30px; vertical-align:middle;'>\")) %>% \n  pivot_wider(id_cols = begin:end, names_from = position, values_from = team)\n```\n:::\n\n\n####\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_gt <- function(x) {\n  gt(x) %>% \n    fmt_markdown(-c(begin:end))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntables <- gt_double_table(plot_data, my_gt, nrows = nrow(plot_data) / 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngt_two_column_layout(tables)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}