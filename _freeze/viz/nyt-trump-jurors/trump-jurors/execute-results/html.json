{
  "hash": "6c3a8ed11bcd274fcf458d090ae6e793",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Trump Juror News Sources\"\nauthor: \"Andrew Weatherman\"\ndate: \"2024-05-19\"\ncategories: [gt, new york times, tutorial]\ndescription: \"Creating non-traditional tables in `gt`\"\n---\n\n\n# The What\n\nOn April 19th, 2024, the New York Times published an article with a visualization that detailed from which \"outlets\" jurors in the \"Trump Hush-Money\" trial turn to for their news consumption. I thought it would be a fun exercise to recreate it using the [{gt} package](https://gt.rstudio.com).\n\nYou can use the toggles below to view the original table from the New York Times and our table using `gt`.\n\n<details>\n\n<summary>Original Table</summary>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](original_table.jpeg){width=100%}\n:::\n:::\n\n\n</details>\n\n<details>\n\n<summary>Our Table</summary>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](our_table.png){width=100%}\n:::\n:::\n\n\n</details>\n\n# The How\n\nFor this table, we will need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(data.table)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(glue)\n```\n:::\n\n\n## The Data\n\n### Grab the data\n\nTypically, I try my best to find and scrape the original data source. But unfortunately, perhaps for security reasons, I could not locate the [juror reponses to the screening questionnaire](https://www.nytimes.com/interactive/2024/04/16/nyregion/Trump-Jury-Questions.html). So instead, I hard coded the data as a .CSV.\n\nGrab the data with this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| juror| BBC| CNBC| CNN| The Daily Mail| Facebook| Fox News| Google| MSNBC| Reuters| The New York Post| The New York Times| NY1| TikTok| Truth Social| USA Today| The Wall Street Journal| The Washington Post| WNYC|  X|\n|-----:|---:|----:|---:|--------------:|--------:|--------:|------:|-----:|-------:|-----------------:|------------------:|---:|------:|------------:|---------:|-----------------------:|-------------------:|----:|--:|\n|     1|  NA|   NA|  NA|              1|       NA|        1|     NA|     1|      NA|                NA|                  1|  NA|     NA|           NA|        NA|                      NA|                  NA|   NA| NA|\n|     2|  NA|   NA|  NA|             NA|       NA|       NA|     NA|    NA|      NA|                NA|                 NA|  NA|     NA|            1|        NA|                      NA|                  NA|   NA|  1|\n|     3|  NA|   NA|  NA|             NA|       NA|       NA|      1|    NA|      NA|                NA|                  1|  NA|     NA|           NA|        NA|                       1|                  NA|   NA| NA|\n|     4|  NA|   NA|  NA|             NA|       NA|       NA|     NA|    NA|      NA|                NA|                 NA|  NA|     NA|           NA|        NA|                      NA|                  NA|   NA| NA|\n|     5|  NA|   NA|  NA|             NA|       NA|       NA|      1|    NA|      NA|                NA|                 NA|  NA|      1|           NA|        NA|                      NA|                  NA|   NA| NA|\n|     6|  NA|   NA|  NA|             NA|        1|       NA|      1|    NA|      NA|                NA|                  1|  NA|      1|           NA|        NA|                      NA|                  NA|   NA| NA|\n\n</div>\n:::\n:::\n\n\n### Manipulate the data\n\nFor exercise, I left us with a few required manipulations:\n\n#### 1) Transpose the data\n\nOur data file is in a wide format relative to publication, but our table requires the jurors to be the column names. There are a number of ways to essentially \"swap\" rows and columns, and we are going to use the `transpose` function from `data.table` and specify `keep.names` to retain our column headers. Our headers, actually, are located in the first row of our table, so we will use `row_to_names` from `janitor` to \"shift\" everything up one row. Finally, let's convert this back to a tibble and rename the first column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n  transpose(keep.names = \"news\") %>% \n  row_to_names(1) %>% \n  as_tibble() %>% \n  rename(\"source\" = \"juror\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|source         |  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 16| 17| 18|\n|:--------------|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|--:|\n|BBC            | NA| NA| NA| NA| NA| NA| NA|  1| NA| NA| NA| NA| NA| NA| NA|  1| NA| NA|\n|CNBC           | NA| NA| NA| NA| NA| NA| NA|  1| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA|\n|CNN            | NA| NA| NA| NA| NA| NA| NA| NA|  1| NA| NA|  1| NA| NA| NA| NA| NA| NA|\n|The Daily Mail |  1| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA|\n|Facebook       | NA| NA| NA| NA| NA|  1| NA| NA| NA| NA| NA| NA| NA| NA|  1| NA| NA| NA|\n|Fox News       |  1| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA| NA|\n\n</div>\n:::\n:::\n\n\n#### 2) Create the boxes\n\nThis is the \"trickiest\" part of the visualization. There are probably a multitude of ways to go about this, but to plot the boxes in each cell, I am using an inline block, with equal height and width.\n\nFirst, you will notice that the table labels each juror number in the first row, *but* it resets the \"counter\" after the 12th juror (13-18 are \"alternates\"). To handle this, we need to create a \"display number\" that that follows the same logic. Since our column headers are the juror numbers, we can simply refer to it using the `cur_column` function.\n\nNext, our values are `NA` if the juror *does not* utilize that news \"source,\" so we can set that color to a light grey and use a yellow when the cell is *not* `NA` (does use it).\n\nFinally, the \"trickiest\" part is to create an HTML string that builds the box. If you don't know HTML or CSS, that's okay, you can still follow along; the code is pretty intuitive.\n\n-   The \"inline block\" creates a small square with the height and width specified in the string.\n\n-   It is filled with the `background-color` referenced above.\n\n-   The shorthand `margin` property first sets the top and bottom margins *and then* the left and right margins. Having smaller left and right margins will make the boxes appear closer together.\n\n-   The text (and boxes) are then centered, set at a 12px font size, and bolded (which the original table *does not do*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n   mutate(across(-source, ~{\n     \n    display_number <- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) > 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color <- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"<span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'>{ifelse(!is.na(display_number), display_number, '')}</span>\")\n  }))\n```\n:::\n\n\n#### 3) Separator\n\nIn the original table, there is a small gap to separate the jurors from the alternates. We can mimic this same effect by creating a dummy column *after* our above mutations and then place it *after* the 13th column (the 12th and final juror).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% mutate(blank = '', .after = 13)\n```\n:::\n\n\n## The Table\n\nMost of our table can be created with stock `gt` functions, but we will need to add minimal CSS to top it off.\n\n#### 1) The Base Table\n\nThe \"base\" of our table will be created using `fmt_markdown` to render our HTML strings and `gt_theme_nytimes` to closely mirror the look of the original table. Importantly, we add an arbitrary \"id\" for later use with `opt_css`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  gt(id = \"table\") %>% \n  gt_theme_nytimes() %>% \n  fmt_markdown(-c(source, blank))\n```\n:::\n\n\n#### 2) Handling the Separator Column\n\nTo create the separation effect, we will need to relabel our column and adjust its width.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n... %>% \n  cols_label(blank = \"\") %>% \n  cols_width(blank ~ px(15))\n```\n:::\n\n\n#### 3) Column Labels\n\nThe original table does not have \"traditional\" column headers; instead, they appear to column *spanners*, which we can create with `tab_spanner`. To *really* drive home this effect, we're going to need some CSS at the end. But for now, let's add the column spanners, align them to the left, and make them a light grey.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n... %>% \n  tab_spanner(columns = 1, label = \"Source\") %>% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %>% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %>% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\"))\n```\n:::\n\n\n#### 4) Table Annotations + Options\n\nLet's add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn't do it by default), and compress our rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n... %>% \n  tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %>% \n  tab_source_note(md(\"Data and original table by New York Times<br>Recreation in R by @andreweatherman\")) %>% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12)\n```\n:::\n\n\n#### 5) Additional CSS\n\nTo make our column spanners look like headers -- creating the spanner-header effect in the original table -- we need some light css. When using `opt_css`, it is important to reference the same table id that you created in `gt(id = ...)`.\n\nThe first line hides the column headers and sets their position to \"relative,\" allowing our spanners to \"drop\" in their place.\n\nThe second line \"drops\" our spanners with `position: absolute`, makes them visible, and adds some minor padding. Our spanners are already aligned left, done in step three, but remember that our boxes have slight left-right margins, so by default, our spanners look misaligned. We can \"push\" them to the right with `padding-left: 3px`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n... %>% \n   opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )\n```\n:::\n\n\n## Complete Script\n\nThe complete code is below. There is a copy button for convenience in the top right of the code chunk.\n\n\n::: {.cell code-copy='true'}\n\n```{.r .cell-code}\ndata <- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\ntable <- data %>% \n  data.table::transpose(keep.names = \"news\") %>% \n  janitor::row_to_names(1) %>% \n  as_tibble() %>% \n  rename(\"source\" = \"juror\") %>% \n  mutate(across(-source, ~{\n     \n    display_number <- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) > 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color <- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"<span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'>{ifelse(!is.na(display_number), display_number, '')}</span>\")\n  }),\n  blank = '', .after = 13) %>% \n  gt(id = \"table\") %>% \n  gt_theme_nytimes() %>% \n  fmt_markdown(-c(source, blank)) %>% \n  cols_label(blank = \"\") %>% \n  cols_width(blank ~ px(15)) %>% \n  tab_spanner(columns = 1, label = \"Source\") %>% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %>% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %>% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\")) %>% \n    tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %>% \n  tab_source_note(md(\"Data and original table by New York Times<br>Recreation in R by @andreweatherman\")) %>% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12) %>% \n     opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )\n\n## saving the table\ngtsave_extra(table, \"trump_jurors_news.png\", zoom = 12)\n```\n:::\n",
    "supporting": [
      "trump-jurors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}