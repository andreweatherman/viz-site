{
  "hash": "956754e6e5a290cab8f890f4abf27aa6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Boxigami\"\nauthor: \"Andrew Weatherman\"\ndate: \"2024-05-09\"\ncategories: [gt, college basketball, cbbdata, tutorial]\ndescription: \"...\"\n---\n\n\n# The What\n\nIn late December 2023, Todd Whitehead tweeted a visualization that gave a creative spin on career distributions. I'm really digging the 2048-vibe and the 'Scorigami' potential.\n\n\n{{< tweet CrumpledJumper 1740251518840996135 >}}\n\n\n\nWhen I first wrote this code, I did it with Zach Edey and used `cbbdata`, and while I think that package is pretty intuitive, it has a glaring limitation: It only provides men's college basketball data. As such, this code is going to scrape Sports Reference, which will open the door for using women's college basketball data *and* professional data.\n\n<details>\n\n<summary>What we will be creating</summary>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](clark-scorigami.png){width=100%}\n:::\n:::\n\n\n</details>\n\nFor this visualization, we will need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\n```\n:::\n\n\n## The Data\n\nFirst, we need to scrape Clark's game logs at Iowa. This is a simple static HTML table and doesn't require any heavy lifting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclark_pts_ast <- read_html('https://www.sports-reference.com/cbb/players/caitlin-clark-1/gamelog/') %>% \n  html_table() %>% \n  pluck(1) %>% \n  select(year = Season, pts = PTS, ast = AST) %>% \n  mutate(year = parse_number(year) + 1,\n         across(pts:ast, as.numeric)) %>% \n  filter(!is.na(year))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| year| pts| ast|\n|----:|---:|---:|\n| 2021|  27|   4|\n| 2021|  30|  13|\n| 2021|  23|   5|\n| 2021|  34|   6|\n| 2021|  35|   4|\n| 2021|  13|  10|\n\n</div>\n:::\n:::\n\n\n\n### Binning our data\n\nWe need to set our \"bins\" for counting. This is something you should do manually for each player to ensure no counting overlap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbins <- tibble(\n  pts_bucket = c('<15', '15-19', '20-24', '25-29', '30+'),\n  ast_bucket = c('<4', '4-6', '7-9', '10-12', '13+')\n)\n```\n:::\n\n\nAfter we have our bins, we can use `expand.grid` to create all possible grid combinations for our 5x5 grid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbins_grid <- bins %>% expand.grid()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|pts_bucket |ast_bucket |\n|:----------|:----------|\n|<15        |<4         |\n|15-19      |<4         |\n|20-24      |<4         |\n|25-29      |<4         |\n|30+        |<4         |\n|<15        |4-6        |\n|15-19      |4-6        |\n|20-24      |4-6        |\n|25-29      |4-6        |\n|30+        |4-6        |\n|<15        |7-9        |\n|15-19      |7-9        |\n|20-24      |7-9        |\n|25-29      |7-9        |\n|30+        |7-9        |\n|<15        |10-12      |\n|15-19      |10-12      |\n|20-24      |10-12      |\n|25-29      |10-12      |\n|30+        |10-12      |\n|<15        |13+        |\n|15-19      |13+        |\n|20-24      |13+        |\n|25-29      |13+        |\n|30+        |13+        |\n\n</div>\n:::\n:::\n\n\nNow that we have our combinations, we can return to our scoring data to add the buckets using `case_when`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclark_pts_ast <- clark_pts_ast %>% \n  mutate(pts_bucket = case_when(\n    pts < 15 ~ '<15',\n    pts >= 15 & pts < 20 ~ '15-19',\n    pts >= 20 & pts < 25 ~ '20-24',\n    pts >= 25 & pts < 30 ~ '25-29',\n    pts >= 30 ~ '30+'\n  ),\n  ast_bucket = case_when(\n    ast < 4 ~ '<4',\n    ast >= 4 & ast < 7 ~ '4-6',\n    ast >= 7 & ast < 10 ~ '7-9',\n    ast >= 10 & ast < 13 ~ '10-12',\n    ast >= 13 ~ '13+'\n  ))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| year| pts| ast|pts_bucket |ast_bucket |\n|----:|---:|---:|:----------|:----------|\n| 2021|  27|   4|25-29      |4-6        |\n| 2021|  30|  13|30+        |13+        |\n| 2021|  23|   5|20-24      |4-6        |\n| 2021|  34|   6|30+        |4-6        |\n| 2021|  35|   4|30+        |4-6        |\n| 2021|  13|  10|<15        |10-12      |\n\n</div>\n:::\n:::\n\n\n### Final cleaning\n\nTruth told, the data processing for this visualization is very simple. So far, we scraped a static HTML table, defined five statistical \"bins,\" used `expand.grid` to create all 25 possible bin combinations, and applied those bins with `case_when`.\n\nFinally, we are going to use `count` to sum each bin. Importantly, if any bin is not present in our data, then it will be missing from our `count` (and thus from our graph). As a workaround, we can use `full_join` to add on any missing bin combination from `bins_grid`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- clark_pts_ast %>%\n  count(pts_bucket, ast_bucket) %>%\n  full_join(bins_grid, by = c('pts_bucket', 'ast_bucket')) %>%\n  mutate(pts_bucket = fct(pts_bucket, levels = c('<15', '15-19', '20-24', '25-29', '30+')),\n         ast_bucket = fct(ast_bucket, levels = c('<4', '4-6', '7-9', '10-12', '13+')),\n         n = replace_na(n, 0))\n```\n:::\n",
    "supporting": [
      "boxigami_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}