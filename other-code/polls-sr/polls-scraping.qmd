---
title: "Scraping Sports Reference"
author: "Andrew Weatherman"
date: "2024-05-13"
categories: [college basketball, scraping, tutorial]
description: "..."
toc: true
---

Sports Reference is an *awesome* resource for historical data on any number of sports. The great thing about the site is that it's completely static, meaning scraping is pretty straightforward.

This post is going to cover a number of common scraping exercises on Sports Reference. It's important to see that, for nearly everything on the site, there exists a common structure for data. That is, you can *generally* just switch out the URL in most places. This page is more for introducing boilerplate functions for convenience.

::: {.callout-warning}

Whenever you're scraping a site, you should check out its terms of service to see if scraping is permitted, and if it is, the request limit.

**Sports Reference limits users to 20 requests per minute.** If you exceed that number, you'll run into a HTTP 429 error ("too many requests") and your session will be "locked" for an hour.

We will use `Sys.sleep(3)`
:::

For this template, you need the following packages.

```{r}
library(tidyverse)
library(rvest)
library(janitor)
```

## Scraping Polls

Sports Reference segments data by season, meaning that you need to loop over a vector of years to grab all data. For Associated Press polls ("AP Poll"), that data is found at the following link: `.../{men/women}/{season}-polls.html`. For the USA Today Coaches Poll, that is found at: `.../{men/women}/{season}-polls-coaches.html`.

The functions below are written to pull *men's* data. If you want women's polling data, simply change "men" to "women" in each URL.

### AP Polls

```{r}
get_ap_poll <- function(year) {
  
  url <- paste0('https://www.sports-reference.com/cbb/seasons/men/', year, '-polls.html')
  
  Sys.sleep(3)
  
  html <- read_html(url)
  
  # for current poll // past years will not have a 'current' poll so we need to catch that error
  current_poll <- tryCatch({
    html %>%
      html_nodes("#current-poll") %>%
      html_table() %>% 
      pluck(1) %>% 
      clean_names() %>% 
      mutate(chng = as.numeric(chng),
             year = year)
  }, error = function(e) {NULL})
    
  # for season-long polls
  all_polls <- html %>%
    html_nodes("#ap-polls") %>%
    html_table() %>% 
    pluck(1) %>% 
    row_to_names(2) %>% 
    clean_names() %>% 
    rename_with(~paste0("week_", seq_along(.)), starts_with("x")) %>% # shift to week_X name format
    mutate(across(-c(school, conf), as.numeric),
           year = year)
  
  return(list("current" = current_poll, "all" = all_polls))

}
```

### Coaches Polls

```{r}
get_coaches_poll <- function(year) {
  
  url <- paste0('https://www.sports-reference.com/cbb/seasons/men/', year, '-polls-coaches.html')
  
  Sys.sleep(3)
  
  html <- read_html(url)
  
  # for current poll // past years will not have a 'current' poll so we need to catch that error
  current_poll <- tryCatch({
    html %>%
      html_nodes("#current-poll") %>%
      html_table() %>% 
      pluck(1) %>% 
      clean_names() %>% 
      mutate(chng = as.numeric(chng),
             year = year)
  }, error = function(e) {NULL})
    
  # for season-long polls
  all_polls <- html %>%
    html_nodes("#coaches-polls") %>%
    html_table() %>% 
    pluck(1) %>% 
    row_to_names(2) %>% 
    clean_names() %>% 
    rename_with(~paste0("week_", seq_along(.)), starts_with("x")) %>% # shift to week_X name format
    mutate(across(-c(school, conf), as.numeric),
           year = year)
  
  return(list("current" = current_poll, "all" = all_polls))

}
```

## Scraping Leaderboards

Leaderboards on Sports Reference are expandable sections that are hidden by default, and there are two ways to grab this data.

### Program Leaders

This is the more straightforward structure. All program leaderboards use the `data_grid_box` class, which we can isolate with `html_nodes`.

```{r}
read_html('https://www.sports-reference.com/cbb/schools/duke/men/leaders-and-records-season.html') %>% 
  html_nodes('.data_grid_box') %>% 
  html_table()
```


