---
title: "Favourite Things"
date: "2020-07-26"
categories: [R, web scraping]
description: "R packages & functions that make doing data science a joy based on usage across projects"
image: "feature-1.png"
---

![](feature-1.png)

Each [project](/project/) closes with a table summarising the R tools used. By visualising the most frequently used packages and functions I can get a sense of where I may most benefit from going deeper into the latest package versions.

It's an opportunity to replace superseded functions e.g. `spread` and `gather` with `pivot_wider` and `pivot_longer`. Or to use newer packages, such as [tidyclust](https://github.com/EmilHvitfeldt/tidyclust) which brings cluster modelling to tidymodels (used in the latest quarto version of [Finding Happiness in 'The Smoke'](https://www.quantumjitter.com/project/happiness/)), or [bslib](https://rstudio.github.io/bslib/) used in the latest shiny app embedded in [Plots Thicken](https://www.quantumjitter.com/project/thicken/).

```{r}
#| label: libraries

library(tidyverse)
library(tidytext)
library(rvest)
library(paletteer)
library(janitor)
library(glue)
library(ggwordcloud)
library(fpp3)
library(tidymodels)
library(patchwork)
```

```{r}
#| label: theme
#| fig-height: 2
#| dev.args: { bg: "transparent" }

theme_set(theme_bw())

n <- 4
palette <- "harrypotter::always"

cols <- paletteer_c(palette, n = n)

tibble(x = 1:n, y = 1) |>
  ggplot(aes(x, y, fill = fct_rev(cols))) +
  geom_col(colour = "white") +
  geom_label(aes(label = cols |> str_remove("FF$")), 
             size = 4, vjust = 2, fill = "white") +
  annotate(
    "label",
    x = (n + 1) / 2, y = 0.5,
    label = palette,
    fill = "white",
    alpha = 0.8,
    size = 6
  ) +
  scale_fill_manual(values = as.character(cols)) +
  theme_void() +
  theme(legend.position = "none")
```

I'll start by grabbing the url for all projects.

```{r}
#| label: urls

urls <- "https://www.quantumjitter.com/project/" |> 
  read_html() |> 
  html_elements(".quarto-grid-link") |> 
  html_attr("href") |> 
  as_tibble() |> 
  transmute(str_c("https://www.quantumjitter.com/", value)) |> 
  pull()
```

This enables me to extract the package and function usage table for each one.

```{r}
#| label: usage

table_df <- map_dfr(urls, function(x) {
  x |>
    read_html() |>
    html_elements("#r-toolbox , table") |>
    html_table()
}) |>
  clean_names(replace = c("io" = "")) |>
  select(package, functn) |>
  drop_na()
```

A little "spring cleaning" is needed, and separation of tidyverse and non-tidyverse packages.

-   [tidyverse](https://www.tidyverse.org/packages/)
-   [tidymodels](https://www.tidymodels.org/packages/)
-   [tidyverts](https://tidyverts.org)

```{r}
#| label: clean

tidy <-
  c(
    tidyverse_packages(),
    fpp3_packages(),
    tidymodels_packages()
  ) |>
  unique()

tidy_df <- table_df |>
  separate_rows(functn, sep = ";") |>
  separate(functn, c("functn", "count"), "\\Q[\\E") |>
  mutate(
    count = str_remove(count, "]") |> as.integer(),
    functn = str_squish(functn)
  ) |>
  count(package, functn, wt = count) |>
  mutate(multiverse = case_when(
    package %in% tidy ~ "tidy",
    package %in% c("base", "graphics") ~ "base",
    TRUE ~ "special"
  ))
```

Then I can summarise usage and prepare for a faceted plot.

```{r}
#| label: summarise

pack_df <- tidy_df |>
  count(package, multiverse, wt = n) |>
  mutate(name = "package")

fun_df <- tidy_df |>
  count(functn, multiverse, wt = n) |>
  mutate(name = "function")

n_url <- urls |> n_distinct()

packfun_df <- pack_df |>
  bind_rows(fun_df) |>
  group_by(name) |>
  arrange(desc(n)) |>
  mutate(
    packfun = coalesce(package, functn),
    name = fct_rev(name)
  )
```

Clearly dplyr reigns supreme driven by `mutate` and `filter`.

```{r}
#| label: plot
#| fig-height: 20

p1 <- packfun_df |>
  filter(name == "package") |> 
  ggplot(aes(fct_reorder(packfun, n), n, fill = multiverse)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  geom_label(aes(label = n), hjust = "inward", size = 2, fill = "white") +
  scale_fill_manual(values = cols[c(1, 2, 4)]) +
  labs(
    title = glue("Favourite Things\nAcross {n_url} Projects"),
    subtitle = "Package Usage",
    x = NULL, y = NULL
  )

min_n <- 7

p2 <- packfun_df |>
  filter(name == "function", n >= min_n) |> 
  ggplot(aes(fct_reorder(packfun, n), n, fill = multiverse)) +
  geom_col() +
  coord_flip() +
  geom_label(aes(label = n), hjust = "inward", size = 2, fill = "white") +
  scale_fill_manual(values = cols[c(1, 2, 4)]) +
  labs(x = NULL, y = NULL, 
       subtitle = glue("Function Usage >= {min_n}"))

p1 + p2
```

I'd also like a word cloud generated as the new featured image for this project.

```{r}
#| label: feature
#| fig-height: 4.83
#| fig-width: 9
#| fig-path: ""

set.seed = 123

packfun_df |>
  mutate(angle = 45 * sample(-2:2, n(), 
                             replace = TRUE, 
                             prob = c(1, 1, 4, 1, 1))) |>
  ggplot(aes(
    label = packfun,
    size = n,
    colour = multiverse,
    angle = angle
  )) +
  geom_text_wordcloud(
    eccentricity = 1,
    seed = 789
  ) +
  scale_size_area(max_size = 20) +
  scale_colour_manual(values = cols[c(2, 3, 4)]) +
  theme_void() +
  theme(plot.background = element_rect(fill = cols[1]))
```

## R Toolbox

A little bit circular, but I might as well include this code too in my "favourite things".

```{r}
#| label: toolbox
#| echo: false

pckg <- search() |> # Which packages are loaded?
  as_tibble() |>
  filter(str_detect(value, "package:"))

func <- pckg$value |> # What are their functions?
  map(possibly(ls, NA)) |>
  set_names(pckg$value) |>
  enframe("pckg", "func") |>
  unnest() |> 
  filter(func != "date")

reexp <- tribble(
  ~Package, ~func,
  "package:tibble", "as_tibble",
  "package:dplyr", "filter",
  "package:tibble", "tibble"
)

# Remove non-code
code_only <- tibble(line = "index.qmd" |>
  str_remove(".*post/") |> read_lines()) |>
  mutate(
    marker = if_else(str_detect(line, "^```"), 1, 0),
    marker = cumsum(marker),
    marker = if_else(marker %% 2 == 0, "comment", "code")
  ) |>
  filter(marker == "code", !str_starts(line, "library")) |>
  mutate(line = str_remove_all(line, "(?<=\")[[:alpha:]]+(?=\")"))

toolkit <- # Which functions are used in the code?
  map2_dfr(func$func, func$pckg, function(i, j) {
    tibble(
      Package = j,
      func = i,
      total = code_only |>
        str_count(str_c("[^$.-_]\\b\\Q", i, "\\E\\b(?=\\(|\\))")) |>
        sum()
    )
  }) |>
  filter(total > 0) |>
  arrange(Package, desc(total)) |>
  mutate(
    conflict = if_else(func %in% conflicts(), 1, 0), # Remove conflicts
    Function = str_c(func, "[", total, "]")
  ) |>
  arrange(desc(conflict), func) |> 
  filter(!(conflict == 1 & !str_c(Package, func) %in% str_c(reexp$Package, reexp$func))) |>
  group_by(Package) |>
  summarise(Function = str_c(Function, collapse = ";  ")) |>
  mutate(Package = str_remove(Package, "package:"))

toolkit
```
