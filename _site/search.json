[
  {
    "objectID": "blog/plunge/index.html",
    "href": "blog/plunge/index.html",
    "title": "Moving House",
    "section": "",
    "text": "After reading up on Blogdown, I decided to take the plunge and leave Wordpress for a quieter life in Blogdown."
  },
  {
    "objectID": "blog/plunge/index.html#motivation",
    "href": "blog/plunge/index.html#motivation",
    "title": "Moving House",
    "section": "Motivation",
    "text": "Motivation\nMy former site looked pretty good. But it was expensive to maintain.\nI was spending more than I wished to get a performant site. I could have spent less, and perhaps I’m easily seduced by “bells & whistles”, e.g. CloudFlare Plus and “GoGeek” hosting. But a non-speedy site is a bit of a turn-off.\nAnd it wasn’t just cost. It also took a lot of non-R effort to publish a post with Rmarkdown in the way I wanted. My main interest is in writing R code. Not wrestling Wordpress and multiple plugins into submission.\nA reboot was also a chance to re-brand. When I originally set up thinkr.biz I was initially unaware of a similarly-named site in France. Although my personal blog posed no threat across the Channel, and we co-existed for a few years, I anyway prefer having something a little more unique."
  },
  {
    "objectID": "blog/plunge/index.html#why-blogdown",
    "href": "blog/plunge/index.html#why-blogdown",
    "title": "Moving House",
    "section": "Why Blogdown?",
    "text": "Why Blogdown?\nI like Yihui Xie’s Blogdown primarily because it simplifies the path from Rmarkdown to blog. No more WWE-style detour. I can tweak a line of code in Rmarkdown, serve_site, and immediately see the updated blog locally. When I’m ready to publish, I just drag the public folder into Netlify, and voilà it’s live."
  },
  {
    "objectID": "blog/plunge/index.html#my-personal-roadmap",
    "href": "blog/plunge/index.html#my-personal-roadmap",
    "title": "Moving House",
    "section": "My personal roadmap",
    "text": "My personal roadmap\nThere are different routes one can take. Here’s mine.\n\nChoose a theme\nIn his book, Yihui advises asking yourself: “Do I like this fancy theme so much that I will definitely not change it in the next couple of years?” It’s very sound advice. Nonetheless, I’m easily seduced, so explored all possible fancy themes. In part because I like creating my own graphic art, so I wanted something that could help these little creations shine.\nOddly, I started by looking at one of Yihui’s recommended themes and discarded it, only to return to it again much later after an exhaustive exploration of other themes. There are many superficially nice Hugo themes. But when you actually play with them, there’s little below the surface and/or an absence of serious upkeep.\nHugo Academic is not the most appealing in the “shop window”. But when you take it for a test spin, and really take it through its paces, it offers a richness, flexibility and investment that reeled me in. After customising it to my taste, and paring back optional bits I do not need, simply by switching them off, it gave me something I feel very happy with.\n\n\nMigrate\nThere are assisted migration paths, e.g. from Wordpress, discussed in the Blogdown book. However I wanted to review and upgrade the R code in my original posts (only a dozen or so at the time). So, one-by-one, I copied each Rmd file into the projects folder of my new site, tweaked the code, and used serve_site to see the end product.\nI took this approach because R, especially the tidyverse and its ecosystem, is rapidly evolving. For example, the latest release of dplyr has some great new column-wise and row-wise functions. And spread and gather have been superseded by the more capable pivot_wider and pivot_longer. So it was a chance to upgrade my code.\nFor one or two of the more processing-intensive projects, I used either cache = TRUE in the code chunk, or saveRDS and readRDS to load data prepared earlier.\n\n\nBuild\nAn option I haven’t yet pursued is to host all my website source files in a GIT repository. Then Netlify could call Hugo to render my website automatically. Right now, my site content is simple enough to be able to use the Build Website button in RStudio.\nThe web-site is a static build, so it’s fast out-of-the-box, i.e. no need for speed-inducing wallet-slimming plugins.\n\n\nDeploy\nNetlify is recommended by bookdown.org. And it’s free for personal projects. The only small annual cost is my domain name.\nChoosing a domain name, which one can do via Netflify, is a little tricky. Many of the ideas one might have, have already occurred to someone else. And when you do find something available, there’s always that niggling feeling there may be something better out there.\nI chose Quantum Jitter for several reasons:\n\nI often use ggplot2’s geom_jitter\nLike a Quant, I have an interest in using machine learning to assess stock fundamentals\nLike the quantum world, my work features statistics and randomness\nIt was available\n\nAfter running the build in RStudio, which for my site only takes a few minutes, I can simply drag my newly-created public folder into Netlify’s Deploys page and bingo, the site’s live in a jiffy.\nSo, if you are toying with the idea of moving house, I can recommend a quieter life in Blogdown."
  },
  {
    "objectID": "blog/dark/index.html",
    "href": "blog/dark/index.html",
    "title": "Night Mode",
    "section": "",
    "text": "It was only last April that I renovated my blog as described in A Fresh Lick of Paint. Following the launch of a new open-source scientific and technical publishing system, it’s time to get the paint brush out again.\nI initially started to convert some of my projects and posts from Rmarkdown to qmd using format: hugo-md. The thought was to keep my existing site aesthetic, with its beautiful Hugo Apéro theme, unchanged. I found though that it wasn’t possible to make full use of the myriad features offered by Quarto. For example code-link: true and date-modified: last-modified. This is because the document metadata is preserved as-is for formats like Hugo.\nSo, I decided to start building a “full-on Quarto” version, i.e. format: html, with the intent of switching the website over only if I preferred the new versus the old when running the two side-by-side.\nI’ve switched over.\nI’ve given the site a unique look-and-feel by customising the flatly and darkly themes with a number of SASS variables in two theme.scss files, for example, to adopt my own reversible colour scheme.\nThe landing page switches image based on the dark-mode setting by making the class of the first image .dark-mode and adding these two lines in the dark theme’s custom scss file:\nThen the second image has the class .light-mode and uses the mirror css code in the light theme’s custom scss file:\nFor the navbar logo, my initial idea was to have a mid-grey logo which darkens and lightens by adjusting the brightness based on the mode:\nThis worked nicely for some browsers, e.g. firefox, but not others, e.g. safari; perhaps because the cache is cleared for some but not all. I’ve instead implemented a dark-mode logo using a background image in dark.scss1.\nAs for other features, not only does the site now have the code-link, date-modified, and dark-mode, but it also restores the grid-based listing pages given up when moving from Hugo Academic. Many other Quarto features such as call-outs, citations, footnotes and freeze are also now deployed.\nLua Filters are a powerful tool. The _quarto.yml file includes one to check my current installed version of Quarto and then insert that into the website’s page-footer2.\nWhilst refreshing the site, I took the opportunity to make my 404 page a little more welcoming as it seemed to be one of my more popular pages. Feel free to try it by visiting an imaginatively made-up page of your choice.\nThe updated repo is public on github."
  },
  {
    "objectID": "blog/dark/index.html#footnotes",
    "href": "blog/dark/index.html#footnotes",
    "title": "Night Mode",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAs suggested in Quarto Discussions↩︎\nSuggested solution in Stack Overflow↩︎"
  },
  {
    "objectID": "blog/tail/index.html",
    "href": "blog/tail/index.html",
    "title": "Painting Tails",
    "section": "",
    "text": "There are techniques for painting a region under a curve. But the experimental ggfx package offers an interesting alternative solution based on the blending modes familiar to users of Photoshop.\n\nlibrary(conflicted)\nlibrary(tidyverse)\nconflict_prefer_all(\"dplyr\", quiet = TRUE)\nconflict_prefer(\"as_date\", \"lubridate\")\nlibrary(scales)\nlibrary(ggfx)\nlibrary(patchwork)\nlibrary(wesanderson)\nlibrary(clock)\nlibrary(tidyquant)\n\n\ntheme_set(theme_bw())\n\n(cols &lt;- wes_palette(\"Royal1\"))\n\n\n\n\n\n\n\nThe advantage here is that the tail-painting aesthetic needs no information about the shape of the curve; only the limits on the x-axis.\nThe left plot shows the raw components without blending. The right plot is only retaining the red where there is a layer below.\n\np0 &lt;- tibble(outcome = rnorm(10000, 20, 2)) |&gt;\n  ggplot(aes(outcome)) +\n  scale_y_continuous(labels = label_percent())\n\np1 &lt;- p0 +\n  geom_density(adjust = 2, fill = cols[3]) +\n  annotate(\"rect\",\n    xmin = 15, xmax = 18, ymin = -Inf, ymax = Inf,\n    fill = cols[2]\n  ) + \n  labs(title = \"Without Blending\", y = \"Density\")\n\np2 &lt;- p0 +\n  as_reference(geom_density(adjust = 2, fill = cols[3]), id = \"density\") +\n  with_blend(annotate(\"rect\",\n    xmin = 15, xmax = 18, ymin = -Inf, ymax = Inf,\n    fill = cols[2]\n  ), bg_layer = \"density\", blend_type = \"atop\") + \n  labs(title = \"With Blending\", y = NULL)\n\np1 + p2\n\n\n\n\n\n\n\nOf course the red box could also be layered behind a density curve with alpha applied so it shows through. But if the preference is tail-only colouring, it’s a neat solution.\nBlending is actually a handy solution for any awkward shape. The same technique is used here with a time series ribbon summarising the median, lower and upper quartiles of a set of closing stock prices.\n\n\n\n\n\n\nNote\n\n\n\nTry this patch if having problems with tq_get\nThis chunk is using the development version of dplyr which introduces temporary grouping with .by.\n\n\n\ntickrs &lt;- c(\"AAPL\", \"NFLX\", \"TSLA\", \"ADBE\", \"META\", \"GOOG\", \"MSFT\")\n\np0 &lt;- tq_get(tickrs, get = \"stock.prices\", from = \"2022-01-01\") |&gt;\n  filter(!is.na(close)) |&gt; \n  reframe(\n    close = quantile(close, c(0.25, 0.5, 0.75)),\n    quantile = c(\"lower\", \"median\", \"upper\") |&gt; factor(),\n    .by = date\n  ) |&gt;\n  pivot_wider(names_from = quantile, values_from = close) |&gt;\n  ggplot(aes(date, median)) +\n  annotate(\"text\",\n    x = ymd(\"2022-03-16\"), y = 100,\n    label = \"Helpful\\nAnnotation\", colour = \"black\"\n  ) +\n  scale_y_continuous(limits = c(0, NA)) +\n  labs(x = NULL)\n\np1 &lt;- p0 +\n  geom_ribbon(aes(ymin = lower, ymax = upper), fill = cols[1]) +\n  geom_line(colour = cols[3]) +\n  annotate(\"rect\",\n    xmin = ymd(\"2022-03-01\"), xmax = ymd(\"2022-03-31\"),\n    ymin = -Inf, ymax = Inf, \n    fill = cols[4], colour = \"black\", linetype = \"dashed\"\n  ) + \n  labs(title = \"Without Blending\", y = \"Closing Price\")\n\np2 &lt;- p0 +\n  as_reference(geom_ribbon(aes(ymin = lower, ymax = upper), \n                           fill = cols[1]), id = \"ribbon\") +\n  with_blend(\n    annotate(\n      \"rect\",\n      xmin = ymd(\"2022-03-01\"), xmax = ymd(\"2022-03-31\"),\n      ymin = -Inf, ymax = Inf, \n      fill = cols[4], colour = \"black\", linetype = \"dashed\"\n      ),\n    bg_layer = \"ribbon\", blend_type = \"atop\"\n    ) +\n  geom_line(colour = cols[3]) + \n  labs(title = \"With Blending\", y = NULL)\n\np1 + p2 +\n  plot_annotation(title = \"Median Price Bounded by Upper & Lower Quartiles\")"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 quantumjitter Carl Goodwin\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "I live in Durham, North Carolina, and graduated from Duke University with a degree in public policy in 2023.\nAt Duke, I was a student manager for the men’s basketball team under head coaches Mike Krzyzewski and Jon Scheyer.\nI work in R for a living, but my passions extend far beyond the office. I am an active contributor to the open-source community, authoring both the cbbdata and cbbplotR packages.\nI am a firm believer in democratizing code and data. I hope that this site and its contents provide inspiration and learning."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Trump Juror News Sources Table\n\n\n9 min\n\n\n…\n\n\n\nApr 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/usedthese/index.html",
    "href": "blog/usedthese/index.html",
    "title": "Usedthese",
    "section": "",
    "text": "Who ordered that? You may be wondering."
  },
  {
    "objectID": "blog/usedthese/index.html#motivation",
    "href": "blog/usedthese/index.html#motivation",
    "title": "Usedthese",
    "section": "Motivation",
    "text": "Motivation\nUsedthese was born of a selfish desire to better understand my personal package & function usage. I find it makes it easier for me to check for consistency of usage, acknowledge the packages I most need to keep abreast of (or go deeper on), and spot opportunities for updates to the latest and greatest.\nIt started as a chunk of code that varied from project to project. Evolved into a common piece of code included in all projects. And finally, with the help and guidance of the R Packages (2e) book, has entered the hallowed halls of CRAN."
  },
  {
    "objectID": "blog/usedthese/index.html#example-use-case",
    "href": "blog/usedthese/index.html#example-use-case",
    "title": "Usedthese",
    "section": "Example Use Case",
    "text": "Example Use Case\nEach “little project” on this Quarto site focuses on a data science technique or machine learning model to analyse real-world data. At the foot of each of these is a quantified view of the R packages and functions used in the associated code. This is achieved by including used_here() in each Quarto document.\nused_there() scrapes all the tables created by used_here() to enable a Favourite Things article on how R packages and functions are used across the website.\nWhen the Tidyverse blog announced changes to dplyr and purrr a quick review of my Favourite Things identified a number of opportunities to try out the exciting new features. For example, dplyr introduced temporary grouping with the .by argument for mutate() and amigos. group_by() and ungroup() had been used many times and most of these occurrences could be replaced with the new more concise approach."
  },
  {
    "objectID": "blog/usedthese/index.html#conflicted",
    "href": "blog/usedthese/index.html#conflicted",
    "title": "Usedthese",
    "section": "Conflicted?",
    "text": "Conflicted?\nUsethese is designed to work in conjunction with the conflicted package. Whilst library() supports exclusion and include.only arguments, it can feel a little awkward when dealing with pre-loaded base packages or meta-packages such as the tidyverse, tidymodels and fpp3. Conflicted tells you when you try to use a function whose name is shared by two or more loaded packages. And it offers fine-grained conflict resolution based on your preferences."
  },
  {
    "objectID": "blog/usedthese/index.html#multi-site-usage-analysis",
    "href": "blog/usedthese/index.html#multi-site-usage-analysis",
    "title": "Usedthese",
    "section": "Multi-site Usage Analysis",
    "text": "Multi-site Usage Analysis\nI’m considering adding a function that would enable analysis of usage across multiple opted-in sites. If you do deploy usedthese within your Quarto website and would be willing to have the site included, then please raise an issue with your listing page as the title and select the “usedthese” label. The listing URL should link to one or more posts which include used_here() in the code."
  },
  {
    "objectID": "blog/renovate/index.html#motivation",
    "href": "blog/renovate/index.html#motivation",
    "title": "A Fresh Lick of Paint",
    "section": "Motivation",
    "text": "Motivation\nA couple of years ago I moved house from Wordpress to Blogdown. It’s proved to be a much less stressful life and I plan to stay. Hugo Academic served me well, but sometimes you just need a fresh coat of paint. I liked the look of Hugo Apéro.\nApéro feels simpler and has an elegant design with well-chosen themes and fonts.\nI like to add my own digital art to both the site and Rmarkdown projects, and Apéro gives me more flexibility here. GIF animations, for example, on my home page and in my project and blog lists just work.\nThe dark mode I had with Academic would be a nice-to-have, but not essential."
  },
  {
    "objectID": "blog/renovate/index.html#plan-of-attack",
    "href": "blog/renovate/index.html#plan-of-attack",
    "title": "A Fresh Lick of Paint",
    "section": "Plan of Attack",
    "text": "Plan of Attack\nThe upgrade approach I took was to create a brand new blogdown project in RStudio with the Apéro theme and then copy over and re-knit my projects one by one. This worked well because every project needed at least one change as a direct consequence of the move and re-opening each project also prompted other beneficial updates.\nI focused first on manual deployment, i.e. dragging the Public folder to Netlify, rather than going straight to continuous deployment via Github. Doing it this way would narrow the potential cause of any problems when doing the latter. I also initially deployed to one of Netlify’s auto-generated site names, so my live manually-deployed Academic blog remained unaffected whilst preparing the new site."
  },
  {
    "objectID": "blog/renovate/index.html#set-up",
    "href": "blog/renovate/index.html#set-up",
    "title": "A Fresh Lick of Paint",
    "section": "Set-up",
    "text": "Set-up\nThere’s a very helpful get started authored by the theme owner Alison Hill, so I’ll comment here only on the personal touches I wanted to add.\nIn Hugo Academic, each project’s (or post’s) feature image rendered automatically in both the project list page and in the individual project. In Apéro, I needed to add ![](pathname) to the Rmarkdown file to render the image in an individual project or post. I actually prefer this approach because it means the image then also appears when re-publishing to a blog aggregator which frustratingly was not the case with Academic.\nGiven the taxonomy differences, I created a static/_redirects file so that bookmarks for, say, category/r or tag/statistical-inference (under Academic) would go to categories/r or tags/statistical-inference.\n\n\n/index.xml                          /project/index-R.xml\n/categories/r/index.xml             /project/index-R.xml\n\n\nI had customised my Academic site to show the updated, as well as posted, date for each project and post. So to get the same in Apéro, I copied the themes &gt; hugo-apero &gt; layouts &gt; partials &gt; shared &gt; post-details.html file to layouts &gt; partials &gt; shared &gt; post-details.html, duplicated lines 2-5 below and changed .PublishDate to .Lastmod. As my YAML header for all projects and posts already included lastmod:, the details twistie at the foot of each project (and post) now shows both dates.\n&lt;details {{ .Scratch.Get \"details\" }} class=\"f6 fw7 input-reset\"&gt;\n  &lt;dl class=\"f6 lh-copy\"&gt;\n    &lt;dt class=\"fw7\"&gt;Posted:&lt;/dt&gt;\n    &lt;dd class=\"fw5 ml0\"&gt;{{ .PublishDate.Format \"January 2, 2006\" }}&lt;/dd&gt;\n  &lt;/dl&gt;\n  &lt;dl class=\"f6 lh-copy\"&gt;\n    &lt;dt class=\"fw7\"&gt;Updated:&lt;/dt&gt;\n    &lt;dd class=\"fw5 ml0\"&gt;{{ .Lastmod.Format \"January 2, 2006\" }}&lt;/dd&gt;\n  &lt;/dl&gt;\nI used a tag cloud in Academic and wanted to replicate this too. To do so, I also copied the themes &gt; hugo-apero &gt; layouts &gt; partials &gt; shared &gt; summary-li.html file to layouts &gt; partials &gt; shared and changed the last section to refer to tags rather than categories. I removed most of the other code to simplify the About page, so my customised summary-li.html contained only the code below. This change also required a tweak to the content &gt; about &gt; main &gt; index.md to replace number_categories: with a number_tags: parameter.\n&lt;section class=\"featured-content\"&gt;\n{{ $page := . }} &lt;!--save current page--&gt;\n\n{{ $number_tags := $page.Params.number_tags | default 0 }}\n{{ if ge $number_tags 1 }}\n  &lt;article{{ if .Params.show_outro }} class=\"bb pb5\"{{ end }}&gt;\n  &lt;h5 class=\"f4 mv4 ttu tracked lh-title bt pv3\"&gt;Themes&lt;/h5&gt;\n  {{ range first $number_tags site.Taxonomies.tags.ByCount }}\n      &lt;a class=\"f6 link dim ba ph3 pv2 mb2 dib mr2\" href=\"{{ .Page.RelPermalink }}\"&gt;{{ .Page.Title }} ({{ .Count }})&lt;/a&gt;\n  {{ end }}\n  &lt;/article&gt;\n{{ end }}\n&lt;/section&gt;\nFormspree is removing support for email-based forms, so my contact.md required a randomly-generated formspree_form_id: rather than an email address."
  },
  {
    "objectID": "blog/renovate/index.html#deployment",
    "href": "blog/renovate/index.html#deployment",
    "title": "A Fresh Lick of Paint",
    "section": "Deployment",
    "text": "Deployment\nManual\nInitially a few things did not render correctly, e.g. syntax highlighting, which it turned out required renaming the index.Rmd files to index.Rmarkdown. And when the manual deployment to Netlify got stuck uploading, I realised I also needed to change the .Rprofile to blogdown.method = 'markdown' rather than blogdown.method = 'html'.\nContinuous\nOnce the manual deployment to Netlify was working, I then moved on to continuous deployment via Github. I wanted to switch the commenting engine from Disqus to utterance.es and, as is often the case, wanting one thing results in the need for a bunch of other things; in this case, a public repo on Github. Installing the latter provides a more elegant fit with the Apéro design and has some nice advantages.\nAnd because I wanted to deploy a pre-existing RStudio project to Github, rather than following the usual Github-first practice, I found this guidance helpful.\nI played around a bit with the .gitignore file and found I could exclude quite a lot of stuff that Netlify would not need to do the Hugo build.\nThe Netlify deployment via Github did initially fail with a “Base directory does not exist” message. The fix there was to leave the base directory in Netlify’s build settings blank rather than using the repo URL (which it already had under current repository).\n\nThen finally I could flip my live site over to continuous deployment, pack away my paint pots, paint roller and step ladder, put my feet up in front of a roaring fire and bask in the warmth of my newly-renovated blogdown home.\nPost-deployment there was initially an issue with the RSS feed showing only the summary. Adding a layouts/_default/rss.xml file using the Hugo default with .Summary changed to .Content fixed that."
  },
  {
    "objectID": "blog/nyt-trump-jurors/trump-jurors.html",
    "href": "blog/nyt-trump-jurors/trump-jurors.html",
    "title": "Trump Juror News Sources Table",
    "section": "",
    "text": "On April 19th, 2024, the New York Times published an article with a visualization that detailed from which “outlets” jurors in the “Trump Hush-Money” trial turn to for their news consumption. I thought it would be a fun exercise to recreate it using the {gt} package.\nYou can use the toggles below to view the original table from the New York Times and our table using gt.\nFor this table, we will need:\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(glue)"
  },
  {
    "objectID": "blog/nyt-trump-jurors/trump-jurors.html#the-data",
    "href": "blog/nyt-trump-jurors/trump-jurors.html#the-data",
    "title": "Trump Juror News Sources Table",
    "section": "The Data",
    "text": "The Data\nGrab the data\nTypically, I try my best to find and scrape the original data source. But unfortunately, perhaps for security reasons, I could not locate the juror reponses to the screening questionnaire. So instead, I hard coded the data as a .CSV.\nGrab the data with this:\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\n\nExpand to see data\n\n\nRows: 18\nColumns: 20\n$ juror                     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…\n$ BBC                       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, N…\n$ CNBC                      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, N…\n$ CNN                       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, 1…\n$ `The Daily Mail`          &lt;dbl&gt; 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Facebook                  &lt;dbl&gt; NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, N…\n$ `Fox News`                &lt;dbl&gt; 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Google                    &lt;dbl&gt; NA, NA, 1, NA, 1, 1, NA, NA, NA, NA, 1, NA, …\n$ MSNBC                     &lt;dbl&gt; 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Reuters                   &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `The New York Post`       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, N…\n$ `The New York Times`      &lt;dbl&gt; 1, NA, 1, NA, NA, 1, 1, 1, 1, 1, NA, 1, 1, N…\n$ NY1                       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ TikTok                    &lt;dbl&gt; NA, NA, NA, NA, 1, 1, NA, NA, NA, NA, NA, NA…\n$ `Truth Social`            &lt;dbl&gt; NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `USA Today`               &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `The Wall Street Journal` &lt;dbl&gt; NA, NA, 1, NA, NA, NA, 1, 1, NA, NA, NA, NA,…\n$ `The Washington Post`     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, N…\n$ WNYC                      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, N…\n$ X                         &lt;dbl&gt; NA, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nManipulate the data\nFor exercise, I left us with a few required manipulations:\n1) Transpose the data\nOur data file is in a wide format relative to publication, but our table requires the jurors to be the column names. There are a number of ways to essentially “swap” rows and columns, and we are going to use the transpose function from data.table and specify keep.names to retain our column headers. Our headers, actually, are located in the first row of our table, so we will use row_to_names from janitor to “shift” everything up one row. Finally, let’s convert this back to a tibble and rename the first column.\n\ndata &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\")\n\n2) Create the boxes\nThis is the “trickiest” part of the visualization. There are probably a multitude of ways to go about this, but to plot the boxes in each cell, I am using an inline block, with equal height and width.\nFirst, you will notice that the table labels each juror number in the first row, but it resets the “counter” after the 12th juror (13-18 are “alternates”). To handle this, we need to create a “display number” that that follows the same logic. Since our column headers are the juror numbers, we can simply refer to it using the cur_column function.\nNext, our values are NA if the juror does not utilize that news “source,” so we can set that color to a light grey and use a yellow when the cell is not NA (does use it).\nFinally, the “trickiest” part is to create an HTML string that builds the box. If you don’t know HTML or CSS, that’s okay, you can still follow along; the code is pretty intuitive.\n\nThe “inline block” creates a small square with the height and width specified in the string.\nIt is filled with the background-color referenced above.\nThe shorthand margin property first sets the top and bottom margins and then the left and right margins. Having smaller left and right margins will make the boxes appear closer together.\nThe text (and boxes) are then centered, set at a 12px font size, and bolded (which the original table does not do).\n\n\ndata &lt;- data %&gt;% \n   mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }))\n\n3) Separator\nIn the original table, there is a small gap to separate the jurors from the alternates. We can mimic this same effect by creating a dummy column after our above mutations and then place it after the 13th column (the 12th and final juror).\n\ndata &lt;- data %&gt;% mutate(blank = '', .after = 13)"
  },
  {
    "objectID": "blog/nyt-trump-jurors/trump-jurors.html#the-table",
    "href": "blog/nyt-trump-jurors/trump-jurors.html#the-table",
    "title": "Trump Juror News Sources Table",
    "section": "The Table",
    "text": "The Table\nMost of our table can be created with stock gt functions, but we will need to add minimal CSS to top it off.\n1) The Base Table\nThe “base” of our table will be created using fmt_markdown to render our HTML strings and gt_theme_nytimes to closely mirror the look of the original table. Importantly, we add an arbitrary “id” for later use with opt_css.\n\ndata %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank))\n\n2) Handling the Separator Column\nTo create the separation effect, we will need to relabel our column and adjust its width.\n\n... %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15))\n\n3) Column Labels\nThe original table does not have “traditional” column headers; instead, they appear to column spanners, which we can create with tab_spanner. To really drive home this effect, we’re going to need some CSS at the end. But for now, let’s add the column spanners, align them to the left, and make them a light grey.\n\n... %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\"))\n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;% \n  tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12)\n\n5) Additional CSS\nTo make our column spanners look like headers – creating the spanner-header effect in the original table – we need some light css. When using opt_css, it is important to reference the same table id that you created in gt(id = ...).\nThe first line hides the column headers and sets their position to “relative,” allowing our spanners to “drop” in their place.\nThe second line “drops” our spanners with position: absolute, makes them visible, and adds some minor padding. Our spanners are already aligned left, done in step three, but remember that our boxes have slight left-right margins, so by default, our spanners look misaligned. We can “push” them to the right with padding-left: 3px.\n\n... %&gt;% \n   opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )"
  },
  {
    "objectID": "blog/nyt-trump-jurors/trump-jurors.html#complete-script",
    "href": "blog/nyt-trump-jurors/trump-jurors.html#complete-script",
    "title": "Trump Juror News Sources Table",
    "section": "Complete Script",
    "text": "Complete Script\nThe complete code is below. There is a copy button for convenience in the top right of the code chunk.\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\ntable &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\") %&gt;% \n  mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }),\n  blank = '', .after = 13) %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank)) %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15)) %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\")) %&gt;% \n    tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12) %&gt;% \n     opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )\n\n## saving the table\ngtsave_extra(table, \"trump_jurors_news.png\", zoom = 12)"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html",
    "href": "viz/nyt-trump-jurors/trump-jurors.html",
    "title": "Trump Juror News Sources",
    "section": "",
    "text": "On April 19th, 2024, the New York Times published an article with a visualization that detailed from which “outlets” jurors in the “Trump Hush-Money” trial turn to for their news consumption. I thought it would be a fun exercise to recreate it using the {gt} package.\nYou can use the toggles below to view the original table from the New York Times and our table using gt.\n\nOriginal Table\n\n\n\n\n\n\n\n\n\nOur Table"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#the-data",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#the-data",
    "title": "Trump Juror News Sources",
    "section": "The Data",
    "text": "The Data\nGrab the data\nTypically, I try my best to find and scrape the original data source. But unfortunately, perhaps for security reasons, I could not locate the juror reponses to the screening questionnaire. So instead, I hard coded the data as a .CSV.\nGrab the data with this:\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\n\nExpand to see data\nManipulate the data\nFor exercise, I left us with a few required manipulations:\n1) Transpose the data\nOur data file is in a wide format relative to publication, but our table requires the jurors to be the column names. There are a number of ways to essentially “swap” rows and columns, and we are going to use the transpose function from data.table and specify keep.names to retain our column headers. Our headers, actually, are located in the first row of our table, so we will use row_to_names from janitor to “shift” everything up one row. Finally, let’s convert this back to a tibble and rename the first column.\n\ndata &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\")\n\n2) Create the boxes\nThis is the “trickiest” part of the visualization. There are probably a multitude of ways to go about this, but to plot the boxes in each cell, I am using an inline block, with equal height and width.\nFirst, you will notice that the table labels each juror number in the first row, but it resets the “counter” after the 12th juror (13-18 are “alternates”). To handle this, we need to create a “display number” that that follows the same logic. Since our column headers are the juror numbers, we can simply refer to it using the cur_column function.\nNext, our values are NA if the juror does not utilize that news “source,” so we can set that color to a light grey and use a yellow when the cell is not NA (does use it).\nFinally, the “trickiest” part is to create an HTML string that builds the box. If you don’t know HTML or CSS, that’s okay, you can still follow along; the code is pretty intuitive.\n\nThe “inline block” creates a small square with the height and width specified in the string.\nIt is filled with the background-color referenced above.\nThe shorthand margin property first sets the top and bottom margins and then the left and right margins. Having smaller left and right margins will make the boxes appear closer together.\nThe text (and boxes) are then centered, set at a 12px font size, and bolded (which the original table does not do).\n\n\ndata &lt;- data %&gt;% \n   mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }))\n\n3) Separator\nIn the original table, there is a small gap to separate the jurors from the alternates. We can mimic this same effect by creating a dummy column after our above mutations and then place it after the 13th column (the 12th and final juror).\n\ndata &lt;- data %&gt;% mutate(blank = '', .after = 13)"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#the-table",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#the-table",
    "title": "Trump Juror News Sources",
    "section": "The Table",
    "text": "The Table\nMost of our table can be created with stock gt functions, but we will need to add minimal CSS to top it off.\n1) The Base Table\nThe “base” of our table will be created using fmt_markdown to render our HTML strings and gt_theme_nytimes to closely mirror the look of the original table. Importantly, we add an arbitrary “id” for later use with opt_css.\n\ndata %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank))\n\n2) Handling the Separator Column\nTo create the separation effect, we will need to relabel our column and adjust its width.\n\n... %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15))\n\n3) Column Labels\nThe original table does not have “traditional” column headers; instead, they appear to column spanners, which we can create with tab_spanner. To really drive home this effect, we’re going to need some CSS at the end. But for now, let’s add the column spanners, align them to the left, and make them a light grey.\n\n... %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\"))\n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;% \n  tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12)\n\n5) Additional CSS\nTo make our column spanners look like headers – creating the spanner-header effect in the original table – we need some light css. When using opt_css, it is important to reference the same table id that you created in gt(id = ...).\nThe first line hides the column headers and sets their position to “relative,” allowing our spanners to “drop” in their place.\nThe second line “drops” our spanners with position: absolute, makes them visible, and adds some minor padding. Our spanners are already aligned left, done in step three, but remember that our boxes have slight left-right margins, so by default, our spanners look misaligned. We can “push” them to the right with padding-left: 3px.\n\n... %&gt;% \n   opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#complete-script",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#complete-script",
    "title": "Trump Juror News Sources",
    "section": "Complete Script",
    "text": "Complete Script\nThe complete code is below. There is a copy button for convenience in the top right of the code chunk.\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\ntable &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\") %&gt;% \n  mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }),\n  blank = '', .after = 13) %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank)) %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15)) %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\")) %&gt;% \n    tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12) %&gt;% \n     opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )\n\n## saving the table\ngtsave_extra(table, \"trump_jurors_news.png\", zoom = 12)"
  },
  {
    "objectID": "viz/index.html",
    "href": "viz/index.html",
    "title": "Visualization Gallery",
    "section": "",
    "text": "Best Road Performance\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\nscraping\n\n\n\n…\n\n\n\nApr 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTeam Game Performance\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\ntutorial\n\n\n\n…\n\n\n\nApr 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNew Coaches vs. KenPom\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\nscraping\n\n\ntutorial\n\n\n\nUsing custom functions in gt\n\n\n\nApr 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTrump Juror News Sources\n\n\n\ngt\n\n\nnew york times\n\n\ntutorial\n\n\n\nCreating non-traditional tables in gt\n\n\n\nApr 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html",
    "href": "viz/best-new-coaches/new-coaches.html",
    "title": "New Coaches vs. KenPom",
    "section": "",
    "text": "We will be making a table that plots preseason vs. final KenPom rating improvements for new head coaches.\n\n\n\n\n\n\nWarning\n\n\n\nTo build this table, you will need an active KenPom subscription and a cbbdata account. Follow these steps to link your KenPom account to cbbdata.\n\n\n\nFinal Table"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#the-data",
    "href": "viz/best-new-coaches/new-coaches.html#the-data",
    "title": "New Coaches vs. KenPom",
    "section": "The Data",
    "text": "The Data\nGrab The Data\nCoaching Changes\nThe first thing that we will need is a list of coaching changes by season. There are a few different places from which to grab this, but the most straightforward way is the ‘Coaching Changes’ page at barttorvik.\nThe data is presented in a static HTML table by year, so we will write a function with rvest and use purrr to loop over needed seasons (2012-2024).\n\n\n\n\n\n\nNote\n\n\n\nFor some reason, the Barttorvik site blocks requests originating from Windows devices. To get around this, we will use withr and set a custom user-agent.\n\n\n\nget_coaching_changes &lt;- function(year) {\n  \n  suppressWarnings({\n    withr::local_options(HTTPUserAgent='Not Windows')\n    read_html(glue(\"https://barttorvik.com/coaching_moves.php?year={year}\")) %&gt;% \n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(year = year) %&gt;% \n      select(team, year, new_coach)\n  })\n  \n}\n\nNow that we have our scraping function, let’s loop over it with map_dfr.\n\nall_changes &lt;- map_dfr(2012:2024, \\(year) get_coaching_changes(year))\n\nKenPom Ratings\nNext, we need preseason and year-end KenPom ratings, which is possible with the cbd_kenpom_ratings_archive function from cbbdata. Specifying adj_em[which.min(date)] will grab the KenPom rating associated with the first observed date (preseason) for each team and year, etc.\n\narchive &lt;- cbd_kenpom_ratings_archive() %&gt;% \n  filter(year &gt;= 2008) %&gt;% \n  summarize(\n    start_em = adj_em[which.min(date)],\n    end_em = adj_em[which.max(date)],\n    final_rank = adj_em_rk[which.max(date)],\n    .by = c(team, year)\n  ) %&gt;% \n  mutate(diff = end_em - start_em)\n\nSeason Record\nFor some added flair, let’s include team records too.\n\nteam_records &lt;- cbd_torvik_game_box() %&gt;%\n  summarize(\n    record = glue(\"{sum(result == 'W')}-{sum(result == 'L')}\"),\n    .by = c(team, year)\n  )\n\nCombine\nFinally, let’s combine our data and calculate the rating difference. All join functions in dplyr only work with two data frames. However, we can place everything inside of a list and use reduce.\n\ndata &lt;- list(all_changes, archive, team_records) %&gt;% \n  reduce(left_join, by = c(\"team\", \"year\"))\n\nWe’re only going to plot the 10 bets rating jumps.\n\ndata &lt;- data %&gt;% slice_max(diff, n = 10)\n\nPostseason Outcome\nThe final thing that we are going to include is a column on whether or not a team made the postseason (NCAA, NIT, CBI, etc.). The easiest way to do this is to scrape Sports Reference – which is why we’re adding this after we have combined our data and grabbed the 10 largest jumps.\nPostseason information can be found on a team’s schedule page for a given season. We can use cbd_teams to grab the needed team slugs.\n\nsr_ids &lt;- cbd_teams() %&gt;% select(team = common_team, sr_link)\ngrab_schedules &lt;- function(team, year) {\n  \n  Sys.sleep(3) # sleep for 501\n  \n  id &lt;- filter(sr_ids, team == !!team)$sr_link\n  slug &lt;- str_extract(id, \"(?&lt;=/schools/)[^/]+(?=/men)\") # regex to extract slug\n  url &lt;- glue(\"https://www.sports-reference.com/cbb/schools/{slug}/men/{year}-schedule.html\")\n  \n  read_html(url) %&gt;% \n    html_nodes(\"#schedule\") %&gt;% \n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    clean_names() %&gt;% \n    slice_tail(n = 1) %&gt;% \n    select(\"type\") %&gt;% \n    mutate(team = team, year = year)\n  \n}\n\nUse purrr to iterate over all teams and combine the data back\n\npostseason &lt;- map2_dfr(data$team, data$year, \\(team, year) grab_schedules(team, year))\n\ndata &lt;- left_join(data, postseason, by = c('team', 'year')) %&gt;% \n  mutate(type = ifelse(type == \"CTOURN\", \"---\", type))"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#the-table",
    "href": "viz/best-new-coaches/new-coaches.html#the-table",
    "title": "New Coaches vs. KenPom",
    "section": "The Table",
    "text": "The Table\n…\nStack Function\nTo make things cleaner, here is a function that will plot team logos and stack some additional text to the right using HTML.\n\ngt_cbb_stack &lt;- function(data, upper_text1, upper_text2, lower_text1, lower_text2, lower_text3, logo) {\n\n  data %&gt;%\n    mutate(stack = glue(\n        \"&lt;div style='display: flex; align-items: center;'&gt;\n           &lt;img src='{eval(expr({{logo}}))}' style='height: auto; width: 20px; padding-right: 5px;'&gt;\n           &lt;div&gt;\n             &lt;div style='line-height:14px;'&gt;&lt;span style='font-weight:bold;color:black;font-size:14px'&gt;{eval(expr({{upper_text1}}))}, {eval(expr({{upper_text2}}))}&lt;/span&gt;&lt;/div&gt;\n             &lt;div style='line-height:10px;'&gt;&lt;span style='font-weight:plain;color:grey;font-size:10px'&gt;{eval(expr({{lower_text1}}))} --  #{eval(expr({{lower_text2}}))}, {eval(expr({{lower_text3}}))}&lt;/span&gt;&lt;/div&gt;\n           &lt;/div&gt;\n         &lt;/div&gt;\"\n      )\n    )\n}\n\nTo use this, we need to add a column with team logo links. Then, let’s apply it.\n\ndata &lt;- data %&gt;% left_join(cbd_teams() %&gt;% select(team = common_team, espn_nickname, logo))\n\ndata &lt;- data %&gt;% gt_cbb_stack(new_coach, year, espn_nickname, final_rank, record, logo)\n\nColumn Header + Subheader Function\nIn late January, Todd Whitehead (Synergy) posted a table with cool column headers + subheaders. I really liked this design, which pairs very well with stacked cells, so I created a function to mimic this effect in gt. We’ll use it in our table too.\nThis function does a few things, but most notably, it creates an HTML string for the “stacked” effect, parses it using htmltools, and then sets it as the header using cols_label.\n\ngt_column_subheaders &lt;- function(gt_table, ...) {\n\n  subheaders &lt;- list(...)\n  all_col_names &lt;- colnames(gt_table[['_data']])\n\n  for (col_name in all_col_names) {\n\n    subtitle_info &lt;- subheaders[[col_name]] %||% list(subtitle = \"&nbsp;\", heading = col_name)\n    subtitle &lt;- subtitle_info$subtitle\n    new_header_title &lt;- subtitle_info$heading\n\nlabel_html &lt;- htmltools::HTML(glue(\n  \"&lt;div style='line-height: 1.05; margin-bottom: -2px;'&gt;\n    &lt;span style='font-size: 14px; font-weight: bold; color: black;'&gt;{new_header_title}&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span style='font-size: 10px; font-weight: normal; color: #808080;'&gt;{subtitle}&lt;/span&gt;\n  &lt;/div&gt;\"\n))\n\n    gt_table &lt;- gt_table %&gt;% \n      cols_label(!!sym(col_name) := label_html)\n  }\n  \n  gt_table\n}\n\n1) The Base Table\nHonestly, the code below outputs a pretty nice table, but there is definitely some room for improvement.\n\ndata %&gt;% \n  select(stack, type, start_em, end_em, diff) %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(stack) %&gt;% \n  cols_move_to_start(stack) %&gt;% \n  cols_align(columns = stack, 'left') %&gt;% \n  cols_align(columns = -stack, 'center')\n\n2) Applying Custom Column Function\nLet’s apply our custom gt_column_subheaders function. To relabel a column, you need to pass a list with heading and subheading.\n\n... %&gt;%\n  gt_column_subheaders(stack = list(heading = \"Coach and Year\",\n                                    subtitle = \"Team, Final Rank, and Record\"),\n                       type = list(heading = 'Post SZN',\n                                    subtitle = \"Tournament\"),\n                       start_em = list(heading = 'Pre',\n                                    subtitle = \"Rating\"),\n                       end_em = list(heading = 'End',\n                                    subtitle = \"Rating\"),\n                       diff = list(heading = 'Jump',\n                                    subtitle = \"End - Start\"))\n\n3) Table Borders\nTo give our table some more clarity and definition, we will add some borders around our cells.\n\n... %&gt;%\n  tab_style(locations = cells_body(columns = c(type, ends_with(\"em\"))), style = cell_borders()) %&gt;% \n  tab_style(locations = cells_body(columns = -ends_with(\"em\")), style = cell_borders(sides = \"bottom\")) %&gt;% \n  tab_style(locations = cells_body(rows = 1), style = cell_borders(sides = \"top\", weight = px(2))) %&gt;% \n  tab_style(locations = cells_body(columns = diff), style = cell_text(weight = 'bold')) \n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;%\n  tab_options(data_row.padding = 3.5,\n              source_notes.border.bottom.style = \"solid\",\n              source_notes.border.bottom.color = \"white\",\n              source_notes.font.size = 10) %&gt;% \n  tab_header(title = \"New coaches beating KenPom expectations\",\n             subtitle = md(\"The largest pre-season vs. year-end KenPom rating improvements&lt;br&gt;by new head coaches since 2012\")) %&gt;% \n  tab_source_note(md(\"Data by cbbdata + Sports Reference&lt;br&gt;Viz. + Analysis by @andreweatherman\"))\n\n5) Additional CSS\nFinally, let’s throw in some minor CSS changes. When using opt_css, it is important to reference the same table id that you created in gt(id = …).\nThe first two lines adjust the padding between the title and subtitles – “squishing” them together.\nThe third line targets the bottom border of the table. It creates the same effect as the tab_style that targeted the first row (black border at 2px weight).\n\n... %&gt;%\n    opt_css(\n    \"\n    #table .gt_heading {\n      padding-top: 6px;\n      padding-bottom: 0px;\n    }\n    #table .gt_subtitle {\n      padding-top: 2px;\n      padding-bottom: 6px;\n    }\n    #table tbody tr:last-child {\n    border-bottom: 2px solid #000000;\n    }\n    \"\n  )"
  },
  {
    "objectID": "r-resources/index.html",
    "href": "r-resources/index.html",
    "title": "R Resources",
    "section": "",
    "text": "Tutorials/E-Books\n\n\n\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen\n\nA detailed introduction to ggplot2 and its syntax/grammar. An excellent starting point to better understand the package as a beginner.\n\n\n\nR Graphics Cookbook, 2nd edition by Winston Chang\n\nIncludes more than 150 code snippets for basic ggplot2 examples.\n\n\n\nData Visualization: A Practical Introduction by Kieran Healy\n\nTeaches the principles of effective data visualization, a brief introduction to ggplot2, and includes a nice focus on creating maps in R."
  },
  {
    "objectID": "r-resources/index.html#resources",
    "href": "r-resources/index.html#resources",
    "title": "R Resources",
    "section": "",
    "text": "Resources for ggplot2"
  },
  {
    "objectID": "r-resources/index.html#e-books",
    "href": "r-resources/index.html#e-books",
    "title": "R Resources",
    "section": "",
    "text": "ggplot2: Elegant Graphics for Data Analysis by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen\n\nA detailed introduction to ggplot2 and its syntax/grammar. An excellent starting point to better understand the package as a beginner.\n\n\n\nR Graphics Cookbook, 2nd edition by Winston Chang\n\nIncludes more than 150 code snippets for basic ggplot2 examples.\n\n\n\nData Visualization: A Practical Introduction by Kieran Healy\n\nTeaches the principles of effective data visualization, a brief introduction to ggplot2, and includes a nice focus on creating maps in R."
  },
  {
    "objectID": "viz/game-performance/game-performance.html",
    "href": "viz/game-performance/game-performance.html",
    "title": "Team Game Performance",
    "section": "",
    "text": "We will be creating a neat game performance table, highlighting team-wide four factors on a game-by-game basis.\n…"
  },
  {
    "objectID": "viz/game-performance/game-performance.html#the-data",
    "href": "viz/game-performance/game-performance.html#the-data",
    "title": "Team Game Performance",
    "section": "The Data",
    "text": "The Data\nGrab The Data\n…"
  },
  {
    "objectID": "viz/road-performance/road-performance.html",
    "href": "viz/road-performance/road-performance.html",
    "title": "Best Road Performance",
    "section": "",
    "text": "A gt table that calculates the 10 best T-Rank efficiency ratings in true D-1 vs. D-1 road performances – also includes a composite season-long predictive average across all games and quadrant records in true road games.\n\nFinal Table"
  },
  {
    "objectID": "viz/road-performance/road-performance.html#scripts",
    "href": "viz/road-performance/road-performance.html#scripts",
    "title": "Best Road Performance",
    "section": "Scripts",
    "text": "Scripts\nThis visualization is not yet accompanied by a tutorial.\nThe Data\n\n## grab ratings in away games vs. top 150\naway_ratings &lt;- cbd_torvik_team_factors(year = 2024, venue = 'away')\n\n## get best away win by highest T-Rank\nbest_win &lt;- cbd_torvik_game_factors(year = 2024, location = 'A') %&gt;%\n  filter(result == 'W') %&gt;% \n  left_join(cbd_torvik_ratings(year=2024) %&gt;% select(team, barthag), join_by('opp' == 'team')) %&gt;% \n  left_join(cbd_teams() %&gt;% select(opp = common_team, opp_logo = logo)) %&gt;% \n  slice_max(barthag, n = 1, by = team) %&gt;% \n  select(team, opp_logo)\n\n## get quad records in away games\nquad_records &lt;- cbd_torvik_team_schedule(year = 2024, location = 'A') %&gt;% \n  filter(date &lt; Sys.Date()) %&gt;% \n  cbd_add_net_quad() %&gt;% \n  # join on results\n  left_join(cbd_torvik_game_box(year = 2024) %&gt;% select(date, team, opp, result),\n            by = c('date', 'team', 'opp')) %&gt;% \n  summarize(\n    record = paste0(sum(result == 'W'), '-', sum(result == 'L')),\n    .by = c(team, quad)\n  ) %&gt;% \n  # pivot wider so we get proper joining + plotting format\n  pivot_wider(names_from = quad, values_from = record) %&gt;% \n  # replace NAs (quads with no games) as 0-0\n  mutate(across(-team, ~ifelse(.x == 'NA-NA' | is.na(.x), '0-0', .x))) %&gt;% \n  # rename // could do this later in gt\n  select(team, q1 = `Quadrant 1`, q2 = `Quadrant 2`, q3 = `Quadrant 3`, q4 = `Quadrant 4`)\n\n# get predictive metric average\npred_avg &lt;- cbd_all_metrics() %&gt;% \n  summarize(\n    avg = (trank_rank + kp_rank + bpi_rank + net_rank) / 4,\n    .by = team\n  )\n\n## join together\ndata &lt;- list(away_ratings, quad_records, best_win, pred_avg) %&gt;% \n  # use reduce to quickly join multiple DFs (passed as list) w/ a common key (team)\n  reduce(left_join, by = 'team') %&gt;% \n  # take highest barthags\n  slice_max(barthag, n = 10) %&gt;%\n  # add logos\n  left_join(cbd_teams() %&gt;% select(team = common_team, logo = logo)) %&gt;% \n  mutate(team = glue(\"&lt;img src='{logo}' style='height: 20px; width: auto; vertical-align: -25%;'&gt;&nbsp; {team}\")) %&gt;% \n  # add record column // add record to logo col.\n  mutate(record = paste0(wins, '-', losses),\n         team = paste0(team, ' (', record, ')'),\n         avg = paste0('#', round(avg, 0))) %&gt;% \n  # select columns to plot\n  select(avg, team, adj_o, adj_d, barthag, starts_with('q'), best = opp_logo)\n\nThe Table\n\n# make table\ndata %&gt;% \n  # set table id so we can use css later\n  gt(id = 'table') %&gt;% \n  # add theme as a base\n  gt_theme_nytimes() %&gt;% \n  # render logos\n  fmt_markdown(team) %&gt;% \n  # render best win logo\n  fmt_image(best, width = 20, height = 20) %&gt;% \n  # round numbers\n  fmt_number(columns = adj_o:adj_d, decimals = 1) %&gt;% \n  fmt_percent(columns = barthag, decimals = 1) %&gt;% \n  # align cols\n  cols_align(columns = avg, 'right') %&gt;% \n  cols_align(columns = -c(team, avg), 'center') %&gt;% \n  # bold barthag\n  tab_style(locations = cells_body(columns = barthag), style = cell_text(weight = 'bold')) %&gt;% \n  # add spanner for quad\n  tab_spanner(columns = q1:q4, label = 'Quadrant Records') %&gt;% \n  # add spanner for t-rank\n  tab_spanner(columns = adj_o:barthag, label = 'Road Efficiency') %&gt;% \n  # add dividers\n  gt_add_divider(team, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(barthag, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(q4, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  # add footnote for best win\n  tab_footnote(locations = cells_column_labels(columns = best),\n               footnote = 'Highest current opponent T-Rank in a road win') %&gt;% \n  # add footnote for T-Rank\n  tab_footnote(locations = cells_column_labels(columns = barthag),\n               footnote = 'T-Rank Rating: WP% vs. average team on neutral floor based on road performance') %&gt;%\n  # add footnote for pred average\n  tab_footnote(locations = cells_column_labels(columns = avg),\n               footnote = 'Predictive Average: KenPom, T-Rank, BPI, and NET (rounded to nearest integer)') %&gt;% \n  # rename cols.\n  cols_label(\n    team = 'Team (record)',\n    adj_o = 'Adj. O',\n    adj_d = 'Adj. D',\n    barthag = 'T-Rank',\n    best = 'Best'\n  ) %&gt;% \n  # add stripping b/c why not and it looks good\n  opt_row_striping() %&gt;% \n  tab_options(data_row.padding = 4,\n              footnotes.font.size = 11,\n              # do this so we have the light lines below column spanners!\n              column_labels.border.bottom.style = \"solid\",\n              column_labels.border.bottom.width = px(1), \n              column_labels.border.bottom.color = \"black\",\n              table.border.bottom.style = 'none',\n              source_notes.font.size = 10,\n              source_notes.border.lr.style = \"none\") %&gt;% \n  # add headers // labs\n  tab_header(\n    title = 'Who are the best road teams in college basketball?',\n    subtitle = \"10 highest T-Rank ratings in true road performances (D-1 vs. D-1)\"\n  ) %&gt;% \n  tab_source_note(\n    md(\"Data by cbbdata + cbbplotR through 2023-24&lt;br&gt;Table + Analysis by @andreweatherman\")\n  ) %&gt;% \n  # css // this does some light other formatting and styling\n  opt_css(\n    '#table .gt_footnote {\n        padding-top: 2px !important;\n        padding-bottom: 2px !important;\n        line-height: 1;\n      }\n    #table .gt_heading {\n         padding-bottom: 0px;\n         padding-top: 6px\n        }\n      #table .gt_subtitle {\n         padding-top: 2px;\n         padding-bottom: 6px;\n      }\n      #table .gt_sourcenote {\n         text-align: right\n        }\n    '\n  ) %&gt;% \n  # save it!\n  gtsave_extra('best_road_teams.png', zoom = 3)"
  },
  {
    "objectID": "viz/road-performance/road-performance.html#complete-script",
    "href": "viz/road-performance/road-performance.html#complete-script",
    "title": "Best Road Performance",
    "section": "Complete Script",
    "text": "Complete Script\n\nlibrary(cbbdata)\nlibrary(cbbplotR)\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\naway_ratings &lt;- cbd_torvik_team_factors(year = 2024, venue = 'away')\n\nbest_win &lt;- cbd_torvik_game_factors(year = 2024, location = 'A') %&gt;%\n  filter(result == 'W') %&gt;% \n  left_join(cbd_torvik_ratings(year=2024) %&gt;% select(team, barthag), join_by('opp' == 'team')) %&gt;% \n  left_join(cbd_teams() %&gt;% select(opp = common_team, opp_logo = logo)) %&gt;% \n  slice_max(barthag, n = 1, by = team) %&gt;% \n  select(team, opp_logo)\n\nquad_records &lt;- cbd_torvik_team_schedule(year = 2024, location = 'A') %&gt;% \n  filter(date &lt; Sys.Date()) %&gt;% \n  cbd_add_net_quad() %&gt;% \n  left_join(cbd_torvik_game_box(year = 2024) %&gt;% select(date, team, opp, result),\n            by = c('date', 'team', 'opp')) %&gt;% \n  summarize(\n    record = paste0(sum(result == 'W'), '-', sum(result == 'L')),\n    .by = c(team, quad)\n  ) %&gt;% \n  pivot_wider(names_from = quad, values_from = record) %&gt;% \n  mutate(across(-team, ~ifelse(.x == 'NA-NA' | is.na(.x), '0-0', .x))) %&gt;% \n  select(team, q1 = `Quadrant 1`, q2 = `Quadrant 2`, q3 = `Quadrant 3`, q4 = `Quadrant 4`)\n\npred_avg &lt;- cbd_all_metrics() %&gt;% \n  summarize(\n    avg = (trank_rank + kp_rank + bpi_rank + net_rank) / 4,\n    .by = team\n  )\n\ndata &lt;- list(away_ratings, quad_records, best_win, pred_avg) %&gt;% \n  reduce(left_join, by = 'team') %&gt;% \n  slice_max(barthag, n = 10) %&gt;%\n  left_join(cbd_teams() %&gt;% select(team = common_team, logo = logo)) %&gt;% \n  mutate(team = glue(\"&lt;img src='{logo}' style='height: 20px; width: auto; vertical-align: -25%;'&gt;&nbsp; {team}\")) %&gt;% \n  mutate(record = paste0(wins, '-', losses),\n         team = paste0(team, ' (', record, ')'),\n         avg = paste0('#', round(avg, 0))) %&gt;% \n  select(avg, team, adj_o, adj_d, barthag, starts_with('q'), best = opp_logo)\n\ndata %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(team) %&gt;% \n  fmt_image(best, width = 20, height = 20) %&gt;% \n  fmt_number(columns = adj_o:adj_d, decimals = 1) %&gt;% \n  fmt_percent(columns = barthag, decimals = 1) %&gt;% \n  cols_align(columns = avg, 'right') %&gt;% \n  cols_align(columns = -c(team, avg), 'center') %&gt;% \n  tab_style(locations = cells_body(columns = barthag), style = cell_text(weight = 'bold')) %&gt;% \n  tab_spanner(columns = q1:q4, label = 'Quadrant Records') %&gt;% \n  tab_spanner(columns = adj_o:barthag, label = 'Road Efficiency') %&gt;% \n  gt_add_divider(team, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(barthag, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(q4, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;%\n  tab_footnote(locations = cells_column_labels(columns = best),\n               footnote = 'Highest current opponent T-Rank in a road win') %&gt;% \n  tab_footnote(locations = cells_column_labels(columns = barthag),\n               footnote = 'T-Rank Rating: WP% vs. average team on neutral floor based on road performance') %&gt;%\n  tab_footnote(locations = cells_column_labels(columns = avg),\n               footnote = 'Predictive Average: KenPom, T-Rank, BPI, and NET (rounded to nearest integer)') %&gt;% \n  cols_label(\n    team = 'Team (record)',\n    adj_o = 'Adj. O',\n    adj_d = 'Adj. D',\n    barthag = 'T-Rank',\n    best = 'Best'\n  ) %&gt;% \n  opt_row_striping() %&gt;% \n  tab_options(data_row.padding = 4,\n              footnotes.font.size = 11,\n              column_labels.border.bottom.style = \"solid\",\n              column_labels.border.bottom.width = px(1), \n              column_labels.border.bottom.color = \"black\",\n              table.border.bottom.style = 'none',\n              source_notes.font.size = 10,\n              source_notes.border.lr.style = \"none\") %&gt;% \n  tab_header(\n    title = 'Who are the best road teams in college basketball?',\n    subtitle = \"10 highest T-Rank ratings in true road performances (D-1 vs. D-1)\"\n  ) %&gt;% \n  tab_source_note(\n    md(\"Data by cbbdata + cbbplotR through 2023-24&lt;br&gt;Table + Analysis by @andreweatherman\")\n  ) %&gt;% \n  opt_css(\n    '#table .gt_footnote {\n        padding-top: 2px !important;\n        padding-bottom: 2px !important;\n        line-height: 1;\n      }\n    #table .gt_heading {\n         padding-bottom: 0px;\n         padding-top: 6px\n        }\n      #table .gt_subtitle {\n         padding-top: 2px;\n         padding-bottom: 6px;\n      }\n      #table .gt_sourcenote {\n         text-align: right\n        }\n    '\n  ) %&gt;% \n  gtsave_extra('best_road_teams.png', zoom = 5)"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#complete-script",
    "href": "viz/best-new-coaches/new-coaches.html#complete-script",
    "title": "New Coaches vs. KenPom",
    "section": "Complete Script",
    "text": "Complete Script\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(cbbdata)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(glue)\nlibrary(janitor)\n\n## functions ===\n\nget_coaching_changes &lt;- function(year) {\n  \n  suppressWarnings({\n    withr::local_options(HTTPUserAgent='Not Windows')\n    read_html(glue(\"https://barttorvik.com/coaching_moves.php?year={year}\")) %&gt;% \n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(year = year) %&gt;% \n      select(team, year, new_coach)\n  })\n  \n}\n\ngrab_schedules &lt;- function(team, year) {\n  \n  Sys.sleep(3) # sleep for 501\n  \n  id &lt;- filter(sr_ids, team == !!team)$sr_link\n  slug &lt;- str_extract(id, \"(?&lt;=/schools/)[^/]+(?=/men)\") # regex to extract slug\n  url &lt;- glue(\"https://www.sports-reference.com/cbb/schools/{slug}/men/{year}-schedule.html\")\n  \n  read_html(url) %&gt;% \n    html_nodes(\"#schedule\") %&gt;% \n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    clean_names() %&gt;% \n    slice_tail(n = 1) %&gt;% \n    select(\"type\") %&gt;% \n    mutate(team = team, year = year)\n  \n}\n\ngt_cbb_stack &lt;- function(data, upper_text1, upper_text2, lower_text1, lower_text2, lower_text3, logo) {\n\n  data %&gt;%\n    mutate(stack = glue(\n        \"&lt;div style='display: flex; align-items: center;'&gt;\n           &lt;img src='{eval(expr({{logo}}))}' style='height: auto; width: 20px; padding-right: 5px;'&gt;\n           &lt;div&gt;\n             &lt;div style='line-height:14px;'&gt;&lt;span style='font-weight:bold;color:black;font-size:14px'&gt;{eval(expr({{upper_text1}}))}, {eval(expr({{upper_text2}}))}&lt;/span&gt;&lt;/div&gt;\n             &lt;div style='line-height:10px;'&gt;&lt;span style='font-weight:plain;color:grey;font-size:10px'&gt;{eval(expr({{lower_text1}}))} --  #{eval(expr({{lower_text2}}))}, {eval(expr({{lower_text3}}))}&lt;/span&gt;&lt;/div&gt;\n           &lt;/div&gt;\n         &lt;/div&gt;\"\n      )\n    )\n}\n\ngt_column_subheaders &lt;- function(gt_table, ...) {\n\n  subheaders &lt;- list(...)\n  all_col_names &lt;- colnames(gt_table[['_data']])\n\n  for (col_name in all_col_names) {\n\n    subtitle_info &lt;- subheaders[[col_name]] %||% list(subtitle = \"&nbsp;\", heading = col_name)\n    subtitle &lt;- subtitle_info$subtitle\n    new_header_title &lt;- subtitle_info$heading\n\nlabel_html &lt;- htmltools::HTML(glue(\n  \"&lt;div style='line-height: 1.05; margin-bottom: -2px;'&gt;\n    &lt;span style='font-size: 14px; font-weight: bold; color: black;'&gt;{new_header_title}&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span style='font-size: 10px; font-weight: normal; color: #808080;'&gt;{subtitle}&lt;/span&gt;\n  &lt;/div&gt;\"\n))\n\n    gt_table &lt;- gt_table %&gt;% \n      cols_label(!!sym(col_name) := label_html)\n  }\n  \n  gt_table\n}\n\n## code ===\n\nall_changes &lt;- map_dfr(2012:2024, \\(year) get_coaching_changes(year))\n\narchive &lt;- cbd_kenpom_ratings_archive() %&gt;% \n  filter(year &gt;= 2008) %&gt;% \n  summarize(\n    start_em = adj_em[which.min(date)],\n    end_em = adj_em[which.max(date)],\n    final_rank = adj_em_rk[which.max(date)],\n    .by = c(team, year)\n  ) %&gt;% \n  mutate(diff = end_em - start_em)\n\nteam_records &lt;- cbd_torvik_game_box() %&gt;%\n  summarize(\n    record = glue(\"{sum(result == 'W')}-{sum(result == 'L')}\"),\n    .by = c(team, year)\n  )\n\ndata &lt;- list(all_changes, archive, team_records) %&gt;% \n  reduce(left_join, by = c(\"team\", \"year\")) %&gt;% \n  slice_max(diff, n = 10)\n\nsr_ids &lt;- cbd_teams() %&gt;% select(team = common_team, sr_link)\n\npostseason &lt;- map2_dfr(data$team, data$year, \\(team, year) grab_schedules(team, year))\n\ndata &lt;- left_join(data, postseason, by = c('team', 'year')) %&gt;% \n  mutate(type = ifelse(type == \"CTOURN\", \"---\", type)) %&gt;% \n  left_join(cbd_teams() %&gt;% select(team = common_team, espn_nickname, logo)) %&gt;% \n  gt_cbb_stack(new_coach, year, espn_nickname, final_rank, record, logo)\n\n## table ===\n\ntable &lt;- data %&gt;% \n  select(stack, type, start_em, end_em, diff) %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(stack) %&gt;% \n  cols_move_to_start(stack) %&gt;% \n  cols_align(columns = stack, 'left') %&gt;% \n  cols_align(columns = -stack, 'center') %&gt;% \n  gt_column_subheaders(stack = list(heading = \"Coach and Year\",\n                                  subtitle = \"Team, Final Rank, and Record\"),\n                     type = list(heading = 'Post SZN',\n                                  subtitle = \"Tournament\"),\n                     start_em = list(heading = 'Pre',\n                                  subtitle = \"Rating\"),\n                     end_em = list(heading = 'End',\n                                  subtitle = \"Rating\"),\n                     diff = list(heading = 'Jump',\n                                  subtitle = \"End - Start\")) %&gt;% \n  tab_style(locations = cells_body(columns = c(type, ends_with(\"em\"))), style = cell_borders()) %&gt;% \n  tab_style(locations = cells_body(columns = -ends_with(\"em\")), style = cell_borders(sides = \"bottom\")) %&gt;% \n  tab_style(locations = cells_body(rows = 1), style = cell_borders(sides = \"top\", weight = px(2))) %&gt;% \n  tab_style(locations = cells_body(columns = diff), style = cell_text(weight = 'bold')) %&gt;% \n  tab_options(data_row.padding = 3.5,\n              source_notes.border.bottom.style = \"solid\",\n              source_notes.border.bottom.color = \"white\",\n              source_notes.font.size = 10) %&gt;% \n  tab_header(title = \"New coaches beating KenPom expectations\",\n             subtitle = md(\"The largest pre-season vs. year-end KenPom rating improvements&lt;br&gt;by new head coaches since 2012\")) %&gt;% \n  tab_source_note(md(\"Data by cbbdata + Sports Reference&lt;br&gt;Viz. + Analysis by @andreweatherman\")) %&gt;% \n  opt_css(\n    \"\n    #table .gt_heading {\n      padding-top: 6px;\n      padding-bottom: 0px;\n    }\n    #table .gt_subtitle {\n      padding-top: 2px;\n      padding-bottom: 6px;\n    }\n    #table tbody tr:last-child {\n    border-bottom: 2px solid #000000;\n    }\n    \"\n  )\n\n## save ===\n\ngtsave_extra(table, \"final_table.png\", zoom = 5)"
  }
]