[
  {
    "objectID": "viz/road-performance/road-performance.html",
    "href": "viz/road-performance/road-performance.html",
    "title": "Best Road Performance",
    "section": "",
    "text": "A gt table that calculates the 10 best T-Rank efficiency ratings in true D-1 vs. D-1 road performances – also includes a composite season-long predictive average across all games and quadrant records in true road games.\n\nFinal Table"
  },
  {
    "objectID": "viz/road-performance/road-performance.html#scripts",
    "href": "viz/road-performance/road-performance.html#scripts",
    "title": "Best Road Performance",
    "section": "Scripts",
    "text": "Scripts\nThis visualization is not yet accompanied by a tutorial.\nThe Data\n\n## grab ratings in away games vs. top 150\naway_ratings &lt;- cbd_torvik_team_factors(year = 2024, venue = 'away')\n\n## get best away win by highest T-Rank\nbest_win &lt;- cbd_torvik_game_factors(year = 2024, location = 'A') %&gt;%\n  filter(result == 'W') %&gt;% \n  left_join(cbd_torvik_ratings(year=2024) %&gt;% select(team, barthag), join_by('opp' == 'team')) %&gt;% \n  left_join(cbd_teams() %&gt;% select(opp = common_team, opp_logo = logo)) %&gt;% \n  slice_max(barthag, n = 1, by = team) %&gt;% \n  select(team, opp_logo)\n\n## get quad records in away games\nquad_records &lt;- cbd_torvik_team_schedule(year = 2024, location = 'A') %&gt;% \n  filter(date &lt; Sys.Date()) %&gt;% \n  cbd_add_net_quad() %&gt;% \n  # join on results\n  left_join(cbd_torvik_game_box(year = 2024) %&gt;% select(date, team, opp, result),\n            by = c('date', 'team', 'opp')) %&gt;% \n  summarize(\n    record = paste0(sum(result == 'W'), '-', sum(result == 'L')),\n    .by = c(team, quad)\n  ) %&gt;% \n  # pivot wider so we get proper joining + plotting format\n  pivot_wider(names_from = quad, values_from = record) %&gt;% \n  # replace NAs (quads with no games) as 0-0\n  mutate(across(-team, ~ifelse(.x == 'NA-NA' | is.na(.x), '0-0', .x))) %&gt;% \n  # rename // could do this later in gt\n  select(team, q1 = `Quadrant 1`, q2 = `Quadrant 2`, q3 = `Quadrant 3`, q4 = `Quadrant 4`)\n\n# get predictive metric average\npred_avg &lt;- cbd_all_metrics() %&gt;% \n  summarize(\n    avg = (trank_rank + kp_rank + bpi_rank + net_rank) / 4,\n    .by = team\n  )\n\n## join together\ndata &lt;- list(away_ratings, quad_records, best_win, pred_avg) %&gt;% \n  # use reduce to quickly join multiple DFs (passed as list) w/ a common key (team)\n  reduce(left_join, by = 'team') %&gt;% \n  # take highest barthags\n  slice_max(barthag, n = 10) %&gt;%\n  # add logos\n  left_join(cbd_teams() %&gt;% select(team = common_team, logo = logo)) %&gt;% \n  mutate(team = glue(\"&lt;img src='{logo}' style='height: 20px; width: auto; vertical-align: -25%;'&gt;&nbsp; {team}\")) %&gt;% \n  # add record column // add record to logo col.\n  mutate(record = paste0(wins, '-', losses),\n         team = paste0(team, ' (', record, ')'),\n         avg = paste0('#', round(avg, 0))) %&gt;% \n  # select columns to plot\n  select(avg, team, adj_o, adj_d, barthag, starts_with('q'), best = opp_logo)\n\nThe Table\n\n# make table\ndata %&gt;% \n  # set table id so we can use css later\n  gt(id = 'table') %&gt;% \n  # add theme as a base\n  gt_theme_nytimes() %&gt;% \n  # render logos\n  fmt_markdown(team) %&gt;% \n  # render best win logo\n  fmt_image(best, width = 20, height = 20) %&gt;% \n  # round numbers\n  fmt_number(columns = adj_o:adj_d, decimals = 1) %&gt;% \n  fmt_percent(columns = barthag, decimals = 1) %&gt;% \n  # align cols\n  cols_align(columns = avg, 'right') %&gt;% \n  cols_align(columns = -c(team, avg), 'center') %&gt;% \n  # bold barthag\n  tab_style(locations = cells_body(columns = barthag), style = cell_text(weight = 'bold')) %&gt;% \n  # add spanner for quad\n  tab_spanner(columns = q1:q4, label = 'Quadrant Records') %&gt;% \n  # add spanner for t-rank\n  tab_spanner(columns = adj_o:barthag, label = 'Road Efficiency') %&gt;% \n  # add dividers\n  gt_add_divider(team, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(barthag, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(q4, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  # add footnote for best win\n  tab_footnote(locations = cells_column_labels(columns = best),\n               footnote = 'Highest current opponent T-Rank in a road win') %&gt;% \n  # add footnote for T-Rank\n  tab_footnote(locations = cells_column_labels(columns = barthag),\n               footnote = 'T-Rank Rating: WP% vs. average team on neutral floor based on road performance') %&gt;%\n  # add footnote for pred average\n  tab_footnote(locations = cells_column_labels(columns = avg),\n               footnote = 'Predictive Average: KenPom, T-Rank, BPI, and NET (rounded to nearest integer)') %&gt;% \n  # rename cols.\n  cols_label(\n    team = 'Team (record)',\n    adj_o = 'Adj. O',\n    adj_d = 'Adj. D',\n    barthag = 'T-Rank',\n    best = 'Best'\n  ) %&gt;% \n  # add stripping b/c why not and it looks good\n  opt_row_striping() %&gt;% \n  tab_options(data_row.padding = 4,\n              footnotes.font.size = 11,\n              # do this so we have the light lines below column spanners!\n              column_labels.border.bottom.style = \"solid\",\n              column_labels.border.bottom.width = px(1), \n              column_labels.border.bottom.color = \"black\",\n              table.border.bottom.style = 'none',\n              source_notes.font.size = 10,\n              source_notes.border.lr.style = \"none\") %&gt;% \n  # add headers // labs\n  tab_header(\n    title = 'Who are the best road teams in college basketball?',\n    subtitle = \"10 highest T-Rank ratings in true road performances (D-1 vs. D-1)\"\n  ) %&gt;% \n  tab_source_note(\n    md(\"Data by cbbdata + cbbplotR through 2023-24&lt;br&gt;Table + Analysis by @andreweatherman\")\n  ) %&gt;% \n  # css // this does some light other formatting and styling\n  opt_css(\n    '#table .gt_footnote {\n        padding-top: 2px !important;\n        padding-bottom: 2px !important;\n        line-height: 1;\n      }\n    #table .gt_heading {\n         padding-bottom: 0px;\n         padding-top: 6px\n        }\n      #table .gt_subtitle {\n         padding-top: 2px;\n         padding-bottom: 6px;\n      }\n      #table .gt_sourcenote {\n         text-align: right\n        }\n    '\n  ) %&gt;% \n  # save it!\n  gtsave_extra('best_road_teams.png', zoom = 3)"
  },
  {
    "objectID": "viz/road-performance/road-performance.html#complete-script",
    "href": "viz/road-performance/road-performance.html#complete-script",
    "title": "Best Road Performance",
    "section": "Complete Script",
    "text": "Complete Script\n\nlibrary(cbbdata)\nlibrary(cbbplotR)\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\naway_ratings &lt;- cbd_torvik_team_factors(year = 2024, venue = 'away')\n\nbest_win &lt;- cbd_torvik_game_factors(year = 2024, location = 'A') %&gt;%\n  filter(result == 'W') %&gt;% \n  left_join(cbd_torvik_ratings(year=2024) %&gt;% select(team, barthag), join_by('opp' == 'team')) %&gt;% \n  left_join(cbd_teams() %&gt;% select(opp = common_team, opp_logo = logo)) %&gt;% \n  slice_max(barthag, n = 1, by = team) %&gt;% \n  select(team, opp_logo)\n\nquad_records &lt;- cbd_torvik_team_schedule(year = 2024, location = 'A') %&gt;% \n  filter(date &lt; Sys.Date()) %&gt;% \n  cbd_add_net_quad() %&gt;% \n  left_join(cbd_torvik_game_box(year = 2024) %&gt;% select(date, team, opp, result),\n            by = c('date', 'team', 'opp')) %&gt;% \n  summarize(\n    record = paste0(sum(result == 'W'), '-', sum(result == 'L')),\n    .by = c(team, quad)\n  ) %&gt;% \n  pivot_wider(names_from = quad, values_from = record) %&gt;% \n  mutate(across(-team, ~ifelse(.x == 'NA-NA' | is.na(.x), '0-0', .x))) %&gt;% \n  select(team, q1 = `Quadrant 1`, q2 = `Quadrant 2`, q3 = `Quadrant 3`, q4 = `Quadrant 4`)\n\npred_avg &lt;- cbd_all_metrics() %&gt;% \n  summarize(\n    avg = (trank_rank + kp_rank + bpi_rank + net_rank) / 4,\n    .by = team\n  )\n\ndata &lt;- list(away_ratings, quad_records, best_win, pred_avg) %&gt;% \n  reduce(left_join, by = 'team') %&gt;% \n  slice_max(barthag, n = 10) %&gt;%\n  left_join(cbd_teams() %&gt;% select(team = common_team, logo = logo)) %&gt;% \n  mutate(team = glue(\"&lt;img src='{logo}' style='height: 20px; width: auto; vertical-align: -25%;'&gt;&nbsp; {team}\")) %&gt;% \n  mutate(record = paste0(wins, '-', losses),\n         team = paste0(team, ' (', record, ')'),\n         avg = paste0('#', round(avg, 0))) %&gt;% \n  select(avg, team, adj_o, adj_d, barthag, starts_with('q'), best = opp_logo)\n\ndata %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(team) %&gt;% \n  fmt_image(best, width = 20, height = 20) %&gt;% \n  fmt_number(columns = adj_o:adj_d, decimals = 1) %&gt;% \n  fmt_percent(columns = barthag, decimals = 1) %&gt;% \n  cols_align(columns = avg, 'right') %&gt;% \n  cols_align(columns = -c(team, avg), 'center') %&gt;% \n  tab_style(locations = cells_body(columns = barthag), style = cell_text(weight = 'bold')) %&gt;% \n  tab_spanner(columns = q1:q4, label = 'Quadrant Records') %&gt;% \n  tab_spanner(columns = adj_o:barthag, label = 'Road Efficiency') %&gt;% \n  gt_add_divider(team, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(barthag, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(q4, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;%\n  tab_footnote(locations = cells_column_labels(columns = best),\n               footnote = 'Highest current opponent T-Rank in a road win') %&gt;% \n  tab_footnote(locations = cells_column_labels(columns = barthag),\n               footnote = 'T-Rank Rating: WP% vs. average team on neutral floor based on road performance') %&gt;%\n  tab_footnote(locations = cells_column_labels(columns = avg),\n               footnote = 'Predictive Average: KenPom, T-Rank, BPI, and NET (rounded to nearest integer)') %&gt;% \n  cols_label(\n    team = 'Team (record)',\n    adj_o = 'Adj. O',\n    adj_d = 'Adj. D',\n    barthag = 'T-Rank',\n    best = 'Best'\n  ) %&gt;% \n  opt_row_striping() %&gt;% \n  tab_options(data_row.padding = 4,\n              footnotes.font.size = 11,\n              column_labels.border.bottom.style = \"solid\",\n              column_labels.border.bottom.width = px(1), \n              column_labels.border.bottom.color = \"black\",\n              table.border.bottom.style = 'none',\n              source_notes.font.size = 10,\n              source_notes.border.lr.style = \"none\") %&gt;% \n  tab_header(\n    title = 'Who are the best road teams in college basketball?',\n    subtitle = \"10 highest T-Rank ratings in true road performances (D-1 vs. D-1)\"\n  ) %&gt;% \n  tab_source_note(\n    md(\"Data by cbbdata + cbbplotR through 2023-24&lt;br&gt;Table + Analysis by @andreweatherman\")\n  ) %&gt;% \n  opt_css(\n    '#table .gt_footnote {\n        padding-top: 2px !important;\n        padding-bottom: 2px !important;\n        line-height: 1;\n      }\n    #table .gt_heading {\n         padding-bottom: 0px;\n         padding-top: 6px\n        }\n      #table .gt_subtitle {\n         padding-top: 2px;\n         padding-bottom: 6px;\n      }\n      #table .gt_sourcenote {\n         text-align: right\n        }\n    '\n  ) %&gt;% \n  gtsave_extra('best_road_teams.png', zoom = 5)"
  },
  {
    "objectID": "viz/index.html",
    "href": "viz/index.html",
    "title": "Visualization Gallery",
    "section": "",
    "text": "Team Game Performance\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\ntutorial\n\n\n\n…\n\n\n\nApr 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBest Road Performance\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\nscraping\n\n\n\n…\n\n\n\nApr 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nACC Wins in Decade Windows\n\n\n\ngt\n\n\ncollege basketball\n\n\nscraping\n\n\ntutorial\n\n\n\nTwo-column layout in gt\n\n\n\nApr 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNew Coaches vs. KenPom\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\nscraping\n\n\ntutorial\n\n\n\nUsing custom functions in gt\n\n\n\nApr 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTrump Juror News Sources\n\n\n\ngt\n\n\nnew york times\n\n\ntutorial\n\n\n\nCreating non-traditional tables in gt\n\n\n\nApr 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html",
    "href": "viz/best-new-coaches/new-coaches.html",
    "title": "New Coaches vs. KenPom",
    "section": "",
    "text": "We will be making a table that plots preseason vs. final KenPom rating improvements for new head coaches.\n\n\n\n\n\n\nWarning\n\n\n\nTo build this table, you will need an active KenPom subscription and a cbbdata account. Follow these steps to link your KenPom account to cbbdata.\n\n\n\nFinal Table"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#the-data",
    "href": "viz/best-new-coaches/new-coaches.html#the-data",
    "title": "New Coaches vs. KenPom",
    "section": "The Data",
    "text": "The Data\nGrab The Data\nCoaching Changes\nThe first thing that we will need is a list of coaching changes by season. There are a few different places from which to grab this, but the most straightforward way is the ‘Coaching Changes’ page at barttorvik.\nThe data is presented in a static HTML table by year, so we will write a function with rvest and use purrr to loop over needed seasons (2012-2024).\n\n\n\n\n\n\nNote\n\n\n\nFor some reason, the Barttorvik site blocks requests originating from Windows devices. To get around this, we will use withr and set a custom user-agent.\n\n\n\nget_coaching_changes &lt;- function(year) {\n  \n  suppressWarnings({\n    withr::local_options(HTTPUserAgent='Not Windows')\n    read_html(glue(\"https://barttorvik.com/coaching_moves.php?year={year}\")) %&gt;% \n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(year = year) %&gt;% \n      select(team, year, new_coach)\n  })\n  \n}\n\nNow that we have our scraping function, let’s loop over it with map_dfr.\n\nall_changes &lt;- map_dfr(2012:2024, \\(year) get_coaching_changes(year))\n\nKenPom Ratings\nNext, we need preseason and year-end KenPom ratings, which is possible with the cbd_kenpom_ratings_archive function from cbbdata. Specifying adj_em[which.min(date)] will grab the KenPom rating associated with the first observed date (preseason) for each team and year, etc.\n\narchive &lt;- cbd_kenpom_ratings_archive() %&gt;% \n  filter(year &gt;= 2008) %&gt;% \n  summarize(\n    start_em = adj_em[which.min(date)],\n    end_em = adj_em[which.max(date)],\n    final_rank = adj_em_rk[which.max(date)],\n    .by = c(team, year)\n  ) %&gt;% \n  mutate(diff = end_em - start_em)\n\nSeason Record\nFor some added flair, let’s include team records too.\n\nteam_records &lt;- cbd_torvik_game_box() %&gt;%\n  summarize(\n    record = glue(\"{sum(result == 'W')}-{sum(result == 'L')}\"),\n    .by = c(team, year)\n  )\n\nCombine\nFinally, let’s combine our data and calculate the rating difference. All join functions in dplyr only work with two data frames. However, we can place everything inside of a list and use reduce.\n\ndata &lt;- list(all_changes, archive, team_records) %&gt;% \n  reduce(left_join, by = c(\"team\", \"year\"))\n\nWe’re only going to plot the 10 bets rating jumps.\n\ndata &lt;- data %&gt;% slice_max(diff, n = 10)\n\nPostseason Outcome\nThe final thing that we are going to include is a column on whether or not a team made the postseason (NCAA, NIT, CBI, etc.). The easiest way to do this is to scrape Sports Reference – which is why we’re adding this after we have combined our data and grabbed the 10 largest jumps.\nPostseason information can be found on a team’s schedule page for a given season. We can use cbd_teams to grab the needed team slugs.\n\nsr_ids &lt;- cbd_teams() %&gt;% select(team = common_team, sr_link)\ngrab_schedules &lt;- function(team, year) {\n  \n  Sys.sleep(3) # sleep for 501\n  \n  id &lt;- filter(sr_ids, team == !!team)$sr_link\n  slug &lt;- str_extract(id, \"(?&lt;=/schools/)[^/]+(?=/men)\") # regex to extract slug\n  url &lt;- glue(\"https://www.sports-reference.com/cbb/schools/{slug}/men/{year}-schedule.html\")\n  \n  read_html(url) %&gt;% \n    html_nodes(\"#schedule\") %&gt;% \n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    clean_names() %&gt;% \n    slice_tail(n = 1) %&gt;% \n    select(\"type\") %&gt;% \n    mutate(team = team, year = year)\n  \n}\n\nUse purrr to iterate over all teams and combine the data back\n\npostseason &lt;- map2_dfr(data$team, data$year, \\(team, year) grab_schedules(team, year))\n\ndata &lt;- left_join(data, postseason, by = c('team', 'year')) %&gt;% \n  mutate(type = ifelse(type == \"CTOURN\", \"---\", type))"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#the-table",
    "href": "viz/best-new-coaches/new-coaches.html#the-table",
    "title": "New Coaches vs. KenPom",
    "section": "The Table",
    "text": "The Table\n…\nStack Function\nTo make things cleaner, here is a function that will plot team logos and stack some additional text to the right using HTML.\n\ngt_cbb_stack &lt;- function(data, upper_text1, upper_text2, lower_text1, lower_text2, lower_text3, logo) {\n\n  data %&gt;%\n    mutate(stack = glue(\n        \"&lt;div style='display: flex; align-items: center;'&gt;\n           &lt;img src='{eval(expr({{logo}}))}' style='height: auto; width: 20px; padding-right: 5px;'&gt;\n           &lt;div&gt;\n             &lt;div style='line-height:14px;'&gt;&lt;span style='font-weight:bold;color:black;font-size:14px'&gt;{eval(expr({{upper_text1}}))}, {eval(expr({{upper_text2}}))}&lt;/span&gt;&lt;/div&gt;\n             &lt;div style='line-height:10px;'&gt;&lt;span style='font-weight:plain;color:grey;font-size:10px'&gt;{eval(expr({{lower_text1}}))} --  #{eval(expr({{lower_text2}}))}, {eval(expr({{lower_text3}}))}&lt;/span&gt;&lt;/div&gt;\n           &lt;/div&gt;\n         &lt;/div&gt;\"\n      )\n    )\n}\n\nTo use this, we need to add a column with team logo links. Then, let’s apply it.\n\ndata &lt;- data %&gt;% left_join(cbd_teams() %&gt;% select(team = common_team, espn_nickname, logo))\n\ndata &lt;- data %&gt;% gt_cbb_stack(new_coach, year, espn_nickname, final_rank, record, logo)\n\nColumn Header + Subheader Function\nIn late January, Todd Whitehead (Synergy) posted a table with cool column headers + subheaders. I really liked this design, which pairs very well with stacked cells, so I created a function to mimic this effect in gt. We’ll use it in our table too.\nThis function does a few things, but most notably, it creates an HTML string for the “stacked” effect, parses it using htmltools, and then sets it as the header using cols_label.\n\ngt_column_subheaders &lt;- function(gt_table, ...) {\n\n  subheaders &lt;- list(...)\n  all_col_names &lt;- colnames(gt_table[['_data']])\n\n  for (col_name in all_col_names) {\n\n    subtitle_info &lt;- subheaders[[col_name]] %||% list(subtitle = \"&nbsp;\", heading = col_name)\n    subtitle &lt;- subtitle_info$subtitle\n    new_header_title &lt;- subtitle_info$heading\n\nlabel_html &lt;- htmltools::HTML(glue(\n  \"&lt;div style='line-height: 1.05; margin-bottom: -2px;'&gt;\n    &lt;span style='font-size: 14px; font-weight: bold; color: black;'&gt;{new_header_title}&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span style='font-size: 10px; font-weight: normal; color: #808080;'&gt;{subtitle}&lt;/span&gt;\n  &lt;/div&gt;\"\n))\n\n    gt_table &lt;- gt_table %&gt;% \n      cols_label(!!sym(col_name) := label_html)\n  }\n  \n  gt_table\n}\n\n1) The Base Table\nHonestly, the code below outputs a pretty nice table, but there is definitely some room for improvement.\n\ndata %&gt;% \n  select(stack, type, start_em, end_em, diff) %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(stack) %&gt;% \n  cols_move_to_start(stack) %&gt;% \n  cols_align(columns = stack, 'left') %&gt;% \n  cols_align(columns = -stack, 'center')\n\n2) Applying Custom Column Function\nLet’s apply our custom gt_column_subheaders function. To relabel a column, you need to pass a list with heading and subheading.\n\n... %&gt;%\n  gt_column_subheaders(stack = list(heading = \"Coach and Year\",\n                                    subtitle = \"Team, Final Rank, and Record\"),\n                       type = list(heading = 'Post SZN',\n                                    subtitle = \"Tournament\"),\n                       start_em = list(heading = 'Pre',\n                                    subtitle = \"Rating\"),\n                       end_em = list(heading = 'End',\n                                    subtitle = \"Rating\"),\n                       diff = list(heading = 'Jump',\n                                    subtitle = \"End - Start\"))\n\n3) Table Borders\nTo give our table some more clarity and definition, we will add some borders around our cells.\n\n... %&gt;%\n  tab_style(locations = cells_body(columns = c(type, ends_with(\"em\"))), style = cell_borders()) %&gt;% \n  tab_style(locations = cells_body(columns = -ends_with(\"em\")), style = cell_borders(sides = \"bottom\")) %&gt;% \n  tab_style(locations = cells_body(rows = 1), style = cell_borders(sides = \"top\", weight = px(2))) %&gt;% \n  tab_style(locations = cells_body(columns = diff), style = cell_text(weight = 'bold')) \n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;%\n  tab_options(data_row.padding = 3.5,\n              source_notes.border.bottom.style = \"solid\",\n              source_notes.border.bottom.color = \"white\",\n              source_notes.font.size = 10) %&gt;% \n  tab_header(title = \"New coaches beating KenPom expectations\",\n             subtitle = md(\"The largest pre-season vs. year-end KenPom rating improvements&lt;br&gt;by new head coaches since 2012\")) %&gt;% \n  tab_source_note(md(\"Data by cbbdata + Sports Reference&lt;br&gt;Viz. + Analysis by @andreweatherman\"))\n\n5) Additional CSS\nFinally, let’s throw in some minor CSS changes. When using opt_css, it is important to reference the same table id that you created in gt(id = …).\nThe first two lines adjust the padding between the title and subtitles – “squishing” them together.\nThe third line targets the bottom border of the table. It creates the same effect as the tab_style that targeted the first row (black border at 2px weight).\n\n... %&gt;%\n    opt_css(\n    \"\n    #table .gt_heading {\n      padding-top: 6px;\n      padding-bottom: 0px;\n    }\n    #table .gt_subtitle {\n      padding-top: 2px;\n      padding-bottom: 6px;\n    }\n    #table tbody tr:last-child {\n    border-bottom: 2px solid #000000;\n    }\n    \"\n  )"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#complete-script",
    "href": "viz/best-new-coaches/new-coaches.html#complete-script",
    "title": "New Coaches vs. KenPom",
    "section": "Complete Script",
    "text": "Complete Script\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(cbbdata)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(glue)\nlibrary(janitor)\n\n## functions ===\n\nget_coaching_changes &lt;- function(year) {\n  \n  suppressWarnings({\n    withr::local_options(HTTPUserAgent='Not Windows')\n    read_html(glue(\"https://barttorvik.com/coaching_moves.php?year={year}\")) %&gt;% \n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(year = year) %&gt;% \n      select(team, year, new_coach)\n  })\n  \n}\n\ngrab_schedules &lt;- function(team, year) {\n  \n  Sys.sleep(3) # sleep for 501\n  \n  id &lt;- filter(sr_ids, team == !!team)$sr_link\n  slug &lt;- str_extract(id, \"(?&lt;=/schools/)[^/]+(?=/men)\") # regex to extract slug\n  url &lt;- glue(\"https://www.sports-reference.com/cbb/schools/{slug}/men/{year}-schedule.html\")\n  \n  read_html(url) %&gt;% \n    html_nodes(\"#schedule\") %&gt;% \n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    clean_names() %&gt;% \n    slice_tail(n = 1) %&gt;% \n    select(\"type\") %&gt;% \n    mutate(team = team, year = year)\n  \n}\n\ngt_cbb_stack &lt;- function(data, upper_text1, upper_text2, lower_text1, lower_text2, lower_text3, logo) {\n\n  data %&gt;%\n    mutate(stack = glue(\n        \"&lt;div style='display: flex; align-items: center;'&gt;\n           &lt;img src='{eval(expr({{logo}}))}' style='height: auto; width: 20px; padding-right: 5px;'&gt;\n           &lt;div&gt;\n             &lt;div style='line-height:14px;'&gt;&lt;span style='font-weight:bold;color:black;font-size:14px'&gt;{eval(expr({{upper_text1}}))}, {eval(expr({{upper_text2}}))}&lt;/span&gt;&lt;/div&gt;\n             &lt;div style='line-height:10px;'&gt;&lt;span style='font-weight:plain;color:grey;font-size:10px'&gt;{eval(expr({{lower_text1}}))} --  #{eval(expr({{lower_text2}}))}, {eval(expr({{lower_text3}}))}&lt;/span&gt;&lt;/div&gt;\n           &lt;/div&gt;\n         &lt;/div&gt;\"\n      )\n    )\n}\n\ngt_column_subheaders &lt;- function(gt_table, ...) {\n\n  subheaders &lt;- list(...)\n  all_col_names &lt;- colnames(gt_table[['_data']])\n\n  for (col_name in all_col_names) {\n\n    subtitle_info &lt;- subheaders[[col_name]] %||% list(subtitle = \"&nbsp;\", heading = col_name)\n    subtitle &lt;- subtitle_info$subtitle\n    new_header_title &lt;- subtitle_info$heading\n\nlabel_html &lt;- htmltools::HTML(glue(\n  \"&lt;div style='line-height: 1.05; margin-bottom: -2px;'&gt;\n    &lt;span style='font-size: 14px; font-weight: bold; color: black;'&gt;{new_header_title}&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span style='font-size: 10px; font-weight: normal; color: #808080;'&gt;{subtitle}&lt;/span&gt;\n  &lt;/div&gt;\"\n))\n\n    gt_table &lt;- gt_table %&gt;% \n      cols_label(!!sym(col_name) := label_html)\n  }\n  \n  gt_table\n}\n\n## code ===\n\nall_changes &lt;- map_dfr(2012:2024, \\(year) get_coaching_changes(year))\n\narchive &lt;- cbd_kenpom_ratings_archive() %&gt;% \n  filter(year &gt;= 2008) %&gt;% \n  summarize(\n    start_em = adj_em[which.min(date)],\n    end_em = adj_em[which.max(date)],\n    final_rank = adj_em_rk[which.max(date)],\n    .by = c(team, year)\n  ) %&gt;% \n  mutate(diff = end_em - start_em)\n\nteam_records &lt;- cbd_torvik_game_box() %&gt;%\n  summarize(\n    record = glue(\"{sum(result == 'W')}-{sum(result == 'L')}\"),\n    .by = c(team, year)\n  )\n\ndata &lt;- list(all_changes, archive, team_records) %&gt;% \n  reduce(left_join, by = c(\"team\", \"year\")) %&gt;% \n  slice_max(diff, n = 10)\n\nsr_ids &lt;- cbd_teams() %&gt;% select(team = common_team, sr_link)\n\npostseason &lt;- map2_dfr(data$team, data$year, \\(team, year) grab_schedules(team, year))\n\ndata &lt;- left_join(data, postseason, by = c('team', 'year')) %&gt;% \n  mutate(type = ifelse(type == \"CTOURN\", \"---\", type)) %&gt;% \n  left_join(cbd_teams() %&gt;% select(team = common_team, espn_nickname, logo)) %&gt;% \n  gt_cbb_stack(new_coach, year, espn_nickname, final_rank, record, logo)\n\n## table ===\n\ntable &lt;- data %&gt;% \n  select(stack, type, start_em, end_em, diff) %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(stack) %&gt;% \n  cols_move_to_start(stack) %&gt;% \n  cols_align(columns = stack, 'left') %&gt;% \n  cols_align(columns = -stack, 'center') %&gt;% \n  gt_column_subheaders(stack = list(heading = \"Coach and Year\",\n                                  subtitle = \"Team, Final Rank, and Record\"),\n                     type = list(heading = 'Post SZN',\n                                  subtitle = \"Tournament\"),\n                     start_em = list(heading = 'Pre',\n                                  subtitle = \"Rating\"),\n                     end_em = list(heading = 'End',\n                                  subtitle = \"Rating\"),\n                     diff = list(heading = 'Jump',\n                                  subtitle = \"End - Start\")) %&gt;% \n  tab_style(locations = cells_body(columns = c(type, ends_with(\"em\"))), style = cell_borders()) %&gt;% \n  tab_style(locations = cells_body(columns = -ends_with(\"em\")), style = cell_borders(sides = \"bottom\")) %&gt;% \n  tab_style(locations = cells_body(rows = 1), style = cell_borders(sides = \"top\", weight = px(2))) %&gt;% \n  tab_style(locations = cells_body(columns = diff), style = cell_text(weight = 'bold')) %&gt;% \n  tab_options(data_row.padding = 3.5,\n              source_notes.border.bottom.style = \"solid\",\n              source_notes.border.bottom.color = \"white\",\n              source_notes.font.size = 10) %&gt;% \n  tab_header(title = \"New coaches beating KenPom expectations\",\n             subtitle = md(\"The largest pre-season vs. year-end KenPom rating improvements&lt;br&gt;by new head coaches since 2012\")) %&gt;% \n  tab_source_note(md(\"Data by cbbdata + Sports Reference&lt;br&gt;Viz. + Analysis by @andreweatherman\")) %&gt;% \n  opt_css(\n    \"\n    #table .gt_heading {\n      padding-top: 6px;\n      padding-bottom: 0px;\n    }\n    #table .gt_subtitle {\n      padding-top: 2px;\n      padding-bottom: 6px;\n    }\n    #table tbody tr:last-child {\n    border-bottom: 2px solid #000000;\n    }\n    \"\n  )\n\n## save ===\n\ngtsave_extra(table, \"final_table.png\", zoom = 5)"
  },
  {
    "objectID": "r-resources/index.html",
    "href": "r-resources/index.html",
    "title": "R Resources",
    "section": "",
    "text": "Tutorials/E-Books\n\n\n\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen\n\nA detailed introduction to ggplot2 and its syntax/grammar. An excellent starting point to better understand the package as a beginner.\n\n\n\nR Graphics Cookbook, 2nd edition by Winston Chang\n\nIncludes more than 150 code snippets for basic ggplot2 examples.\n\n\n\nData Visualization: A Practical Introduction by Kieran Healy\n\nTeaches the principles of effective data visualization, a brief introduction to ggplot2, and includes a nice focus on creating maps in R."
  },
  {
    "objectID": "r-resources/index.html#e-books",
    "href": "r-resources/index.html#e-books",
    "title": "R Resources",
    "section": "",
    "text": "ggplot2: Elegant Graphics for Data Analysis by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen\n\nA detailed introduction to ggplot2 and its syntax/grammar. An excellent starting point to better understand the package as a beginner.\n\n\n\nR Graphics Cookbook, 2nd edition by Winston Chang\n\nIncludes more than 150 code snippets for basic ggplot2 examples.\n\n\n\nData Visualization: A Practical Introduction by Kieran Healy\n\nTeaches the principles of effective data visualization, a brief introduction to ggplot2, and includes a nice focus on creating maps in R."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "I live in Durham, North Carolina, and graduated from Duke University with a degree in public policy in 2023.\nAt Duke, I was a student manager for the men’s basketball team under head coaches Mike Krzyzewski and Jon Scheyer.\nI work in R for a living, but my passions extend far beyond the office. I am an active contributor to the open-source community, authoring both the cbbdata and cbbplotR packages.\nI am a firm believer in democratizing code and data. I hope that this site and its contents provide inspiration and learning."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 quantumjitter Carl Goodwin\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "viz/acc-window-wins/window-wins.html",
    "href": "viz/acc-window-wins/window-wins.html",
    "title": "ACC Wins in Decade Windows",
    "section": "",
    "text": "In early May 2024, JFreshHockey posted a visualization showing the top five regular season teams, by wins, in 10-season windows. …\n…"
  },
  {
    "objectID": "viz/acc-window-wins/window-wins.html#the-data",
    "href": "viz/acc-window-wins/window-wins.html#the-data",
    "title": "ACC Wins in Decade Windows",
    "section": "The Data",
    "text": "The Data\nGrab The Data\nFor our visualization, we will be looking at ACC performance between inception (1954) and 2024. There are a few ways to pull this data using Sports Reference, but to keep things free, we will be scraping individual ACC pages and not using Stathead (paid).\nWe can grab conference record by-year with rvest by iterating through https://www.sports-reference.com/cbb/conferences/acc/men/{YEAR}.html. The data is stored in static tables, so a simple html_table function should do the trick here.\nUsing the SelectorGadget tool, we can find the tag associated with the standings table on every page.\n\nSelectorGadget\n\n\n\n\n\n\n\n\nUsing a simple loop, we can grab per-season conference wins and losses.\n\nacc_results &lt;- map_dfr(1954:2024, \\(year) {\n  Sys.sleep(3) # for 501 error\n\n  read_html(glue(\"https://www.sports-reference.com/cbb/conferences/acc/men/{year}.html\")) %&gt;%\n    html_nodes(\"#standings\") %&gt;% # target standings\n    html_table() %&gt;% # get table\n    pluck(1) %&gt;% # pluck from list\n    row_to_names(1) %&gt;% # first row are col. names\n    clean_names() %&gt;%\n    mutate(year = year,\n           across(w:l, as.numeric)) %&gt;%\n    select(team = school, wins = w, losses = l, notes, year)\n}, .progress = 'Getting data')\n\nCalculate the Windows\nThere are a few ways to do this, but for our example, I’m going to write a separate function to loop over. This function takes a data frame and a starting year. It then filters between that starting year and ten years in the future (between) to grab 10-year “windows.” For each team, denoted with .by inside summarize, it calculates total wins, total losses, and win percentage (we only need total wins, but I decided to grab more data in case you want to plot something else).\n\ncalculate_windows &lt;- function(start_year, data) {\n  data %&gt;%\n    filter(between(year, start_year, start_year + 9)) %&gt;% \n    summarize(\n      total_wins = sum(wins),\n      total_losses = sum(losses),\n      win_percentage = total_wins / (total_wins + total_losses),\n      .by = team\n    ) %&gt;%\n    mutate(years = paste(start_year, start_year + 9, sep=\"-\"),\n           begin = start_year,\n           end = start_year + 9)\n}\n\nWe can, again, use purrr to apply our iteration. We want to loop over the first year of the ACC’s existence (min(acc_results)$year) and the last observed year minus nine (to capture the final “complete” window).\n\nacc_windows &lt;- map_dfr(min(acc_results$year):(max(acc_results$year) - 9),\n                       ~calculate_windows(.x, acc_results))\n\nFinally, let’s choose the five winningest teams over each window.\n\nplot_data &lt;- acc_windows %&gt;% \n  slice_max(total_wins, n = 5, by = years, with_ties = FALSE) %&gt;% \n  group_by(years) %&gt;% \n  arrange(desc(total_wins), desc(win_percentage), .by_group = TRUE) %&gt;% \n  mutate(position = row_number()) %&gt;% \n  ungroup()\n\nPrepare for plotting\nConditional highlighting\nIn our table, we want to highlight each team who won an ACC conference championship during the window in question. “Highlighting” cells in gt is a bit weird because tab_style + cell_fill does not really work as one might expect.\nNamely, row and column vectors are not treated as separate pairs. If you pass through, e.g. rows = c(1, 2) and columns = c(5, 6) inside tab_style, you’ll fill four cells, not two, because tab_style doesn’t treat things as unique pairs.\nTurns out, you can just build the CSS string for highlighting cells outside of the table and apply it directly with opt_css.\nOkay, so how do we do that? First, let’s extract tournament champions from the acc_results table.\n\nchampions &lt;- acc_results %&gt;% \n  filter(grepl(\"Conf.\", notes)) %&gt;% # filter for champions \n  select(team, year)\n\nNow, let’s join that information over to plot_table by creating a new “indicator” column. We will use any to search through our champions table to find whether a match exists (i.e. a team won a conference championship during the begin-end window).\n\nplot_data &lt;- plot_data %&gt;% \n  rowwise() %&gt;% \n  mutate(champ_win = any(champions$team == team & champions$year &gt;= begin & champions$year &lt;= end)) %&gt;% \n  ungroup()\n\nThen, let’s pivot our data to a wide format and replace team names with logos. A nifty way to keep our champ_win data is to wrap our logos around an img tag and include an alt tag that refers to champ_win. This is a harmless way of keeping that data in our pivoted frame without adding more columns.\nWe can add team logos by creating a named vector using cbd_logos from cbbdata.\n\nlogos &lt;- cbd_teams() %&gt;% select(team = sr_team, logo)\nlogos &lt;- logos %&gt;% pull(logo) %&gt;% rlang::set_names(logos$team)\n\n\nplot_data &lt;- plot_data %&gt;% \n  mutate(team = glue(\"&lt;img src='{logos[team]}' alt={champ_win} style='height:30px; vertical-align:middle;'&gt;\")) %&gt;% \n  pivot_wider(id_cols = begin:end, names_from = position, values_from = team)\n\n\n\nmy_gt &lt;- function(x) {\n  gt(x) %&gt;% \n    fmt_markdown(-c(begin:end))\n}\n\n\ntables &lt;- gt_double_table(plot_data, my_gt, nrows = nrow(plot_data) / 2)\n\n\ngt_two_column_layout(tables)"
  },
  {
    "objectID": "viz/game-performance/game-performance.html",
    "href": "viz/game-performance/game-performance.html",
    "title": "Team Game Performance",
    "section": "",
    "text": "We will be creating a neat game performance table, highlighting team-wide four factors on a game-by-game basis.\n…"
  },
  {
    "objectID": "viz/game-performance/game-performance.html#the-data",
    "href": "viz/game-performance/game-performance.html#the-data",
    "title": "Team Game Performance",
    "section": "The Data",
    "text": "The Data\nGrab The Data\n…"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html",
    "href": "viz/nyt-trump-jurors/trump-jurors.html",
    "title": "Trump Juror News Sources",
    "section": "",
    "text": "On April 19th, 2024, the New York Times published an article with a visualization that detailed from which “outlets” jurors in the “Trump Hush-Money” trial turn to for their news consumption. I thought it would be a fun exercise to recreate it using the {gt} package.\nYou can use the toggles below to view the original table from the New York Times and our table using gt.\n\nOriginal Table\n\n\n\n\n\n\n\n\n\nOur Table"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#the-data",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#the-data",
    "title": "Trump Juror News Sources",
    "section": "The Data",
    "text": "The Data\nGrab the data\nTypically, I try my best to find and scrape the original data source. But unfortunately, perhaps for security reasons, I could not locate the juror reponses to the screening questionnaire. So instead, I hard coded the data as a .CSV.\nGrab the data with this:\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\n\nExpand to see data\nManipulate the data\nFor exercise, I left us with a few required manipulations:\n1) Transpose the data\nOur data file is in a wide format relative to publication, but our table requires the jurors to be the column names. There are a number of ways to essentially “swap” rows and columns, and we are going to use the transpose function from data.table and specify keep.names to retain our column headers. Our headers, actually, are located in the first row of our table, so we will use row_to_names from janitor to “shift” everything up one row. Finally, let’s convert this back to a tibble and rename the first column.\n\ndata &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\")\n\n2) Create the boxes\nThis is the “trickiest” part of the visualization. There are probably a multitude of ways to go about this, but to plot the boxes in each cell, I am using an inline block, with equal height and width.\nFirst, you will notice that the table labels each juror number in the first row, but it resets the “counter” after the 12th juror (13-18 are “alternates”). To handle this, we need to create a “display number” that that follows the same logic. Since our column headers are the juror numbers, we can simply refer to it using the cur_column function.\nNext, our values are NA if the juror does not utilize that news “source,” so we can set that color to a light grey and use a yellow when the cell is not NA (does use it).\nFinally, the “trickiest” part is to create an HTML string that builds the box. If you don’t know HTML or CSS, that’s okay, you can still follow along; the code is pretty intuitive.\n\nThe “inline block” creates a small square with the height and width specified in the string.\nIt is filled with the background-color referenced above.\nThe shorthand margin property first sets the top and bottom margins and then the left and right margins. Having smaller left and right margins will make the boxes appear closer together.\nThe text (and boxes) are then centered, set at a 12px font size, and bolded (which the original table does not do).\n\n\ndata &lt;- data %&gt;% \n   mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }))\n\n3) Separator\nIn the original table, there is a small gap to separate the jurors from the alternates. We can mimic this same effect by creating a dummy column after our above mutations and then place it after the 13th column (the 12th and final juror).\n\ndata &lt;- data %&gt;% mutate(blank = '', .after = 13)"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#the-table",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#the-table",
    "title": "Trump Juror News Sources",
    "section": "The Table",
    "text": "The Table\nMost of our table can be created with stock gt functions, but we will need to add minimal CSS to top it off.\n1) The Base Table\nThe “base” of our table will be created using fmt_markdown to render our HTML strings and gt_theme_nytimes to closely mirror the look of the original table. Importantly, we add an arbitrary “id” for later use with opt_css.\n\ndata %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank))\n\n2) Handling the Separator Column\nTo create the separation effect, we will need to relabel our column and adjust its width.\n\n... %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15))\n\n3) Column Labels\nThe original table does not have “traditional” column headers; instead, they appear to column spanners, which we can create with tab_spanner. To really drive home this effect, we’re going to need some CSS at the end. But for now, let’s add the column spanners, align them to the left, and make them a light grey.\n\n... %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\"))\n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;% \n  tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12)\n\n5) Additional CSS\nTo make our column spanners look like headers – creating the spanner-header effect in the original table – we need some light css. When using opt_css, it is important to reference the same table id that you created in gt(id = ...).\nThe first line hides the column headers and sets their position to “relative,” allowing our spanners to “drop” in their place.\nThe second line “drops” our spanners with position: absolute, makes them visible, and adds some minor padding. Our spanners are already aligned left, done in step three, but remember that our boxes have slight left-right margins, so by default, our spanners look misaligned. We can “push” them to the right with padding-left: 3px.\n\n... %&gt;% \n   opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#complete-script",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#complete-script",
    "title": "Trump Juror News Sources",
    "section": "Complete Script",
    "text": "Complete Script\nThe complete code is below. There is a copy button for convenience in the top right of the code chunk.\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\ntable &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\") %&gt;% \n  mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }),\n  blank = '', .after = 13) %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank)) %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15)) %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\")) %&gt;% \n    tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12) %&gt;% \n     opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )\n\n## saving the table\ngtsave_extra(table, \"trump_jurors_news.png\", zoom = 12)"
  }
]