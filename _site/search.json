[
  {
    "objectID": "viz/road-performance/road-performance.html",
    "href": "viz/road-performance/road-performance.html",
    "title": "Best Road Performance",
    "section": "",
    "text": "A gt table that calculates the 10 best T-Rank efficiency ratings in true D-1 vs. D-1 road performances – also includes a composite season-long predictive average across all games and quadrant records in true road games.\n\nFinal Table"
  },
  {
    "objectID": "viz/road-performance/road-performance.html#scripts",
    "href": "viz/road-performance/road-performance.html#scripts",
    "title": "Best Road Performance",
    "section": "Scripts",
    "text": "Scripts\nThis visualization is not yet accompanied by a tutorial.\nThe Data\n\n## grab ratings in away games vs. top 150\naway_ratings &lt;- cbd_torvik_team_factors(year = 2024, venue = 'away')\n\n## get best away win by highest T-Rank\nbest_win &lt;- cbd_torvik_game_factors(year = 2024, location = 'A') %&gt;%\n  filter(result == 'W') %&gt;% \n  left_join(cbd_torvik_ratings(year=2024) %&gt;% select(team, barthag), join_by('opp' == 'team')) %&gt;% \n  left_join(cbd_teams() %&gt;% select(opp = common_team, opp_logo = logo)) %&gt;% \n  slice_max(barthag, n = 1, by = team) %&gt;% \n  select(team, opp_logo)\n\n## get quad records in away games\nquad_records &lt;- cbd_torvik_team_schedule(year = 2024, location = 'A') %&gt;% \n  filter(date &lt; Sys.Date()) %&gt;% \n  cbd_add_net_quad() %&gt;% \n  # join on results\n  left_join(cbd_torvik_game_box(year = 2024) %&gt;% select(date, team, opp, result),\n            by = c('date', 'team', 'opp')) %&gt;% \n  summarize(\n    record = paste0(sum(result == 'W'), '-', sum(result == 'L')),\n    .by = c(team, quad)\n  ) %&gt;% \n  # pivot wider so we get proper joining + plotting format\n  pivot_wider(names_from = quad, values_from = record) %&gt;% \n  # replace NAs (quads with no games) as 0-0\n  mutate(across(-team, ~ifelse(.x == 'NA-NA' | is.na(.x), '0-0', .x))) %&gt;% \n  # rename // could do this later in gt\n  select(team, q1 = `Quadrant 1`, q2 = `Quadrant 2`, q3 = `Quadrant 3`, q4 = `Quadrant 4`)\n\n# get predictive metric average\npred_avg &lt;- cbd_all_metrics() %&gt;% \n  summarize(\n    avg = (trank_rank + kp_rank + bpi_rank + net_rank) / 4,\n    .by = team\n  )\n\n## join together\ndata &lt;- list(away_ratings, quad_records, best_win, pred_avg) %&gt;% \n  # use reduce to quickly join multiple DFs (passed as list) w/ a common key (team)\n  reduce(left_join, by = 'team') %&gt;% \n  # take highest barthags\n  slice_max(barthag, n = 10) %&gt;%\n  # add logos\n  left_join(cbd_teams() %&gt;% select(team = common_team, logo = logo)) %&gt;% \n  mutate(team = glue(\"&lt;img src='{logo}' style='height: 20px; width: auto; vertical-align: -25%;'&gt;&nbsp; {team}\")) %&gt;% \n  # add record column // add record to logo col.\n  mutate(record = paste0(wins, '-', losses),\n         team = paste0(team, ' (', record, ')'),\n         avg = paste0('#', round(avg, 0))) %&gt;% \n  # select columns to plot\n  select(avg, team, adj_o, adj_d, barthag, starts_with('q'), best = opp_logo)\n\nThe Table\n\n# make table\ndata %&gt;% \n  # set table id so we can use css later\n  gt(id = 'table') %&gt;% \n  # add theme as a base\n  gt_theme_nytimes() %&gt;% \n  # render logos\n  fmt_markdown(team) %&gt;% \n  # render best win logo\n  fmt_image(best, width = 20, height = 20) %&gt;% \n  # round numbers\n  fmt_number(columns = adj_o:adj_d, decimals = 1) %&gt;% \n  fmt_percent(columns = barthag, decimals = 1) %&gt;% \n  # align cols\n  cols_align(columns = avg, 'right') %&gt;% \n  cols_align(columns = -c(team, avg), 'center') %&gt;% \n  # bold barthag\n  tab_style(locations = cells_body(columns = barthag), style = cell_text(weight = 'bold')) %&gt;% \n  # add spanner for quad\n  tab_spanner(columns = q1:q4, label = 'Quadrant Records') %&gt;% \n  # add spanner for t-rank\n  tab_spanner(columns = adj_o:barthag, label = 'Road Efficiency') %&gt;% \n  # add dividers\n  gt_add_divider(team, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(barthag, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(q4, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  # add footnote for best win\n  tab_footnote(locations = cells_column_labels(columns = best),\n               footnote = 'Highest current opponent T-Rank in a road win') %&gt;% \n  # add footnote for T-Rank\n  tab_footnote(locations = cells_column_labels(columns = barthag),\n               footnote = 'T-Rank Rating: WP% vs. average team on neutral floor based on road performance') %&gt;%\n  # add footnote for pred average\n  tab_footnote(locations = cells_column_labels(columns = avg),\n               footnote = 'Predictive Average: KenPom, T-Rank, BPI, and NET (rounded to nearest integer)') %&gt;% \n  # rename cols.\n  cols_label(\n    team = 'Team (record)',\n    adj_o = 'Adj. O',\n    adj_d = 'Adj. D',\n    barthag = 'T-Rank',\n    best = 'Best'\n  ) %&gt;% \n  # add stripping b/c why not and it looks good\n  opt_row_striping() %&gt;% \n  tab_options(data_row.padding = 4,\n              footnotes.font.size = 11,\n              # do this so we have the light lines below column spanners!\n              column_labels.border.bottom.style = \"solid\",\n              column_labels.border.bottom.width = px(1), \n              column_labels.border.bottom.color = \"black\",\n              table.border.bottom.style = 'none',\n              source_notes.font.size = 10,\n              source_notes.border.lr.style = \"none\") %&gt;% \n  # add headers // labs\n  tab_header(\n    title = 'Who are the best road teams in college basketball?',\n    subtitle = \"10 highest T-Rank ratings in true road performances (D-1 vs. D-1)\"\n  ) %&gt;% \n  tab_source_note(\n    md(\"Data by cbbdata + cbbplotR through 2023-24&lt;br&gt;Table + Analysis by @andreweatherman\")\n  ) %&gt;% \n  # css // this does some light other formatting and styling\n  opt_css(\n    '#table .gt_footnote {\n        padding-top: 2px !important;\n        padding-bottom: 2px !important;\n        line-height: 1;\n      }\n    #table .gt_heading {\n         padding-bottom: 0px;\n         padding-top: 6px\n        }\n      #table .gt_subtitle {\n         padding-top: 2px;\n         padding-bottom: 6px;\n      }\n      #table .gt_sourcenote {\n         text-align: right\n        }\n    '\n  ) %&gt;% \n  # save it!\n  gtsave_extra('best_road_teams.png', zoom = 3)"
  },
  {
    "objectID": "viz/road-performance/road-performance.html#complete-script",
    "href": "viz/road-performance/road-performance.html#complete-script",
    "title": "Best Road Performance",
    "section": "Complete Script",
    "text": "Complete Script\n\nlibrary(cbbdata)\nlibrary(cbbplotR)\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n\naway_ratings &lt;- cbd_torvik_team_factors(year = 2024, venue = 'away')\n\nbest_win &lt;- cbd_torvik_game_factors(year = 2024, location = 'A') %&gt;%\n  filter(result == 'W') %&gt;% \n  left_join(cbd_torvik_ratings(year=2024) %&gt;% select(team, barthag), join_by('opp' == 'team')) %&gt;% \n  left_join(cbd_teams() %&gt;% select(opp = common_team, opp_logo = logo)) %&gt;% \n  slice_max(barthag, n = 1, by = team) %&gt;% \n  select(team, opp_logo)\n\nquad_records &lt;- cbd_torvik_team_schedule(year = 2024, location = 'A') %&gt;% \n  filter(date &lt; Sys.Date()) %&gt;% \n  cbd_add_net_quad() %&gt;% \n  left_join(cbd_torvik_game_box(year = 2024) %&gt;% select(date, team, opp, result),\n            by = c('date', 'team', 'opp')) %&gt;% \n  summarize(\n    record = paste0(sum(result == 'W'), '-', sum(result == 'L')),\n    .by = c(team, quad)\n  ) %&gt;% \n  pivot_wider(names_from = quad, values_from = record) %&gt;% \n  mutate(across(-team, ~ifelse(.x == 'NA-NA' | is.na(.x), '0-0', .x))) %&gt;% \n  select(team, q1 = `Quadrant 1`, q2 = `Quadrant 2`, q3 = `Quadrant 3`, q4 = `Quadrant 4`)\n\npred_avg &lt;- cbd_all_metrics() %&gt;% \n  summarize(\n    avg = (trank_rank + kp_rank + bpi_rank + net_rank) / 4,\n    .by = team\n  )\n\ndata &lt;- list(away_ratings, quad_records, best_win, pred_avg) %&gt;% \n  reduce(left_join, by = 'team') %&gt;% \n  slice_max(barthag, n = 10) %&gt;%\n  left_join(cbd_teams() %&gt;% select(team = common_team, logo = logo)) %&gt;% \n  mutate(team = glue(\"&lt;img src='{logo}' style='height: 20px; width: auto; vertical-align: -25%;'&gt;&nbsp; {team}\")) %&gt;% \n  mutate(record = paste0(wins, '-', losses),\n         team = paste0(team, ' (', record, ')'),\n         avg = paste0('#', round(avg, 0))) %&gt;% \n  select(avg, team, adj_o, adj_d, barthag, starts_with('q'), best = opp_logo)\n\ndata %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(team) %&gt;% \n  fmt_image(best, width = 20, height = 20) %&gt;% \n  fmt_number(columns = adj_o:adj_d, decimals = 1) %&gt;% \n  fmt_percent(columns = barthag, decimals = 1) %&gt;% \n  cols_align(columns = avg, 'right') %&gt;% \n  cols_align(columns = -c(team, avg), 'center') %&gt;% \n  tab_style(locations = cells_body(columns = barthag), style = cell_text(weight = 'bold')) %&gt;% \n  tab_spanner(columns = q1:q4, label = 'Quadrant Records') %&gt;% \n  tab_spanner(columns = adj_o:barthag, label = 'Road Efficiency') %&gt;% \n  gt_add_divider(team, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(barthag, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  gt_add_divider(q4, include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;%\n  tab_footnote(locations = cells_column_labels(columns = best),\n               footnote = 'Highest current opponent T-Rank in a road win') %&gt;% \n  tab_footnote(locations = cells_column_labels(columns = barthag),\n               footnote = 'T-Rank Rating: WP% vs. average team on neutral floor based on road performance') %&gt;%\n  tab_footnote(locations = cells_column_labels(columns = avg),\n               footnote = 'Predictive Average: KenPom, T-Rank, BPI, and NET (rounded to nearest integer)') %&gt;% \n  cols_label(\n    team = 'Team (record)',\n    adj_o = 'Adj. O',\n    adj_d = 'Adj. D',\n    barthag = 'T-Rank',\n    best = 'Best'\n  ) %&gt;% \n  opt_row_striping() %&gt;% \n  tab_options(data_row.padding = 4,\n              footnotes.font.size = 11,\n              column_labels.border.bottom.style = \"solid\",\n              column_labels.border.bottom.width = px(1), \n              column_labels.border.bottom.color = \"black\",\n              table.border.bottom.style = 'none',\n              source_notes.font.size = 10,\n              source_notes.border.lr.style = \"none\") %&gt;% \n  tab_header(\n    title = 'Who are the best road teams in college basketball?',\n    subtitle = \"10 highest T-Rank ratings in true road performances (D-1 vs. D-1)\"\n  ) %&gt;% \n  tab_source_note(\n    md(\"Data by cbbdata + cbbplotR through 2023-24&lt;br&gt;Table + Analysis by @andreweatherman\")\n  ) %&gt;% \n  opt_css(\n    '#table .gt_footnote {\n        padding-top: 2px !important;\n        padding-bottom: 2px !important;\n        line-height: 1;\n      }\n    #table .gt_heading {\n         padding-bottom: 0px;\n         padding-top: 6px\n        }\n      #table .gt_subtitle {\n         padding-top: 2px;\n         padding-bottom: 6px;\n      }\n      #table .gt_sourcenote {\n         text-align: right\n        }\n    '\n  ) %&gt;% \n  gtsave_extra('best_road_teams.png', zoom = 5)"
  },
  {
    "objectID": "viz/index.html",
    "href": "viz/index.html",
    "title": "Visualization Gallery",
    "section": "",
    "text": "Big Ten Football Schedule\n\n\n\ngt\n\n\ntutorial\n\n\ncollege football\n\n\n\nCreating non-traditional tables in gt\n\n\n\nMay 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBest Road Performance\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\nscraping\n\n\n\n…\n\n\n\nMay 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nBoxigami\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\ntutorial\n\n\n\n…\n\n\n\nMay 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTotal Wins in Rolling Windows\n\n\n\ngt\n\n\ncollege basketball\n\n\nscraping\n\n\ntutorial\n\n\n\nUh, a lot of gt hacking…\n\n\n\nMay 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTeam Game Performance\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\ntutorial\n\n\n\n…\n\n\n\nApr 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nNew Coaches vs. KenPom\n\n\n\ngt\n\n\ncollege basketball\n\n\ncbbdata\n\n\nscraping\n\n\ntutorial\n\n\n\nUsing custom functions in gt\n\n\n\nApr 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTrump Juror News Sources\n\n\n\ngt\n\n\nnew york times\n\n\ntutorial\n\n\n\nCreating non-traditional tables in gt\n\n\n\nApr 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html",
    "href": "viz/best-new-coaches/new-coaches.html",
    "title": "New Coaches vs. KenPom",
    "section": "",
    "text": "We will be making a table that plots preseason vs. final KenPom rating improvements for new head coaches.\n\n\n\n\n\n\nWarning\n\n\n\nTo build this table, you will need an active KenPom subscription and a cbbdata account. Follow these steps to link your KenPom account to cbbdata.\n\n\n\nFinal Table"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#the-data",
    "href": "viz/best-new-coaches/new-coaches.html#the-data",
    "title": "New Coaches vs. KenPom",
    "section": "The Data",
    "text": "The Data\nGrab The Data\nCoaching Changes\nThe first thing that we will need is a list of coaching changes by season. There are a few different places from which to grab this, but the most straightforward way is the ‘Coaching Changes’ page at barttorvik.\nThe data is presented in a static HTML table by year, so we will write a function with rvest and use purrr to loop over needed seasons (2012-2024).\n\n\n\n\n\n\nNote\n\n\n\nFor some reason, the Barttorvik site blocks requests originating from Windows devices. To get around this, we will use withr and set a custom user-agent.\n\n\n\nget_coaching_changes &lt;- function(year) {\n  \n  suppressWarnings({\n    withr::local_options(HTTPUserAgent='Not Windows')\n    read_html(glue(\"https://barttorvik.com/coaching_moves.php?year={year}\")) %&gt;% \n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(year = year) %&gt;% \n      select(team, year, new_coach)\n  })\n  \n}\n\nNow that we have our scraping function, let’s loop over it with map_dfr.\n\nall_changes &lt;- map_dfr(2012:2024, \\(year) get_coaching_changes(year))\n\nKenPom Ratings\nNext, we need preseason and year-end KenPom ratings, which is possible with the cbd_kenpom_ratings_archive function from cbbdata. Specifying adj_em[which.min(date)] will grab the KenPom rating associated with the first observed date (preseason) for each team and year, etc.\n\narchive &lt;- cbd_kenpom_ratings_archive() %&gt;% \n  filter(year &gt;= 2008) %&gt;% \n  summarize(\n    start_em = adj_em[which.min(date)],\n    end_em = adj_em[which.max(date)],\n    final_rank = adj_em_rk[which.max(date)],\n    .by = c(team, year)\n  ) %&gt;% \n  mutate(diff = end_em - start_em)\n\nSeason Record\nFor some added flair, let’s include team records too.\n\nteam_records &lt;- cbd_torvik_game_box() %&gt;%\n  summarize(\n    record = glue(\"{sum(result == 'W')}-{sum(result == 'L')}\"),\n    .by = c(team, year)\n  )\n\nCombine\nFinally, let’s combine our data and calculate the rating difference. All join functions in dplyr only work with two data frames. However, we can place everything inside of a list and use reduce.\n\ndata &lt;- list(all_changes, archive, team_records) %&gt;% \n  reduce(left_join, by = c(\"team\", \"year\"))\n\nWe’re only going to plot the 10 bets rating jumps.\n\ndata &lt;- data %&gt;% slice_max(diff, n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nteam\nyear\nnew_coach\nstart_em\nend_em\nfinal_rank\ndiff\nrecord\n\n\n\nWyoming\n2012\nLarry Shyatt\n-9.43\n8.05\n90\n17.48\n19-12\n\n\nMaryland Eastern Shore\n2015\nBobby Collins\n-20.12\n-3.33\n207\n16.79\n18-15\n\n\nNorthwestern St.\n2023\nCorey Gipson\n-19.49\n-3.28\n215\n16.21\n22-11\n\n\nTennessee Martin\n2015\nHeath Schroyer\n-14.01\n1.84\n148\n15.85\n19-13\n\n\nUtah St.\n2019\nCraig Smith\n-0.10\n15.41\n38\n15.51\n28-7\n\n\nPortland\n2022\nShantay Legans\n-16.25\n-0.89\n180\n15.36\n19-15\n\n\nCanisius\n2013\nJim Baron\n-9.61\n5.06\n116\n14.67\n20-14\n\n\nHigh Point\n2024\nAlan Huss\n-9.07\n5.33\n114\n14.40\n27-9\n\n\nTexas A&M Corpus Chris\n2022\nSteve Lutz\n-20.17\n-6.55\n245\n13.62\n23-12\n\n\nOhio St.\n2018\nChris Holtmann\n7.85\n21.23\n16\n13.38\n25-9\n\n\n\n\n\n\nPostseason Outcome\nThe final thing that we are going to include is a column on whether or not a team made the postseason (NCAA, NIT, CBI, etc.). The easiest way to do this is to scrape Sports Reference – which is why we’re adding this after we have combined our data and grabbed the 10 largest jumps.\nPostseason information can be found on a team’s schedule page for a given season. We can use cbd_teams to grab the needed team slugs.\n\nsr_ids &lt;- cbd_teams() %&gt;% select(team = common_team, sr_link)\ngrab_schedules &lt;- function(team, year) {\n  \n  Sys.sleep(3) # sleep for 501\n  \n  id &lt;- filter(sr_ids, team == !!team)$sr_link\n  slug &lt;- str_extract(id, \"(?&lt;=/schools/)[^/]+(?=/men)\") # regex to extract slug\n  url &lt;- glue(\"https://www.sports-reference.com/cbb/schools/{slug}/men/{year}-schedule.html\")\n  \n  read_html(url) %&gt;% \n    html_nodes(\"#schedule\") %&gt;% \n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    clean_names() %&gt;% \n    slice_tail(n = 1) %&gt;% \n    select(\"type\") %&gt;% \n    mutate(team = team, year = year)\n  \n}\n\nUse purrr to iterate over all teams and combine the data back\n\npostseason &lt;- map2_dfr(data$team, data$year, \\(team, year) grab_schedules(team, year))\n\ndata &lt;- left_join(data, postseason, by = c('team', 'year')) %&gt;% \n  mutate(type = ifelse(type == \"CTOURN\", \"---\", type))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nteam\nyear\nnew_coach\nstart_em\nend_em\nfinal_rank\ndiff\nrecord\ntype\n\n\n\nWyoming\n2012\nLarry Shyatt\n-9.43\n8.05\n90\n17.48\n19-12\nCBI\n\n\nMaryland Eastern Shore\n2015\nBobby Collins\n-20.12\n-3.33\n207\n16.79\n18-15\nCIT\n\n\nNorthwestern St.\n2023\nCorey Gipson\n-19.49\n-3.28\n215\n16.21\n22-11\n—\n\n\nTennessee Martin\n2015\nHeath Schroyer\n-14.01\n1.84\n148\n15.85\n19-13\nCIT\n\n\nUtah St.\n2019\nCraig Smith\n-0.10\n15.41\n38\n15.51\n28-7\nNCAA\n\n\nPortland\n2022\nShantay Legans\n-16.25\n-0.89\n180\n15.36\n19-15\nTBC\n\n\nCanisius\n2013\nJim Baron\n-9.61\n5.06\n116\n14.67\n20-14\nCIT\n\n\nHigh Point\n2024\nAlan Huss\n-9.07\n5.33\n114\n14.40\n27-9\nCBI\n\n\nTexas A&M Corpus Chris\n2022\nSteve Lutz\n-20.17\n-6.55\n245\n13.62\n23-12\nNCAA\n\n\nOhio St.\n2018\nChris Holtmann\n7.85\n21.23\n16\n13.38\n25-9\nNCAA\n\n\n\n\n\n\n Download a copy of the data"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#the-table",
    "href": "viz/best-new-coaches/new-coaches.html#the-table",
    "title": "New Coaches vs. KenPom",
    "section": "The Table",
    "text": "The Table\nStack Function\nTo make things cleaner, here is a function that will plot team logos and stack some additional text to the right using HTML.\n\ngt_cbb_stack &lt;- function(data, upper_text1, upper_text2, lower_text1, lower_text2, lower_text3, logo) {\n\n  data %&gt;%\n    mutate(stack = glue(\n        \"&lt;div style='display: flex; align-items: center;'&gt;\n           &lt;img src='{eval(expr({{logo}}))}' style='height: auto; width: 20px; padding-right: 5px;'&gt;\n           &lt;div&gt;\n             &lt;div style='line-height:14px;'&gt;&lt;span style='font-weight:bold;color:black;font-size:14px'&gt;{eval(expr({{upper_text1}}))}, {eval(expr({{upper_text2}}))}&lt;/span&gt;&lt;/div&gt;\n             &lt;div style='line-height:10px;'&gt;&lt;span style='font-weight:plain;color:grey;font-size:10px'&gt;{eval(expr({{lower_text1}}))} --  #{eval(expr({{lower_text2}}))}, {eval(expr({{lower_text3}}))}&lt;/span&gt;&lt;/div&gt;\n           &lt;/div&gt;\n         &lt;/div&gt;\"\n      )\n    )\n}\n\nTo use this, we need to add a column with team logo links. Then, let’s apply it.\n\ndata &lt;- data %&gt;% left_join(cbd_teams() %&gt;% select(team = common_team, espn_nickname, logo))\n\ndata &lt;- data %&gt;% gt_cbb_stack(new_coach, year, espn_nickname, final_rank, record, logo)\n\nColumn Header + Subheader Function\nIn late January, Todd Whitehead (Synergy) posted a table with cool column headers + subheaders. I really liked this design, which pairs very well with stacked cells, so I created a function to mimic this effect in gt. We’ll use it in our table too.\nThis function does a few things, but most notably, it creates an HTML string for the “stacked” effect, parses it using htmltools, and then sets it as the header using cols_label.\n\ngt_column_subheaders &lt;- function(gt_table, ...) {\n\n  subheaders &lt;- list(...)\n  all_col_names &lt;- colnames(gt_table[['_data']])\n\n  for (col_name in all_col_names) {\n\n    subtitle_info &lt;- subheaders[[col_name]] %||% list(subtitle = \"&nbsp;\", heading = col_name)\n    subtitle &lt;- subtitle_info$subtitle\n    new_header_title &lt;- subtitle_info$heading\n\nlabel_html &lt;- htmltools::HTML(glue(\n  \"&lt;div style='line-height: 1.05; margin-bottom: -2px;'&gt;\n    &lt;span style='font-size: 14px; font-weight: bold; color: black;'&gt;{new_header_title}&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span style='font-size: 10px; font-weight: normal; color: #808080;'&gt;{subtitle}&lt;/span&gt;\n  &lt;/div&gt;\"\n))\n\n    gt_table &lt;- gt_table %&gt;% \n      cols_label(!!sym(col_name) := label_html)\n  }\n  \n  gt_table\n}\n\n1) The Base Table\nHonestly, the code below outputs a pretty nice table, but there is definitely some room for improvement.\n\ndata %&gt;% \n  select(stack, type, start_em, end_em, diff) %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(stack) %&gt;% \n  cols_move_to_start(stack) %&gt;% \n  cols_align(columns = stack, 'left') %&gt;% \n  cols_align(columns = -stack, 'center')\n\n2) Applying Custom Column Function\nLet’s apply our custom gt_column_subheaders function. To relabel a column, you need to pass a list with heading and subheading.\n\n... %&gt;%\n  gt_column_subheaders(stack = list(heading = \"Coach and Year\",\n                                    subtitle = \"Team, Final Rank, and Record\"),\n                       type = list(heading = 'Post SZN',\n                                    subtitle = \"Tournament\"),\n                       start_em = list(heading = 'Pre',\n                                    subtitle = \"Rating\"),\n                       end_em = list(heading = 'End',\n                                    subtitle = \"Rating\"),\n                       diff = list(heading = 'Jump',\n                                    subtitle = \"End - Start\"))\n\n3) Table Borders\nTo give our table some more clarity and definition, we will add some borders around our cells.\n\n... %&gt;%\n  tab_style(locations = cells_body(columns = c(type, ends_with(\"em\"))), style = cell_borders()) %&gt;% \n  tab_style(locations = cells_body(columns = -ends_with(\"em\")), style = cell_borders(sides = \"bottom\")) %&gt;% \n  tab_style(locations = cells_body(rows = 1), style = cell_borders(sides = \"top\", weight = px(2))) %&gt;% \n  tab_style(locations = cells_body(columns = diff), style = cell_text(weight = 'bold')) \n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;%\n  tab_options(data_row.padding = 3.5,\n              source_notes.border.bottom.style = \"solid\",\n              source_notes.border.bottom.color = \"white\",\n              source_notes.font.size = 10) %&gt;% \n  tab_header(title = \"New coaches beating KenPom expectations\",\n             subtitle = md(\"The largest pre-season vs. year-end KenPom rating improvements&lt;br&gt;by new head coaches since 2012\")) %&gt;% \n  tab_source_note(md(\"Data by cbbdata + Sports Reference&lt;br&gt;Viz. + Analysis by @andreweatherman\"))\n\n5) Additional CSS\nFinally, let’s throw in some minor CSS changes. When using opt_css, it is important to reference the same table id that you created in gt(id = …).\nThe first two lines adjust the padding between the title and subtitles – “squishing” them together.\nThe third line targets the bottom border of the table. It creates the same effect as the tab_style that targeted the first row (black border at 2px weight).\n\n... %&gt;%\n    opt_css(\n    \"\n    #table .gt_heading {\n      padding-top: 6px;\n      padding-bottom: 0px;\n    }\n    #table .gt_subtitle {\n      padding-top: 2px;\n      padding-bottom: 6px;\n    }\n    #table tbody tr:last-child {\n    border-bottom: 2px solid #000000;\n    }\n    \"\n  )"
  },
  {
    "objectID": "viz/best-new-coaches/new-coaches.html#complete-script",
    "href": "viz/best-new-coaches/new-coaches.html#complete-script",
    "title": "New Coaches vs. KenPom",
    "section": "Complete Script",
    "text": "Complete Script\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(cbbdata)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(glue)\nlibrary(janitor)\n\n## functions ===\n\nget_coaching_changes &lt;- function(year) {\n  \n  suppressWarnings({\n    withr::local_options(HTTPUserAgent='Not Windows')\n    read_html(glue(\"https://barttorvik.com/coaching_moves.php?year={year}\")) %&gt;% \n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(year = year) %&gt;% \n      select(team, year, new_coach)\n  })\n  \n}\n\ngrab_schedules &lt;- function(team, year) {\n  \n  Sys.sleep(3) # sleep for 501\n  \n  id &lt;- filter(sr_ids, team == !!team)$sr_link\n  slug &lt;- str_extract(id, \"(?&lt;=/schools/)[^/]+(?=/men)\") # regex to extract slug\n  url &lt;- glue(\"https://www.sports-reference.com/cbb/schools/{slug}/men/{year}-schedule.html\")\n  \n  read_html(url) %&gt;% \n    html_nodes(\"#schedule\") %&gt;% \n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    clean_names() %&gt;% \n    slice_tail(n = 1) %&gt;% \n    select(\"type\") %&gt;% \n    mutate(team = team, year = year)\n  \n}\n\ngt_cbb_stack &lt;- function(data, upper_text1, upper_text2, lower_text1, lower_text2, lower_text3, logo) {\n\n  data %&gt;%\n    mutate(stack = glue(\n        \"&lt;div style='display: flex; align-items: center;'&gt;\n           &lt;img src='{eval(expr({{logo}}))}' style='height: auto; width: 20px; padding-right: 5px;'&gt;\n           &lt;div&gt;\n             &lt;div style='line-height:14px;'&gt;&lt;span style='font-weight:bold;color:black;font-size:14px'&gt;{eval(expr({{upper_text1}}))}, {eval(expr({{upper_text2}}))}&lt;/span&gt;&lt;/div&gt;\n             &lt;div style='line-height:10px;'&gt;&lt;span style='font-weight:plain;color:grey;font-size:10px'&gt;{eval(expr({{lower_text1}}))} --  #{eval(expr({{lower_text2}}))}, {eval(expr({{lower_text3}}))}&lt;/span&gt;&lt;/div&gt;\n           &lt;/div&gt;\n         &lt;/div&gt;\"\n      )\n    )\n}\n\ngt_column_subheaders &lt;- function(gt_table, ...) {\n\n  subheaders &lt;- list(...)\n  all_col_names &lt;- colnames(gt_table[['_data']])\n\n  for (col_name in all_col_names) {\n\n    subtitle_info &lt;- subheaders[[col_name]] %||% list(subtitle = \"&nbsp;\", heading = col_name)\n    subtitle &lt;- subtitle_info$subtitle\n    new_header_title &lt;- subtitle_info$heading\n\nlabel_html &lt;- htmltools::HTML(glue(\n  \"&lt;div style='line-height: 1.05; margin-bottom: -2px;'&gt;\n    &lt;span style='font-size: 14px; font-weight: bold; color: black;'&gt;{new_header_title}&lt;/span&gt;\n    &lt;br&gt;\n    &lt;span style='font-size: 10px; font-weight: normal; color: #808080;'&gt;{subtitle}&lt;/span&gt;\n  &lt;/div&gt;\"\n))\n\n    gt_table &lt;- gt_table %&gt;% \n      cols_label(!!sym(col_name) := label_html)\n  }\n  \n  gt_table\n}\n\n## code ===\n\nall_changes &lt;- map_dfr(2012:2024, \\(year) get_coaching_changes(year))\n\narchive &lt;- cbd_kenpom_ratings_archive() %&gt;% \n  filter(year &gt;= 2008) %&gt;% \n  summarize(\n    start_em = adj_em[which.min(date)],\n    end_em = adj_em[which.max(date)],\n    final_rank = adj_em_rk[which.max(date)],\n    .by = c(team, year)\n  ) %&gt;% \n  mutate(diff = end_em - start_em)\n\nteam_records &lt;- cbd_torvik_game_box() %&gt;%\n  summarize(\n    record = glue(\"{sum(result == 'W')}-{sum(result == 'L')}\"),\n    .by = c(team, year)\n  )\n\ndata &lt;- list(all_changes, archive, team_records) %&gt;% \n  reduce(left_join, by = c(\"team\", \"year\")) %&gt;% \n  slice_max(diff, n = 10)\n\nsr_ids &lt;- cbd_teams() %&gt;% select(team = common_team, sr_link)\n\npostseason &lt;- map2_dfr(data$team, data$year, \\(team, year) grab_schedules(team, year))\n\ndata &lt;- left_join(data, postseason, by = c('team', 'year')) %&gt;% \n  mutate(type = ifelse(type == \"CTOURN\", \"---\", type)) %&gt;% \n  left_join(cbd_teams() %&gt;% select(team = common_team, espn_nickname, logo)) %&gt;% \n  gt_cbb_stack(new_coach, year, espn_nickname, final_rank, record, logo)\n\n## table ===\n\ntable &lt;- data %&gt;% \n  select(stack, type, start_em, end_em, diff) %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(stack) %&gt;% \n  cols_move_to_start(stack) %&gt;% \n  cols_align(columns = stack, 'left') %&gt;% \n  cols_align(columns = -stack, 'center') %&gt;% \n  gt_column_subheaders(stack = list(heading = \"Coach and Year\",\n                                  subtitle = \"Team, Final Rank, and Record\"),\n                     type = list(heading = 'Post SZN',\n                                  subtitle = \"Tournament\"),\n                     start_em = list(heading = 'Pre',\n                                  subtitle = \"Rating\"),\n                     end_em = list(heading = 'End',\n                                  subtitle = \"Rating\"),\n                     diff = list(heading = 'Jump',\n                                  subtitle = \"End - Start\")) %&gt;% \n  tab_style(locations = cells_body(columns = c(type, ends_with(\"em\"))), style = cell_borders()) %&gt;% \n  tab_style(locations = cells_body(columns = -ends_with(\"em\")), style = cell_borders(sides = \"bottom\")) %&gt;% \n  tab_style(locations = cells_body(rows = 1), style = cell_borders(sides = \"top\", weight = px(2))) %&gt;% \n  tab_style(locations = cells_body(columns = diff), style = cell_text(weight = 'bold')) %&gt;% \n  tab_options(data_row.padding = 3.5,\n              source_notes.border.bottom.style = \"solid\",\n              source_notes.border.bottom.color = \"white\",\n              source_notes.font.size = 10) %&gt;% \n  tab_header(title = \"New coaches beating KenPom expectations\",\n             subtitle = md(\"The largest pre-season vs. year-end KenPom rating improvements&lt;br&gt;by new head coaches since 2012\")) %&gt;% \n  tab_source_note(md(\"Data by cbbdata + Sports Reference&lt;br&gt;Viz. + Analysis by @andreweatherman\")) %&gt;% \n  opt_css(\n    \"\n    #table .gt_heading {\n      padding-top: 6px;\n      padding-bottom: 0px;\n    }\n    #table .gt_subtitle {\n      padding-top: 2px;\n      padding-bottom: 6px;\n    }\n    #table tbody tr:last-child {\n    border-bottom: 2px solid #000000;\n    }\n    \"\n  )\n\n## save ===\n\ngtsave_extra(table, \"final_table.png\", zoom = 5)"
  },
  {
    "objectID": "r-resources/index.html",
    "href": "r-resources/index.html",
    "title": "R Resources",
    "section": "",
    "text": "ggplot2 (graphs)\nTutorials/E-Books\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1"
  },
  {
    "objectID": "r-resources/index.html#e-books",
    "href": "r-resources/index.html#e-books",
    "title": "R Resources",
    "section": "",
    "text": "ggplot2: Elegant Graphics for Data Analysis by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen\n\nA detailed introduction to ggplot2 and its syntax/grammar. An excellent starting point to better understand the package as a beginner.\n\n\n\nR Graphics Cookbook, 2nd edition by Winston Chang\n\nIncludes more than 150 code snippets for basic ggplot2 examples.\n\n\n\nData Visualization: A Practical Introduction by Kieran Healy\n\nTeaches the principles of effective data visualization, a brief introduction to ggplot2, and includes a nice focus on creating maps in R."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "I live in Durham, North Carolina, and graduated from Duke University with a degree in public policy in 2023.\nAt Duke, I was a student manager for the men’s basketball team under head coaches Mike Krzyzewski and Jon Scheyer.\nI work in R for a living, but my passions extend far beyond the office. I am an active contributor to the open-source community, authoring both the cbbdata and cbbplotR packages.\nI am a firm believer in democratizing code and data. I hope that this site and its contents provide inspiration and learning."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 quantumjitter Carl Goodwin\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "viz/acc-window-wins/window-wins.html",
    "href": "viz/acc-window-wins/window-wins.html",
    "title": "ACC Wins in Decade Windows",
    "section": "",
    "text": "In early May 2024, JFreshHockey posted a visualization showing the top five regular season teams, by wins, in 10-season windows. …\n…"
  },
  {
    "objectID": "viz/acc-window-wins/window-wins.html#the-data",
    "href": "viz/acc-window-wins/window-wins.html#the-data",
    "title": "ACC Wins in Decade Windows",
    "section": "The Data",
    "text": "The Data\nGrab The Data\nFor our visualization, we will be looking at ACC performance between inception (1954) and 2024. There are a few ways to pull this data using Sports Reference, but to keep things free, we will be scraping individual ACC pages and not using Stathead (paid).\nWe can grab conference record by-year with rvest by iterating through https://www.sports-reference.com/cbb/conferences/acc/men/{YEAR}.html. The data is stored in static tables, so a simple html_table function should do the trick here.\nUsing the SelectorGadget tool, we can find the tag associated with the standings table on every page.\n\nSelectorGadget\n\n\n\n\n\n\n\n\nUsing a simple loop, we can grab per-season conference wins and losses.\n\nacc_results &lt;- map_dfr(1954:2024, \\(year) {\n  Sys.sleep(3) # for 501 error\n\n  read_html(glue(\"https://www.sports-reference.com/cbb/conferences/acc/men/{year}.html\")) %&gt;%\n    html_nodes(\"#standings\") %&gt;% # target standings\n    html_table() %&gt;% # get table\n    pluck(1) %&gt;% # pluck from list\n    row_to_names(1) %&gt;% # first row are col. names\n    clean_names() %&gt;%\n    mutate(year = year,\n           across(w:l, as.numeric)) %&gt;%\n    select(team = school, wins = w, losses = l, notes, year)\n}, .progress = 'Getting data')\n\nCalculate the Windows\nThere are a few ways to do this, but for our example, I’m going to write a separate function to loop over. This function takes a data frame and a starting year. It then filters between that starting year and ten years in the future (between) to grab 10-year “windows.” For each team, denoted with .by inside summarize, it calculates total wins, total losses, and win percentage (we only need total wins, but I decided to grab more data in case you want to plot something else).\n\ncalculate_windows &lt;- function(start_year, data) {\n  data %&gt;%\n    filter(between(year, start_year, start_year + 9)) %&gt;% \n    summarize(\n      total_wins = sum(wins),\n      total_losses = sum(losses),\n      win_percentage = total_wins / (total_wins + total_losses),\n      .by = team\n    ) %&gt;%\n    mutate(years = paste(start_year, start_year + 9, sep=\"-\"),\n           begin = start_year,\n           end = start_year + 9)\n}\n\nWe can, again, use purrr to apply our iteration. We want to loop over the first year of the ACC’s existence (min(acc_results)$year) and the last observed year minus nine (to capture the final “complete” window).\n\nacc_windows &lt;- map_dfr(min(acc_results$year):(max(acc_results$year) - 9),\n                       ~calculate_windows(.x, acc_results))\n\nFinally, let’s choose the five winningest teams over each window.\n\nplot_data &lt;- acc_windows %&gt;% \n  slice_max(total_wins, n = 5, by = years, with_ties = FALSE) %&gt;% \n  group_by(years) %&gt;% \n  arrange(desc(total_wins), desc(win_percentage), .by_group = TRUE) %&gt;% \n  mutate(position = row_number()) %&gt;% \n  ungroup()\n\nPrepare for plotting\nConditional highlighting\nIn our table, we want to highlight each team who won an ACC conference championship during the window in question. “Highlighting” cells in gt is a bit weird because tab_style + cell_fill does not really work as one might expect.\nNamely, row and column vectors are not treated as separate pairs. If you pass through, e.g. rows = c(1, 2) and columns = c(5, 6) inside tab_style, you’ll fill four cells, not two, because tab_style doesn’t treat things as unique pairs.\nTurns out, you can just build the CSS string for highlighting cells outside of the table and apply it directly with opt_css.\nOkay, so how do we do that? First, let’s extract tournament champions from the acc_results table.\n\nchampions &lt;- acc_results %&gt;% \n  filter(grepl(\"Conf.\", notes)) %&gt;% # filter for champions \n  select(team, year)\n\nNow, let’s join that information over to plot_table by creating a new “indicator” column. We will use any to search through our champions table to find whether a match exists (i.e. a team won a conference championship during the begin-end window).\n\nplot_data &lt;- plot_data %&gt;% \n  rowwise() %&gt;% \n  mutate(champ_win = any(champions$team == team & champions$year &gt;= begin & champions$year &lt;= end)) %&gt;% \n  ungroup()\n\nThen, let’s pivot our data to a wide format and replace team names with logos. A nifty way to keep our champ_win data is to wrap our logos around an img tag and include an alt tag that refers to champ_win. This is a harmless way of keeping that data in our pivoted frame without adding more columns.\nWe can add team logos by creating a named vector using cbd_logos from cbbdata.\n\nlogos &lt;- cbd_teams() %&gt;% select(team = sr_team, logo)\nlogos &lt;- logos %&gt;% pull(logo) %&gt;% rlang::set_names(logos$team)\n\n\nplot_data &lt;- plot_data %&gt;% \n  mutate(team = glue(\"&lt;img src='{logos[team]}' alt={champ_win} style='height:30px; vertical-align:middle;'&gt;\")) %&gt;% \n  pivot_wider(id_cols = begin:end, names_from = position, values_from = team)\n\n\n\nmy_gt &lt;- function(x) {\n  gt(x) %&gt;% \n    fmt_markdown(-c(begin:end))\n}\n\n\ntables &lt;- gt_double_table(plot_data, my_gt, nrows = nrow(plot_data) / 2)\n\n\ngt_two_column_layout(tables)"
  },
  {
    "objectID": "viz/game-performance/game-performance.html",
    "href": "viz/game-performance/game-performance.html",
    "title": "Team Game Performance",
    "section": "",
    "text": "We will be creating a neat game performance table, highlighting team-wide four factors on a game-by-game basis. For brevity, I’m only going to plot conference games, but you can plot whichever subset of games that you’d like.\n\nWhat we will be creating"
  },
  {
    "objectID": "viz/game-performance/game-performance.html#the-data",
    "href": "viz/game-performance/game-performance.html#the-data",
    "title": "Team Game Performance",
    "section": "The Data",
    "text": "The Data\nGame Stats and NET\nThe most important piece of our table, evidently, is game data. We are plotting “Four Factors,” which is a group of statistics defined by Dean Oliver as integral to winning basketball games. It’s a decades-old concept that has held true against the test of time. Using cbbdata, we can quickly get these data on a per-game level (caveat: D-1 vs. D-1 games only).\nWe also want to include the score of the game, and we can use the `glue package to build the score by concatenate two columns. We are also going to adjust our game date to be more readable.\nFinally, we want to include NET rankings and quadrant boundaries. As hinted earlier, the new update to cbbdata includes a function to do this for us. If you are not familiar with the NET or quadrants, you can learn more here.\nSince we are plotting Duke’s performance, we only need to request the Blue Devils’ game results. If you wish to plot another team (or year), remember to switch out all instances of Duke for your own team (or year). The process is the same.\n\nfactors_net &lt;- cbd_torvik_game_stats(year = 2024, team = 'Duke', type = 'conf') %&gt;% \n    arrange(date) %&gt;%\n    cbd_add_net_quad() %&gt;%\n    mutate(score = glue('{pts_scored}-{pts_allowed}'),\n           date = format(date, '%b. %e'))  %&gt;% \n    select(date, result, opp, score, off_ppp, off_efg,\n           off_to, off_or, off_ftr, def_ppp, def_efg, def_to,\n           def_or, def_ftr, game_score, net, quad)\n\nRelative Performance\nBarttorvik includes a neat stat called Game Score. Game score can be thought of as a composite look at how well your team played in a given game. In a nutshell, game score is a per-game Barthag rating, which — while typically viewed across the aggregate where it down-weights mismatches — is an estimation of a team’s winning chances vs. the average team on a neutral floor. Game score is judged on a [0, 100] scale and is positive (scores closer to 100 are better).\nWith this information, we can create a data column that says, “In this game, my team played similar to how the T-Rank #X team would be expected to play against the same opponent.” Another appropriate interpretation would be a quick view of team consistency; this can be judged by looking at both the game_score column and our new one. Obviously, game score is pretty volatile at a per-game level, but it’s still nice to look at.\nTo do this, we need to create a function that pulls the closest current national ranking that corresponds to that game score.\n\nfind_closest_rank &lt;- function(scores) {\n  map_int(scores, function(score) {\n    differences &lt;- abs(ratings$barthag - score / 100)\n    closest_index &lt;- which.min(differences)\n    ratings$barthag_rk[closest_index]\n  })\n}\n\nratings &lt;- cbd_torvik_ratings(year = 2024) # get current rankings\n\nNow, we can apply it to our data\n\nfactors_net &lt;- factors_net %&gt;% \n  mutate(closest_rank = find_closest_rank(game_score))\n\nKenPom Rankings\nFinally, we want to include KenPom rankings in our table.\n\ncurrent_kp &lt;- cbd_kenpom_ratings(year = 2024) %&gt;% \n  select(opp = team, rank = rk)\n\nfactors_net &lt;- left_join(factors_net, current_kp, by = 'opp')"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html",
    "href": "viz/nyt-trump-jurors/trump-jurors.html",
    "title": "Trump Juror News Sources",
    "section": "",
    "text": "On April 19th, 2024, the New York Times published an article with a visualization that detailed from which “outlets” jurors in the “Trump Hush-Money” trial turn to for their news consumption. I thought it would be a fun exercise to recreate it using the {gt} package.\nYou can use the toggles below to view the original table from the New York Times and our table using gt.\n\nOriginal Table\n\n\n\n\n\n\n\n\n\nOur Table"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#the-data",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#the-data",
    "title": "Trump Juror News Sources",
    "section": "The Data",
    "text": "The Data\nGrab the data\nTypically, I try my best to find and scrape the original data source. But unfortunately, perhaps for security reasons, I could not locate the juror reponses to the screening questionnaire. So instead, I hard coded the data as a .CSV.\nGrab the data with this:\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njuror\nBBC\nCNBC\nCNN\nThe Daily Mail\nFacebook\nFox News\nGoogle\nMSNBC\nReuters\nThe New York Post\nThe New York Times\nNY1\nTikTok\nTruth Social\nUSA Today\nThe Wall Street Journal\nThe Washington Post\nWNYC\nX\n\n\n\n1\nNA\nNA\nNA\n1\nNA\n1\nNA\n1\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\n1\n\n\n3\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\n\n\n4\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n5\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n6\nNA\nNA\nNA\nNA\n1\nNA\n1\nNA\nNA\nNA\n1\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\nManipulate the data\nFor exercise, I left us with a few required manipulations:\n1) Transpose the data\nOur data file is in a wide format relative to publication, but our table requires the jurors to be the column names. There are a number of ways to essentially “swap” rows and columns, and we are going to use the transpose function from data.table and specify keep.names to retain our column headers. Our headers, actually, are located in the first row of our table, so we will use row_to_names from janitor to “shift” everything up one row. Finally, let’s convert this back to a tibble and rename the first column.\n\ndata &lt;- data %&gt;% \n  transpose(keep.names = \"news\") %&gt;% \n  row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\nBBC\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\n\n\nCNBC\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nCNN\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nThe Daily Mail\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nFacebook\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\nNA\nNA\nNA\n\n\nFox News\n1\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\n2) Create the boxes\nThis is the “trickiest” part of the visualization. There are probably a multitude of ways to go about this, but to plot the boxes in each cell, I am using an inline block, with equal height and width.\nFirst, you will notice that the table labels each juror number in the first row, but it resets the “counter” after the 12th juror (13-18 are “alternates”). To handle this, we need to create a “display number” that that follows the same logic. Since our column headers are the juror numbers, we can simply refer to it using the cur_column function.\nNext, our values are NA if the juror does not utilize that news “source,” so we can set that color to a light grey and use a yellow when the cell is not NA (does use it).\nFinally, the “trickiest” part is to create an HTML string that builds the box. If you don’t know HTML or CSS, that’s okay, you can still follow along; the code is pretty intuitive.\n\nThe “inline block” creates a small square with the height and width specified in the string.\nIt is filled with the background-color referenced above.\nThe shorthand margin property first sets the top and bottom margins and then the left and right margins. Having smaller left and right margins will make the boxes appear closer together.\nThe text (and boxes) are then centered, set at a 12px font size, and bolded (which the original table does not do).\n\n\ndata &lt;- data %&gt;% \n   mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }))\n\n3) Separator\nIn the original table, there is a small gap to separate the jurors from the alternates. We can mimic this same effect by creating a dummy column after our above mutations and then place it after the 13th column (the 12th and final juror).\n\ndata &lt;- data %&gt;% mutate(blank = '', .after = 13)"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#the-table",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#the-table",
    "title": "Trump Juror News Sources",
    "section": "The Table",
    "text": "The Table\nMost of our table can be created with stock gt functions, but we will need to add minimal CSS to top it off.\n1) The Base Table\nThe “base” of our table will be created using fmt_markdown to render our HTML strings and gt_theme_nytimes to closely mirror the look of the original table. Importantly, we add an arbitrary “id” for later use with opt_css.\n\ndata %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank))\n\n2) Handling the Separator Column\nTo create the separation effect, we will need to relabel our column and adjust its width.\n\n... %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15))\n\n3) Column Labels\nThe original table does not have “traditional” column headers; instead, they appear to column spanners, which we can create with tab_spanner. To really drive home this effect, we’re going to need some CSS at the end. But for now, let’s add the column spanners, align them to the left, and make them a light grey.\n\n... %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\"))\n\n4) Table Annotations + Options\nLet’s add our title and caption. We will also tweak our caption font size, force the line below the caption to white (not sure why this theme doesn’t do it by default), and compress our rows.\n\n... %&gt;% \n  tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12)\n\n5) Additional CSS\nTo make our column spanners look like headers – creating the spanner-header effect in the original table – we need some light css. When using opt_css, it is important to reference the same table id that you created in gt(id = ...).\nThe first line hides the column headers and sets their position to “relative,” allowing our spanners to “drop” in their place.\nThe second line “drops” our spanners with position: absolute, makes them visible, and adds some minor padding. Our spanners are already aligned left, done in step three, but remember that our boxes have slight left-right margins, so by default, our spanners look misaligned. We can “push” them to the right with padding-left: 3px.\n\n... %&gt;% \n   opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )"
  },
  {
    "objectID": "viz/nyt-trump-jurors/trump-jurors.html#complete-script",
    "href": "viz/nyt-trump-jurors/trump-jurors.html#complete-script",
    "title": "Trump Juror News Sources",
    "section": "Complete Script",
    "text": "Complete Script\nThe complete code is below. There is a copy button for convenience in the top right of the code chunk.\n\ndata &lt;- read_csv(\"https://gist.github.com/andreweatherman/8dde2049840d0a27a4ef2a3bef4bdd8f/raw/74e70fdaea6777463521c433f179d6962a93eca5/juror_news.csv\")\n\ntable &lt;- data %&gt;% \n  data.table::transpose(keep.names = \"news\") %&gt;% \n  janitor::row_to_names(1) %&gt;% \n  as_tibble() %&gt;% \n  rename(\"source\" = \"juror\") %&gt;% \n  mutate(across(-source, ~{\n     \n    display_number &lt;- ifelse(row_number() == 1, \n                             ifelse(as.numeric(cur_column()) &gt; 12, as.numeric(cur_column()) - 12, cur_column()),\n                             NA)\n\n    color &lt;- ifelse(is.na(.x), \"#EEEEEE\", \"#FCCF10\")\n\n    glue(\"&lt;span style='display:inline-block; width:20px; height:20px; line-height:20px; background-color: {color}; vertical-align:middle; margin:4px 1px; font-size: 12px; font-weight: bold; text-align:center;'&gt;{ifelse(!is.na(display_number), display_number, '')}&lt;/span&gt;\")\n  }),\n  blank = '', .after = 13) %&gt;% \n  gt(id = \"table\") %&gt;% \n  gt_theme_nytimes() %&gt;% \n  fmt_markdown(-c(source, blank)) %&gt;% \n  cols_label(blank = \"\") %&gt;% \n  cols_width(blank ~ px(15)) %&gt;% \n  tab_spanner(columns = 1, label = \"Source\") %&gt;% \n  tab_spanner(columns = 2:13, label = \"Jurors\") %&gt;% \n  tab_spanner(columns = 15:20, label = \"Alternates\") %&gt;% \n  tab_style(locations = cells_column_spanners(),\n            style = cell_text(align = \"left\", size = px(16), color = \"#7E7E7E\")) %&gt;% \n    tab_header(title = \"Where the jurors in the Trump hush-money trial say they get their news\") %&gt;% \n  tab_source_note(md(\"Data and original table by New York Times&lt;br&gt;Recreation in R by @andreweatherman\")) %&gt;% \n    tab_options(data_row.padding = 1,\n                source_notes.border.bottom.style = \"solid\",\n                source_notes.border.bottom.color = \"white\",\n                source_notes.font.size = 12) %&gt;% \n     opt_css(\n    css = \"\n      #table .gt_col_headings {\n        visibility: hidden;\n        position: relative;\n      }\n      #table .gt_column_spanner {\n        position: absolute;\n        visibility: visible;\n        padding-left: 3px;\n      }\n    \"\n  )\n\n## saving the table\ngtsave_extra(table, \"trump_jurors_news.png\", zoom = 12)"
  },
  {
    "objectID": "viz/window-wins/window-wins.html",
    "href": "viz/window-wins/window-wins.html",
    "title": "Total Wins in Rolling Windows",
    "section": "",
    "text": "Note\n\n\n\nFair warning: This code involves quite a bit of “hacking around.” Building HTML and CSS strings, adapting non-exported gtExtras functions, leveraging htmltools to splice everything together, etc. If anything, I hope some of my esoteric nonsense might prove useful in your own endeavors. If you’re a beginner, please look at some other gt tutorials as to not get discouraged! The package is wonderful and intuitive…except when it isn’t."
  },
  {
    "objectID": "viz/window-wins/window-wins.html#the-data",
    "href": "viz/window-wins/window-wins.html#the-data",
    "title": "Total Wins in Rolling Windows",
    "section": "The Data",
    "text": "The Data\nGrab The Data\nWe need to grab per-season win totals from 1980 to 2024. There are a few ways to pull this data, but to keep things open and free, we will scrape individual season pages on Sports Reference and not use a paid source like Stathead.\nWe can grab season record by-year with rvest by iterating through https://www.sports-reference.com/cbb/seasons/men/{YEAR}-ratings.html. The data is stored in static tables, so a simple html_table function should do the trick here.\nUsing the SelectorGadget tool, we can find the tag associated with the standings table on every page.\n\nSelector Gadget\n\n\n\n\n\n\n\n\nUsing a simple loop, we can grab per-season conference wins and losses. Here, we hit the ratings page, scrape the static table, “lift” it from the resulting list, and do some basic data manipulation.\n\n\n\n\n\n\njanitor functions when scraping\n\n\n\nIf you’re relatively new to web scraping in R, take note of the row_to_names and clean_names functions (both from the janitor package). If the column names of your data are stored in some row in the returned frame, row_to_names will elevate that row to be the column names. You’ll routinely find that your column headers are stored in the first or second row when scraping Sports Reference.\nclean_names “standardizes” your column names, which is sometimes just a nice touch and other times a necessity. Actually, if you remove that line from the function below, you’ll run into an error because the resulting tibble has a few columns with empty names. You won’t be able to do any mutate or filter. It’s recommended to run clean_names after row_to_names. (It’s my opinion that row_to_names should have an optional argument to do this without needing a separate call.)\n\n\n\nseason_results &lt;- map_dfr(1980:2024, \\(year) {\n  Sys.sleep(3) # for 501 error\n\n  suppressWarnings({\n    read_html(glue(\"https://www.sports-reference.com/cbb/seasons/men/{year}-ratings.html\")) %&gt;%\n      html_nodes(\"#ratings\") %&gt;% # target standings\n      html_table() %&gt;% # get table\n      pluck(1) %&gt;% # pluck from list\n      row_to_names(1) %&gt;% # first row are col. names\n      clean_names() %&gt;%\n      mutate(year = year,\n             across(w:l, as.numeric)) %&gt;% # convert w and l to numeric\n      filter(!is.na(w)) %&gt;% # remove non-team rows\n      select(team = school, wins = w, losses = l, year)\n  })\n  \n}, .progress = 'Getting data')\n\nThis code will take around two to three minutes to run. Alternatively, you can download a copy of the data below.\n Download a copy of season_results \nCalculate the Windows\nThere are a few ways to apply a function, i.e. summing things, over a rolling window. zoo::rollapply is a nice method, and the slider package provides some useful functionality.\nBut, I’m going to do it a bit differently and write a function to loop over. I’m doing this because it’s, in my opinion, the most intuitive and accessible approach. All I’m using is basic dplyr functions.\nThis function takes a data frame and a starting year. It then filters between that starting year and nine years into the future, using between, to grab 10-year “windows.” For each team, denoted with .by inside summarize, it calculates total wins, total losses, and win percentage (we only need total wins, but I decided to grab more data in case you want to plot something else).\n\n\n\n\n\n\nEasier grouping with .by in dplyr\n\n\n\ndplyr v1.1.0 brought per-operation grouping with .by/by. This released in early 2023, but for some reason, I still see a lot of people unnecessarily using group_by.\nIn several dplyr functions, including summarize, mutate, and filter, you can specify a grouping level that is only active within that verb – meaning there is no need to use group_by + ungroup!\nThere are some nuances to this, and you can read more about them here.\n\n\n\ncalculate_windows &lt;- function(start_year, data) {\n  data %&gt;%\n    filter(between(year, start_year, start_year + 9)) %&gt;% \n    summarize(\n      total_wins = sum(wins),\n      total_losses = sum(losses),\n      win_percentage = total_wins / (total_wins + total_losses),\n      seasons = n(),\n      .by = team\n    ) %&gt;%\n    mutate(years = paste(start_year, start_year + 9, sep=\"-\"),\n           begin = start_year,\n           end = start_year + 9)\n}\n\nWe can, again, use purrr to iterate over our function. We want to loop over the beginning of our sequence (1980) to the last observed year minus nine (2024 - 9 = 2015). This ensures that we capture the final complete window.\n\nseason_windows &lt;- map_dfr(1980:2015, ~calculate_windows(.x, season_results))\n\nFinally, let’s choose the five winningest teams over each window. We are breaking ties by highest win percentage, so we need to specify desc(win_percentage) as our second argument inside arrange and then take the first five rows in each window.\n\nplot_data &lt;- season_windows %&gt;% \n  group_by(years) %&gt;% # arrange does not support per-operation grouping\n  arrange(desc(total_wins), desc(win_percentage), .by_group = TRUE) %&gt;% # ignores grouping by default\n  slice_head(n = 5) %&gt;% \n  mutate(position = row_number()) %&gt;% # need position value for plotting\n  ungroup()\n\nNational titles\nBelow, we’re going to talk about how to fill gt cells based on some condition, and that will require us to pull national championship winners. For consistency, since this section is about “data,” I’ll just include that code here.\n\nchamps &lt;- read_html('https://www.sports-reference.com/cbb/seasons/') %&gt;% \n  html_nodes(\"#seasons_NCAAM\") %&gt;% \n  html_table() %&gt;% \n  pluck(1) %&gt;% \n  clean_names() %&gt;% \n  mutate(year = parse_number(tournament)) %&gt;% \n  select(year, team = ncaa_champion) %&gt;% \n  filter(year &gt;= 1954 & year != 2020)\n\nWe are going to adapt the calculate_windows function from above to do the same thing with number of championships.\n\ncalculate_titles &lt;- function(start_year, data) {\n  data %&gt;%\n    filter(between(year, start_year, start_year + 9)) %&gt;% \n    summarize(\n      total_titles = n(),\n      .by = team\n    ) %&gt;%\n    mutate(years = paste(start_year, start_year + 9, sep=\"-\"),\n           begin = start_year,\n           end = start_year + 9)\n}\n\nLet’s apply that in a similar fashion to calculate_windows. We’re also going to change the numeric counts of total_titles to a general categorical variable to assist in plotting.\n\nchamps &lt;- map_dfr(1980:2024, ~calculate_titles(.x, champs)) %&gt;% \n  mutate(total_titles = ifelse(total_titles == 1, '1', '2+')) %&gt;% \n  select(team, total_titles, years)\n\nLet’s join that information over to plot_data. Teams that are not present inside champs will show as NA. We will fill these with 0s.\n\nplot_data &lt;- plot_data %&gt;% \n  left_join(champs, by = c('team', 'years')) %&gt;% \n  mutate(total_titles = replace_na(total_titles, '0'))"
  },
  {
    "objectID": "viz/window-wins/window-wins.html#plotting",
    "href": "viz/window-wins/window-wins.html#plotting",
    "title": "Total Wins in Rolling Windows",
    "section": "Plotting",
    "text": "Plotting\nBuilding the table\nThe table itself is actually pretty simple. There isn’t much gt going here. Because we are building a two-column layout, we should define a function to build our table.\nIt’s important that we are slicing the right data for each “side” of the table, and the split line does exactly that. Next, we loop over the generate_css function that we created earlier, and we push the output into a single string with unlist and paste.\nFinally, we build the table. Again, not too much going on here. The gt_theme_athletic function from cbbplotR does a lot of the styling for us. We use fmt_markdown to render our HTML strings, adjust the column headers, add column spanners, and render our title. Importantly, we need to add a placeholder for our table caption – more on that later. We add the conditional highlighting CSS with opt_css. We then loop over this table function to create a list of tables.\n\n\n\n\n\n\nWarning\n\n\n\nFor two-column layouts with independent CSS rules, it’s vital that we define a table ID and pass that to our generate_css function. If you don’t do that, and summarily remove {#css_id} from the glue statement in the function itself, only one set of CSS rules will apply to both tables.\n\n\n\nbuild_table &lt;- function(data, split_level, css_id) {\n  \n  split &lt;- if(split_level == 1) data %&gt;% slice(1:(nrow(.) / 2)) else data %&gt;% slice(floor(nrow(.) / 2) + 1:nrow(.))\n  \n  # map over patterns and colors to generate CSS\n  css_rules &lt;- map2(\n    patterns_colors$pattern,\n    patterns_colors$color,\n    ~generate_css(split, css_id, .x, .y)\n  )\n\n  # combine all CSS rules into one string\n  combined_css &lt;- css_rules %&gt;% unlist() %&gt;% paste(collapse = \"\\n\")\n    \n  table &lt;- split %&gt;% \n    gt(id = css_id) %&gt;% \n    gt_theme_athletic() %&gt;% \n    fmt_markdown(-years) %&gt;% \n    tab_style(locations = cells_column_labels(), style = cell_text(weight = 'bold', size = px(13))) %&gt;% \n    tab_style(locations = cells_title(\"title\"), style = cell_text(size = px(20))) %&gt;%\n    tab_spanner(columns = -years, label = \"Best Win% in Window\") %&gt;% \n    tab_header(html(full_header_html)) %&gt;% \n    tab_source_note(\"placeholder\") %&gt;% \n    opt_css(combined_css)\n  \n  return(table)\n  \n}\n\n# loop over to create two tables\ntables &lt;- list(build_table(plot_data, 1, 'first'), build_table(plot_data, 2, 'second'))\n\nPutting the tables together\ngtExtras ships with a convenient function to create a two-column layout, gt_two_column_layout, but this doesn’t work well with our HTML title – so we can’t use that. Doing some digging, I was able to recreate that effect in a way that works for us.\nFirst, let’s handle another issue that arises when using gt_two_column_layout: table captions (source notes). The latter uses an unexported function from gtExtras to extract a table title + subtitle, its class, and its style to then pass through to htmltools when rendering the table.\nI took that function and reworked it to do the same thing for source notes. Remember that placeholder caption? Well, the reason we included one was to access its styles.\n\nextract_source_note &lt;- function(table) {\n  raw_html &lt;- as_raw_html(table) %&gt;%\n    read_html()\n  \n  gt_source_note &lt;- raw_html %&gt;%\n    xml_find_first(\"//*[contains(concat(' ',normalize-space(@class),' '),' gt_sourcenote ')]\")\n  \n  gt_table_id &lt;- raw_html %&gt;%\n    xml_find_all(\"//body/div\") %&gt;%\n    xml_attr(\"id\")\n  \n  s &lt;- raw_html %&gt;%\n    xml_find_first(\"//style\") %&gt;%\n    xml_contents() %&gt;%\n    xml_text() %&gt;%\n    gsub(gt_table_id, \"mycombinedtable\", x = .) %&gt;%\n    gsub(\"mycombinedtable table\", \"mycombinedtable div\", x = .)\n  \n  list(\n    source_note = gtExtras:::xml_missing(gt_source_note),\n    source_note_class = paste(\"gt_table\", xml_attr(gt_source_note, \"class\")),\n    source_note_style = xml_attr(gt_source_note, \"style\"),\n    style = s\n  )\n}\n\nNow, let’s apply the gtExtras function and the one above to extract our annotations (title, subtitle, and caption). Since both tables’ information is analogous, we only need to apply these functions to one table.\n\nheader_data &lt;- gtExtras:::extract_tab_header_and_style(tables[[1]])\ncaption_data &lt;- extract_source_note(tables[[1]])\n\nFinally, we can use the htmltools package to generate an HTML container (div) that includes our tables and annotations! You can think of this as building the output vertically, where the title + subtitle go first, then the tables, and then our caption.\nFor the tables, we need to remove the individual annotations. Conveniently, you can set tab_header(NULL, NULL) to remove the title and subtitle, but for the caption, just setting tab_source_note(NULL) won’t actually work. You need to use the rm_source_notes function.\n\ndouble_tables &lt;- htmltools::div(\n  id = \"mycombinedtable\", # need this exact ID\n  ## table\n  htmltools::tag(\"style\", header_data[[\"style\"]]),\n  htmltools::div(\n    htmltools::HTML(full_header_html),  # Your custom header HTML\n    class = header_data[[\"title_class\"]],\n    style = header_data[[\"title_style\"]]\n  ),\n  htmltools::div(tables[[1]] %&gt;% gt::tab_header(NULL, NULL) %&gt;% rm_source_notes(), style = \"display: inline-block;float:left;\"),\n  htmltools::div(tables[[2]] %&gt;% gt::tab_header(NULL, NULL) %&gt;% rm_source_notes(), style = \"display: inline-block;float:right;\"),\n  ## caption\n  htmltools::tag(\"style\", caption_data[[\"style\"]]),\n  htmltools::div(\n    \"Data by Sports Reference | Viz. + Analysis by @andreweatherman | Idea from @JFreshHockey\",  # Your custom header HTML\n    class = caption_data[[\"source_note_class\"]],\n    style = caption_data[[\"source_note_style\"]]\n  )\n)\n\nTo view the output.\n\nhtmltools::browsable(double_tables)\n\nTo save the output.\n\ngtsave_extra(double_tables, \"wins_since_1980.png\", vwidth = 595, vheight = 1500, zoom = 5)"
  },
  {
    "objectID": "viz/window-wins/window-wins.html#getting-ready-for-plotting",
    "href": "viz/window-wins/window-wins.html#getting-ready-for-plotting",
    "title": "Total Wins in Rolling Windows",
    "section": "Getting Ready for Plotting",
    "text": "Getting Ready for Plotting\nEverything before this point has been pretty straightforward. But uh, now it’s time to start the “hacking” that I promised at the start.\nConditional highlighting\nTeam Logos + Pivoting\nIn our table, we are going to highlight on three conditions: a) no national titles won inside the window, b) one national title won inside the window, and c) multiple national titles won inside the window. (We aren’t actually going to do anything with point A; we’ll just leave those cells as-is – “filled with white”).\nBut the problem is that conditional highlighting in gt is a bit weird because tab_style + cell_fill does not really work as one might expect. Namely, row and column vectors aren’t treated as separate pairs. If you pass through, e.g. rows = c(1, 2) and columns = c(5, 6) inside tab_style, you’ll fill four cells, not two, because tab_style doesn’t treat things as unique pairs.\nTurns out, you can just build the CSS string for highlighting cells outside of the table and apply it directly with opt_css…but this is a bit convoluted when you are highlighting multiple things.\nOkay, so how do we do that? First, let’s grab team logos by creating a named vector using cbd_logos from cbbdata. (cbbdata ships with a function to create a named vector for matching team names, and I’ll eventually do the same thing for logos.)\n\nlogos &lt;- cbd_teams() %&gt;% select(team = sr_team, logo)\nlogos &lt;- logos %&gt;% pull(logo) %&gt;% rlang::set_names(logos$team)\n\nOkay, so we’re going to need to pivot our data, but if we do it now, things will work…but our resulting tibble loses a crucial piece of information: total_titles!\nI thought of a nifty way to include that information without sacrificing the neatness of our pivoted table. We can create an HTML string using &lt;img&gt; tags to reference logo links and throw in an alt tag that refers to total_titles. Adding an alt tag is completely harmless in our static table.\n\n\n\n\n\n\nPivoting in R\n\n\n\nI’m not going to lie, pivoting was one of the few things that really took some time to “click.” I recommend looking over this vignette if you’re in the same boat.\n\n\n\nplot_data &lt;- plot_data %&gt;% \n  mutate(team = glue(\"&lt;img src='{logos[team]}' alt={total_titles} style='height:30px; vertical-align:middle;'&gt;\")) %&gt;% \n  pivot_wider(id_cols = years, names_from = position, values_from = team)\n\nGenerating the CSS\nThe final part is to define a function that will generate our needed CSS. Our CSS needs to target an individual cell and set its background-color relative to the number of titles won in a window, which is included in our alt tag. We can use the base R functions arrayInd and which to return a matrix of row-column indices that point to where the specific alt tag is true.\nWe will then loop over these indices to generate a string in the structure of #table_id tbody tr:nth-child({row}) td:nth-child({column}) {{ background-color: {color}; }}.\nThis looping is done when generating the tables themselves, but the functions are defined below.\n\ngenerate_css &lt;- function(data, css_id, pattern, color) {\n  indices &lt;- arrayInd(\n    which(str_detect(as.matrix(data), pattern)),\n    .dim = dim(data)\n  )\n  map2_chr(\n    .x = indices[, 1],\n    .y = indices[, 2],\n    .f = ~glue(\"#{css_id} tbody tr:nth-child({.x}) td:nth-child({.y}) {{ background-color: {color}; }}\")\n  )\n  \n}\n\npatterns_colors &lt;- tibble(\n  pattern = c('alt=0', 'alt=1', 'alt=2+'),\n  color = c('#ffffff', '#ECCE83', '#F4A261')\n)\n\nHeader + Legend\nI went back and forth on how to style the table header. I thought about effectively removing the need for a legend by coloring specific text in the subtitle with the appropriate colors – ala 1 national title in window and 2+ titles in window – but I wanted to keep with the colored boxes theme of the body itself.\nIf you haven’t caught on by now, gt offers so much versatility because it effectively renders HTML, and you can do a lot of stuff with that. To build the legend boxes, we can create a span that uses inline-block with equal width and height (to make squares). We then “mush” everything together in a single &lt;div&gt;.\n\nkey_info &lt;- tibble(\n  color = c('#ECCE83', '#F4A261'),\n  label = c(\"1 national title in window\", '2+ titles in window')\n)\n\nkey_html &lt;- key_info %&gt;%\n  mutate(\n    key_item = glue(\"&lt;span style='display: inline-block; margin-right: 5px; width: 15px; height: 15px; background-color: {color};'&gt;&lt;/span&gt;&lt;span style='margin-left: 5px;font-size:12px;vertical-align:20%'&gt;{label}&lt;/span&gt;\")\n  ) %&gt;%\n  pull(key_item) %&gt;%\n  paste(collapse = ' ')\n\nfull_header_html &lt;- glue(\n  \"&lt;div style='text-align: center;'&gt;\n    &lt;div style='font-size: 16px; margin-bottom: 4px;'&gt;Winningest college basketball programs in 10-year windows&lt;/div&gt;\n    &lt;div style='font-size: 13px; margin-bottom: 10px;font-weight:normal'&gt;Ties are broken by win percentage. Data starts from 0 in 1980.&lt;/div&gt;\n    &lt;div&gt;{key_html}&lt;/div&gt;\n  &lt;/div&gt;\"\n)"
  },
  {
    "objectID": "viz/game-performance/game-performance.html#plotting",
    "href": "viz/game-performance/game-performance.html#plotting",
    "title": "Team Game Performance",
    "section": "Plotting",
    "text": "Plotting\nOur table will use a few functions from {cbbplotR} to aid in creating our table. Here is a quick overview of each.\nAdding opponent logos\nOur table includes logos of each Duke opponent, which is a nice way of quickly identifying any game of interest. This process involves mashing together some HTML, but cbbplotR includes a function called gt_cbb_teams that will do this for us!\nOur table will have some dark fill colors for wins and losses, so let’s use dark mode logos for our opponents. By default, gt_cbb_teams pulls normal logos, but you can set logo_color = “dark” to get dark ones.\nWe also want to include the KenPom rank of each opponent, but we need to add it after we have called gt_cbb_teams. Then, let’s create a new frame called table_data.\n\ntable_data &lt;- factors_net %&gt;% \n  # we want to add HTML in the opp col. and rewrite it -&gt; so: opp, opp\n  gt_cbb_teams(opp, opp, logo_color = 'dark') %&gt;% \n  mutate(opp = glue('{opp} (#{rank})'))\n\nCreating the title\nIf you notice, our table header is pretty cool. It includes Duke’s logo, which is a nice way of quickly identifying the subject of our data. Making a header like this includes tinkering with some HTML — but luckily, cbbplotR ships with a function that will build the header for us! More specifically, it will allow us to include a team logo, conference logo, player headshot, or a custom image by passing through an external link. As you’ll see later in the code, we will eventually need to wrap this object in HTML.\nTo include a logo for Duke, we set the value to Duke and the type to “team”. We can set a table title + subtitle and adjust the fonts, weights, and line-heights of both as well (which we won’t do).\n\ngt_title &lt;- gt_cbb_logo_title(\n  title = 'Game-by-game efficiency performance for Duke in ACC play | 2023-24',\n  subtitle = 'D1 vs. D1 only. Data, rankings, and quadrants are through the end of the 2023-24 season.',\n  value = 'Duke',\n  type = 'team'\n)\n\nColoring W/L\ncbbplotR ships with another utility function, gt_color_results, that will take a column of game results — either W/L characters or 1/0 binaries — and fill each row relative to the game result. It’s a tidy way of replicating two tab_style calls in a single line. You can also adjust the win/loss_color (fill) and the wins/loss_text_color. By default, the font color is white, which we will keep.\nSetting the table font\nThe final cbbplotR utility function is gt_set_font, which is a quick and dirty way of changing the font in all customizable parts of your table. You’ll notice that we will still use tab_style to adjust the weights of our column labels, however, and it should be noted that gt_set_font does not yet offer customization aside from changing the font family. You can think of it as a nice way to test different fonts in your table.\nBuilding the table\nNow that we have briefly explored each cbbplotR function, created our table header, and finalized our data, let’s throw it over to gt!\nOkay, there’s a lot going on here. If you’re relatively new to gt, I really recommend that you step through each line. It might seem overwhelming, but many of the functions are intuitively named, and running the code line-by-line should help you understand what’s happening.\nOptional CSS\nI’m not going to walk through every function, but I did want to briefly mention the opt_css line at the end. opt_css is a way of adding CSS to your tables, which really extends table possibilities. In fact, gt is just converting everything to HTML — which is why we can get some neat customization with our table header.\nIn our table, specifically, we use this CSS to decrease the spacing between each footnote and our caption lines. To make this work, we need to set a table ID, which we do in the second line with gt(id = 'duke') and then reference that ID as a selector.\n\ntable_data %&gt;% \n  gt(id = 'duke') %&gt;% \n  gt_theme_538() %&gt;% \n  fmt_markdown(opp) %&gt;% \n  cols_move(date, opp) %&gt;% \n  cols_move_to_end(quad) %&gt;% \n  cols_hide(c(result, rank, net)) %&gt;% \n  cols_align(columns = everything(), 'center') %&gt;% \n  cols_align(columns = opp, 'left') %&gt;% \n  cols_label(opp = 'opponent (KenPom Rk.)', off_ppp = 'PPP', \n             def_ppp = 'PPP',off_efg = 'eFG%', off_to = 'TOV%', \n             off_or = 'Reb%',off_ftr = 'FTA/FGA', def_efg = 'eFG%',\n             def_to = 'TOV%', def_or = 'Reb%', def_ftr = 'FTA/FGA',\n             game_score = 'Eff. Score', quad = 'NET Quad',\n             closest_rank = 'Like #') %&gt;% \n  gt_color_results() %&gt;% \n  tab_style(locations = cells_column_labels(),\n            style = cell_text(font = 'Oswald', weight = 'bold')) %&gt;% \n  tab_style(locations = cells_title(), style =\n              cell_text(font = 'Oswald')) %&gt;% \n  tab_options(table.font.names = 'Oswald', data_row.padding = 2) %&gt;% \n  gt_add_divider(score, include_labels = FALSE, color = 'black') %&gt;% \n  gt_add_divider(off_ftr, include_labels = FALSE, color = 'black') %&gt;% \n  gt_add_divider(def_ftr, include_labels = FALSE, color = 'black') %&gt;% \n  tab_spanner(off_ppp:off_ftr, label = 'Offensive Performance',\n              id = 'offense') %&gt;% \n  tab_spanner(def_ppp:def_ftr, label = 'Defensive Performance',\n              id = 'defense') %&gt;% \n  tab_footnote(cells_column_spanners(spanner = c('offense', 'defense')),\n               footnote = \"Points per possession + 'Four Factors'\n               (effective FG%, turnover rate, off/def rebound rate,\n               and FTA per 100 FGA)\") %&gt;% \n  tab_footnote(cells_column_labels(columns = game_score),\n               footnote = 'This value is used to calculate the\n               proceeding column and can be viewed as a [0-100]\n               composite game performance score') %&gt;%\n  tab_footnote(cells_column_labels(columns = closest_rank),\n               footnote = 'This game performance is roughly\n               equivalent to how #X would be expected to play in the\n               same game (Barttorvik)') %&gt;% \n  tab_header(title = html(gt_title)) %&gt;% \n  tab_source_note(md('Data by cbbdata + cbbplotR\n                     &lt;br&gt;Viz. + Analysis by @andreweatherman')) %&gt;% \n  opt_css(\n    '\n      #duke .gt_sourcenote{\n        line-height: 1.2;\n        padding-top: 9px !important;\n      }\n      #duke .gt_footnote {\n        padding-top: 7px !important;\n        padding-bottom: 7px !important;\n        line-height: 0.2;\n      }\n      '\n  )"
  },
  {
    "objectID": "viz/boxigami/boxigami.html",
    "href": "viz/boxigami/boxigami.html",
    "title": "Boxigami",
    "section": "",
    "text": "In late December 2023, Todd Whitehead tweeted a visualization that gave a creative spin on career distributions. I’m really digging the 2048-vibe and the ‘Scorigami’ potential.\n\n\nWhen I first wrote this code, I did it with Zach Edey and used cbbdata, and while I think that package is pretty intuitive, it has a glaring limitation: It only provides men’s college basketball data. As such, this code is going to scrape Sports Reference, which will open the door for using women’s college basketball data and professional data.\n\nWhat we will be creating"
  },
  {
    "objectID": "resume/resume.html",
    "href": "resume/resume.html",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Email | Twitter | LinkedIn | GitHub\n\n\n\n\nDuke University, Durham, North Carolina | Graduated May 2023\n\n\n\n\n\nProgramming Languages: Python, R, SQL\nTools & Technologies: Quarto, R Markdown, Git, Tableau\nSoft Skills: Problem-solving, communication, teamwork\n\n\n\n\n\n\nDurham, North Carolina | July 2021 - May 2023\n\nManaged extensive pre-game preparations for both home and away games, including equipment logistics, practice setups, and player support activities – for more than 240 practices and 70 games.\nThrived under the high-pressure environment of college basketball games, especially during road trips with intense fan interactions, navigating and adapting to various arena set-ups and challenges.\n\n\n\n\nCity, State | June 2018 - May 2020 - Developed and maintained reports for monthly KPIs which helped reduce the decision-making cycle by 25%. - Utilized statistical analysis to predict trends and inform company marketing strategies. - Automated data collection and cleansing processes, saving up to 20 hours of manual work per week.\n\n\n\n\n\nCertified Data Analyst, Certification Body, 2019\nAdvanced R Programmer, Certification Body, 2017\n\n\n\n\n\n\nRole | Technologies used - Brief description of what the project accomplished and the technologies used. - Highlight any unique challenges faced and how they were overcome.\n\n\n\n\nAvailable upon request."
  },
  {
    "objectID": "resume/resume.html#professional-summary",
    "href": "resume/resume.html#professional-summary",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Detail-oriented and data-driven professional with a strong background in data analysis and software engineering. Proven track record of leveraging analytical skills and technical expertise to drive business growth and improve processes."
  },
  {
    "objectID": "resume/resume.html#skills",
    "href": "resume/resume.html#skills",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Programming Languages: Python, R, SQL\nTools & Technologies: Quarto, R Markdown, Git, Tableau\nSoft Skills: Problem-solving, communication, teamwork"
  },
  {
    "objectID": "resume/resume.html#experience",
    "href": "resume/resume.html#experience",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Durham, North Carolina | July 2021 - May 2023\n\nManaged extensive pre-game preparations for both home and away games, including equipment logistics, practice setups, and player support activities – for more than 240 practices and 70 games.\nThrived under the high-pressure environment of college basketball games, especially during road trips with intense fan interactions, navigating and adapting to various arena set-ups and challenges.\n\n\n\n\nCity, State | June 2018 - May 2020 - Developed and maintained reports for monthly KPIs which helped reduce the decision-making cycle by 25%. - Utilized statistical analysis to predict trends and inform company marketing strategies. - Automated data collection and cleansing processes, saving up to 20 hours of manual work per week."
  },
  {
    "objectID": "resume/resume.html#education",
    "href": "resume/resume.html#education",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Duke University, Durham, North Carolina | Graduated May 2023"
  },
  {
    "objectID": "resume/resume.html#certifications",
    "href": "resume/resume.html#certifications",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Certified Data Analyst, Certification Body, 2019\nAdvanced R Programmer, Certification Body, 2017"
  },
  {
    "objectID": "resume/resume.html#projects",
    "href": "resume/resume.html#projects",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Role | Technologies used - Brief description of what the project accomplished and the technologies used. - Highlight any unique challenges faced and how they were overcome."
  },
  {
    "objectID": "resume/resume.html#references",
    "href": "resume/resume.html#references",
    "title": "Andrew Weatherman",
    "section": "",
    "text": "Available upon request."
  },
  {
    "objectID": "other-code/index.html",
    "href": "other-code/index.html",
    "title": "Other Code",
    "section": "",
    "text": "Scraping Sports Reference\n\n\n\ncollege basketball\n\n\nscraping\n\n\ntutorial\n\n\n\n…\n\n\n\nMay 13, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "other-code/polls-sr/polls-scraping.html",
    "href": "other-code/polls-sr/polls-scraping.html",
    "title": "Scraping Sports Reference",
    "section": "",
    "text": "Sports Reference is an awesome resource for historical data on any number of sports. The great thing about the site is that it’s completely static, meaning scraping is pretty straightforward.\nThis post is going to cover a number of common scraping exercises on Sports Reference. It’s important to see that, for nearly everything on the site, there exists a common structure for data. That is, you can generally just switch out the URL in most places. This page is more for introducing boilerplate functions for convenience.\nFor this template, you need the following packages.\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(janitor)"
  },
  {
    "objectID": "other-code/polls-sr/polls-scraping.html#scraping-polls",
    "href": "other-code/polls-sr/polls-scraping.html#scraping-polls",
    "title": "Scraping Sports Reference",
    "section": "Scraping Polls",
    "text": "Scraping Polls\nSports Reference segments data by season, meaning that you need to loop over a vector of years to grab all data. For Associated Press polls (“AP Poll”), that data is found at the following link: .../{men/women}/{season}-polls.html. For the USA Today Coaches Poll, that is found at: .../{men/women}/{season}-polls-coaches.html.\nThe functions below are written to pull men’s data. If you want women’s polling data, simply change “men” to “women” in each URL.\nAP Polls\n\nget_ap_poll &lt;- function(year) {\n  \n  url &lt;- paste0('https://www.sports-reference.com/cbb/seasons/men/', year, '-polls.html')\n  \n  Sys.sleep(3)\n  \n  html &lt;- read_html(url)\n  \n  # for current poll // past years will not have a 'current' poll so we need to catch that error\n  current_poll &lt;- tryCatch({\n    html %&gt;%\n      html_nodes(\"#current-poll\") %&gt;%\n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(chng = as.numeric(chng),\n             year = year)\n  }, error = function(e) {NULL})\n    \n  # for season-long polls\n  all_polls &lt;- html %&gt;%\n    html_nodes(\"#ap-polls\") %&gt;%\n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    row_to_names(2) %&gt;% \n    clean_names() %&gt;% \n    rename_with(~paste0(\"week_\", seq_along(.)), starts_with(\"x\")) %&gt;% # shift to week_X name format\n    mutate(across(-c(school, conf), as.numeric),\n           year = year)\n  \n  return(list(\"current\" = current_poll, \"all\" = all_polls))\n\n}\n\nCoaches Polls\n\nget_coaches_poll &lt;- function(year) {\n  \n  url &lt;- paste0('https://www.sports-reference.com/cbb/seasons/men/', year, '-polls-coaches.html')\n  \n  Sys.sleep(3)\n  \n  html &lt;- read_html(url)\n  \n  # for current poll // past years will not have a 'current' poll so we need to catch that error\n  current_poll &lt;- tryCatch({\n    html %&gt;%\n      html_nodes(\"#current-poll\") %&gt;%\n      html_table() %&gt;% \n      pluck(1) %&gt;% \n      clean_names() %&gt;% \n      mutate(chng = as.numeric(chng),\n             year = year)\n  }, error = function(e) {NULL})\n    \n  # for season-long polls\n  all_polls &lt;- html %&gt;%\n    html_nodes(\"#coaches-polls\") %&gt;%\n    html_table() %&gt;% \n    pluck(1) %&gt;% \n    row_to_names(2) %&gt;% \n    clean_names() %&gt;% \n    rename_with(~paste0(\"week_\", seq_along(.)), starts_with(\"x\")) %&gt;% # shift to week_X name format\n    mutate(across(-c(school, conf), as.numeric),\n           year = year)\n  \n  return(list(\"current\" = current_poll, \"all\" = all_polls))\n\n}"
  },
  {
    "objectID": "other-code/polls-sr/polls-scraping.html#scraping-leaderboards",
    "href": "other-code/polls-sr/polls-scraping.html#scraping-leaderboards",
    "title": "Scraping Sports Reference",
    "section": "Scraping Leaderboards",
    "text": "Scraping Leaderboards\nLeaderboards on Sports Reference are expandable sections that are hidden by default, and there are two ways to grab this data.\nProgram Leaders\nThis is the more straightforward structure. All program leaderboards use the data_grid_box class, which we can isolate with html_nodes.\n\nread_html('https://www.sports-reference.com/cbb/schools/duke/men/leaders-and-records-season.html') %&gt;% \n  html_nodes('.data_grid_box') %&gt;% \n  html_table()"
  },
  {
    "objectID": "viz/b10-composite-schedule/composite_schedule.html",
    "href": "viz/b10-composite-schedule/composite_schedule.html",
    "title": "Big Ten Football Schedule",
    "section": "",
    "text": "In late April, @cobrastats posted a great graphic on the 2024 Big Ten football schedule. He open-sourced his code on GitHub, and with his permission, I created a pull request to show my attempt at creating the same graphic. You can find that code, with brief explanation, on the repository linked above, but I’m going to use this space to expand a bit more.\n\n\n\nWhat we will be creating"
  },
  {
    "objectID": "viz/b10-composite-schedule/composite_schedule.html#the-data",
    "href": "viz/b10-composite-schedule/composite_schedule.html#the-data",
    "title": "Big Ten Football Schedule",
    "section": "The Data",
    "text": "The Data\nMost of this is pretty straightforward. With schedule, we pull the 2024 college football schedule, filter for games that have occured (NY6), select the relevant variables, and then convert the date column.\nWith weeks, we pull the week numbers associated with each range of dates in the 2024 season – since not all games in a given week are played on the same day.\nFinally, we use the overlap join functionality in the dplyr::X_join family to match our game dates to week numbers between the start_date and end_date range in weeks.\n\n\n\n\n\n\nTip\n\n\n\nWe don’t actually need to grab weeks (or join our data) because we could just infer the week numbers from game dates (ascending order) – but I did so for clarity and practice.\n\n\n\nschedule &lt;- espn_cfb_schedule(year = 2024, limit = 1000) %&gt;% \n  filter(is.na(home_record)) %&gt;% # remove games that have occured\n  select(home_team = home_team_location, away_team = away_team_location, date = game_date) %&gt;% \n  mutate(date = as.Date(date, format = \"%Y-%m-%dT%H:%MZ\"))\n\nweeks &lt;- espn_cfb_calendar(year = 2024) %&gt;% \n  select(week, start_date, end_date) %&gt;% \n  mutate(across(-week, ~as.Date(.x, format = \"%Y-%m-%dT%H:%MZ\")))\n\nschedule &lt;- left_join(\n  schedule,\n  weeks,\n  join_by(between(date, start_date, end_date))\n)\n\nNow, let’s create a vector of Big Ten teams and filter down.\n\nb1g = c(\"Illinois\", \"Indiana\", \"Iowa\", \"Nebraska\", \"Northwestern\", \"Michigan\", \"Michigan State\", \"Minnesota\",\n        \"Ohio State\", \"Penn State\", \"Rutgers\", \"Wisconsin\", \"Purdue\", \"Maryland\", \"Washington\", \"USC\", \"UCLA\", \"Oregon\")\n\nschedule &lt;- schedule %&gt;% filter(home_team %in% b1g | away_team %in% b1g)\n\nPivoting data with help from nflreadr\n\nRight now, our data looks like this. For plotting, however, we want 18 rows (number of Big Ten teams) and 15 columns (one for Big Ten teams and 14 others for week). There are a few ways to approach this problem, and the easiest is to simply “pivot” our data wider.\n\n\n\n\n\n\n\n\n\n\n\n\n\nhome_team\naway_team\ndate\nweek\nstart_date\nend_date\n\n\n\nMinnesota\nNorth Carolina\n2024-08-29\n1\n2024-08-24\n2024-09-03\n\n\nIllinois\nEastern Illinois\n2024-08-29\n1\n2024-08-24\n2024-09-03\n\n\nIndiana\nFlorida International\n2024-08-31\n1\n2024-08-24\n2024-09-03\n\n\nIowa\nIllinois State\n2024-08-31\n1\n2024-08-24\n2024-09-03\n\n\nMaryland\nUConn\n2024-08-31\n1\n2024-08-24\n2024-09-03\n\n\nMichigan\nFresno State\n2024-08-31\n1\n2024-08-24\n2024-09-03\n\n\n\n\n\n\nWith pivoting, though, we’re going to run in a small problem: Our Big Ten team might be home or away. The two columns with team information are organized by location and not conference. We can fix this by first pivoting our data to a long format, using pivot_longer, and then filter the resulting value column for Big Ten teams.\nFor this case, pivot_longer works, but other times, you might have more statistics and want a more streamlined solution. I want to show off a nice utility function from nflreadr that will pivot data and convert your pipeline to something more standardized: nflreadr::clean_homeaway. It converts home_ and away_ prefixed columns to team_ and opponent_ while doubling the rows (one row per team, not per game).\n\n\n\n\n\n\nTip\n\n\n\nIf you relabel home_team and away_team to home and away, then schedule %&gt;% pivot_longer(home:away) would accomplish the exact same thing. I wanted to take this opportunity to introduce this function.\n\n\n\nschedule %&gt;% \n  select(home_team, away_team, week) %&gt;% \n  clean_homeaway()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nteam\nopponent\ndate\nweek\nstart_date\nend_date\nlocation\n\n\n\nMinnesota\nNorth Carolina\n2024-08-29\n1\n2024-08-24\n2024-09-03\nhome\n\n\nNorth Carolina\nMinnesota\n2024-08-29\n1\n2024-08-24\n2024-09-03\naway\n\n\nIllinois\nEastern Illinois\n2024-08-29\n1\n2024-08-24\n2024-09-03\nhome\n\n\nEastern Illinois\nIllinois\n2024-08-29\n1\n2024-08-24\n2024-09-03\naway\n\n\nIndiana\nFlorida International\n2024-08-31\n1\n2024-08-24\n2024-09-03\nhome\n\n\nFlorida International\nIndiana\n2024-08-31\n1\n2024-08-24\n2024-09-03\naway\n\n\nIowa\nIllinois State\n2024-08-31\n1\n2024-08-24\n2024-09-03\nhome\n\n\nIllinois State\nIowa\n2024-08-31\n1\n2024-08-24\n2024-09-03\naway\n\n\nMaryland\nUConn\n2024-08-31\n1\n2024-08-24\n2024-09-03\nhome\n\n\nUConn\nMaryland\n2024-08-31\n1\n2024-08-24\n2024-09-03\naway\n\n\nMichigan\nFresno State\n2024-08-31\n1\n2024-08-24\n2024-09-03\nhome\n\n\nFresno State\nMichigan\n2024-08-31\n1\n2024-08-24\n2024-09-03\naway\n\n\n\n\n\n\nAfter which, we can filter down to Big Ten teams.\n\nplot_data &lt;- schedule %&gt;% \n  select(home_team, away_team, week) %&gt;% \n  nflreadr::clean_homeaway() %&gt;% \n  filter(team %in% b1g)\n\nAdding logos\nBefore we can pivot our data, we need to add team logos and find a way to preserve our location data during the pivot without creating new columns. A nifty idea is to transition our opponent column to an HTML string with an &lt;img&gt; tag that includes the link to the team logo and uses the alt caption to encode location data. In a static table, the alt tag serves no purpose, so we can use glue to toss in the game location.\nFirst, let’s grab team logos. Importantly, these team names are coming from ESPN, so let’s select those values to ensure an effortless join. We are going to use pull and set_names to create a named vector with team names and logo links.\n\nlogos &lt;- cbd_teams() %&gt;% select(team = espn_location, logo)\nlogos &lt;- logos %&gt;% pull(logo) %&gt;% set_names(logos$team)\n\nRemember that named vectors work like so, object_name[value], so to grab logo links for our opponent column, we can do: logos[opponent]. Our location data is stored inside of the alt tag shown below.\n\nplot_data &lt;- plot_data %&gt;% \n  mutate(opponent = glue(\"&lt;img src='{logos[opponent]}' alt={location} style='height:25px; vertical-align:middle;'&gt;\"))\n\nNow that we have converted our opponent column, we can safely pivot our data wider by selecting team as the identifier column, grabbing our column names from the week variable, and setting our values as the opponent column.\nFinally, we will arrange our data in alphabetical order by team and then convert our team column to the proper logo link using the named vector.\n\nplot_data &lt;- plot_data %&gt;% \n  pivot_wider(id_cols = team, names_from = week, values_from = opponent) %&gt;% \n  arrange(team) %&gt;% \n  mutate(team = logos[team])\n\n\n\n\n\n\n\n\n\n\nteam\n1\n\n\n\nhttp://a.espncdn.com/i/teamlogos/ncaa/500/356.png\n\n\n\nhttp://a.espncdn.com/i/teamlogos/ncaa/500/84.png\n\n\n\nhttp://a.espncdn.com/i/teamlogos/ncaa/500/2294.png\n\n\n\nhttp://a.espncdn.com/i/teamlogos/ncaa/500/120.png\n\n\n\nhttp://a.espncdn.com/i/teamlogos/ncaa/500/130.png\n\n\n\nhttp://a.espncdn.com/i/teamlogos/ncaa/500/135.png"
  },
  {
    "objectID": "viz/b10-composite-schedule/composite_schedule.html#plotting",
    "href": "viz/b10-composite-schedule/composite_schedule.html#plotting",
    "title": "Big Ten Football Schedule",
    "section": "Plotting",
    "text": "Plotting\nConditional Highlighting\nIn our table, we are going to highlight on two conditions: a) game location (home games are blue; away games are white) and b) bye weeks (gray).\nBut the problem is that conditional highlighting in gt is a bit weird because tab_style + cell_fill does not really work as one might expect. Namely, row and column vectors aren’t treated as separate pairs. If you pass through, e.g. rows = c(1, 2) and columns = c(5, 6) inside tab_style, you’ll fill four cells, not two, because tab_style doesn’t treat things as unique pairs.\nTurns out, you can just build the CSS string for highlighting cells outside of the table and apply it directly with opt_css. The basic idea is this: We take a matrix of row-column indices, a table ID, and a color – and then inject those into a basic CSS string that targets cells and colors their background.\n\ngenerate_css &lt;- function(indices, css_id, color) {\n    map2_chr(\n    .x = indices[, 1],\n    .y = indices[, 2],\n    .f = ~glue(\"#{css_id} tbody tr:nth-child({.x}) td:nth-child({.y}) {{ background-color: {color}; }}\")\n  )\n}\n\nWe are using which and str_detect to find the row and column indices where “home” is present inside the alt tag – the same with is.na for bye games – and then apply our generate_css function.\n\nhome_css &lt;- arrayInd(which(str_detect(as.matrix(plot_data), 'alt=home')), .dim = dim(plot_data)) %&gt;% \n  generate_css('table', '#cce7f5')\n\nbye_css &lt;- arrayInd(which(is.na(as.matrix(plot_data))), .dim = dim(plot_data)) %&gt;% \n  generate_css('table', '#d9d9d9')\n\nI’m going to add one more pieces of css, and to make things cleaner in the final plot code, I’m going to define that rule here. (This just decreases the spacing in my caption.)\n\nadditional_css &lt;- \"\n  \n  #table .gt_sourcenote {\n    line-height: 1.3;\n  }\n\n\"\n\nHeader + Legend\nI like how the original table combines the legend with the title, and I’m going to do the same. I’m going to make two changes: a) I’m not using the Big Ten logo and b) I’m going to stack the title and legend (and center it).\nThis is all done with custom HTML, which will further inherit certain styles from the table theme (font family, size, weight, etc.). We can tweak a bit of that with in-line CSS.\n\nhtml_content &lt;- '\n&lt;div style=\"text-align: center;\"&gt;\n  &lt;h1 style=\"margin: 0; font-size: 20px;\"&gt;Big Ten Football Schedule | 2024&lt;/h1&gt;\n  &lt;div style=\"display: flex; justify-content: center; align-items: center; margin-top: 5px;\"&gt;\n    &lt;div style=\"border: 1.5px solid black; padding: 2px 10px; text-align: center; background-color: #cce7f5; font-size: 10px; margin-right: 5px;\"&gt;Home&lt;/div&gt;\n    &lt;div style=\"border: 1.5px solid black; padding: 2px 10px; text-align: center; font-size: 10px; margin-right: 5px;\"&gt;Away&lt;/div&gt;\n    &lt;div style=\"border: 1.5px solid black; padding: 2px 10px; text-align: center; background-color: #d9d9d9; font-size: 10px;\"&gt;Bye&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n'\n\nBuilding the table\nThe body of our table is pretty straightforward. fmt_image renders in our logo link for the team column, while fmt_markdown does the same thing for weeks 1:14. sub_missing is a great utility function to replace text in NA columns. We can use gt_add_divider to create more pronounced divisions between rows and weeks (I prefer this look over the original).\n\n\n\n\n\n\nTip\n\n\n\nSince we built an HTML string for our opponent columns, to preserve the game location data, we need to use fmt_markdown, not fmt_image.\n\n\n\nplot_data %&gt;% \n  gt(id = 'table') %&gt;% \n  gt_theme_538() %&gt;% \n  fmt_image(team, height = 25) %&gt;%\n  fmt_markdown(-team) %&gt;% \n  # use sub_missing to replace na with empty text string\n  sub_missing(-team, missing_text = '') %&gt;% \n  cols_align(columns = everything(), 'center') %&gt;% \n  cols_label(team = '') %&gt;% \n  # bold col. headers\n  tab_style(locations = cells_column_labels(), style = cell_text(weight = 'bold')) %&gt;% \n  # add dividers\n  gt_add_divider(columns = -team, sides = 'all', include_labels = FALSE, color = 'black', weight = px(1.5)) %&gt;% \n  tab_header(html(html_content)) %&gt;% \n  tab_source_note(md(\"Data by cfbfastR&lt;br&gt;Viz. by @andreweatherman (h/t to @cobrastats)\")) %&gt;% \n  tab_options(data_row.padding = 1) %&gt;% \n  # apply above css\n  opt_css(c(home_css, bye_css, additional_css)) %&gt;% \n  gtsave_extra(\"schedule.png\", zoom = 5)"
  }
]